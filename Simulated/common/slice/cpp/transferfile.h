// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.4
//
// <auto-generated>
//
// Generated from file `transferfile.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __transferfile_h__
#define __transferfile_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/GCObject.h>
#include <Ice/AsyncResult.h>
#include <Ice/Incoming.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 306
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 4
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace TransferFileSpace
{

class TransferFile;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::TransferFileSpace::TransferFile>&);
::IceProxy::Ice::Object* upCast(::IceProxy::TransferFileSpace::TransferFile*);

}

}

namespace TransferFileSpace
{

class TransferFile;
::Ice::Object* upCast(::TransferFileSpace::TransferFile*);
typedef ::IceInternal::Handle< ::TransferFileSpace::TransferFile> TransferFilePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::TransferFileSpace::TransferFile> TransferFilePrx;
void __patch(TransferFilePtr&, const ::Ice::ObjectPtr&);

}

namespace TransferFileSpace
{

typedef ::std::vector< ::Ice::Byte> Bytes;

struct FileContent
{
    ::Ice::Long pos;
    ::TransferFileSpace::Bytes content;
    bool status;
};

typedef ::std::vector< ::std::string> FileDirSeq;

}

namespace Ice
{
template<>
struct StreamableTraits< ::TransferFileSpace::FileContent>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 10;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::TransferFileSpace::FileContent, S>
{
    static void write(S* __os, const ::TransferFileSpace::FileContent& v)
    {
        __os->write(v.pos);
        __os->write(v.content);
        __os->write(v.status);
    }
};

template<class S>
struct StreamReader< ::TransferFileSpace::FileContent, S>
{
    static void read(S* __is, ::TransferFileSpace::FileContent& v)
    {
        __is->read(v.pos);
        __is->read(v.content);
        __is->read(v.status);
    }
};

}

namespace TransferFileSpace
{

class Callback_TransferFile_notifyRealdbBackup_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TransferFile_notifyRealdbBackup_Base> Callback_TransferFile_notifyRealdbBackupPtr;

class Callback_TransferFile_finishRealdbBackup_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TransferFile_finishRealdbBackup_Base> Callback_TransferFile_finishRealdbBackupPtr;

class Callback_TransferFile_requestRealdb_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TransferFile_requestRealdb_Base> Callback_TransferFile_requestRealdbPtr;

class Callback_TransferFile_requestTransactionLogger_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TransferFile_requestTransactionLogger_Base> Callback_TransferFile_requestTransactionLoggerPtr;

class Callback_TransferFile_requestRealdbContent_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TransferFile_requestRealdbContent_Base> Callback_TransferFile_requestRealdbContentPtr;

class Callback_TransferFile_requestHisCurveFileList_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TransferFile_requestHisCurveFileList_Base> Callback_TransferFile_requestHisCurveFileListPtr;

class Callback_TransferFile_requestHisCurveFile_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TransferFile_requestHisCurveFile_Base> Callback_TransferFile_requestHisCurveFilePtr;

class Callback_TransferFile_requestWarningFileList_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TransferFile_requestWarningFileList_Base> Callback_TransferFile_requestWarningFileListPtr;

class Callback_TransferFile_requestWarningFile_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TransferFile_requestWarningFile_Base> Callback_TransferFile_requestWarningFilePtr;

class Callback_TransferFile_requestReportFileList_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TransferFile_requestReportFileList_Base> Callback_TransferFile_requestReportFileListPtr;

class Callback_TransferFile_requestReportFile_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TransferFile_requestReportFile_Base> Callback_TransferFile_requestReportFilePtr;

class Callback_TransferFile_sendFileBinary_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TransferFile_sendFileBinary_Base> Callback_TransferFile_sendFileBinaryPtr;

class Callback_TransferFile_sendRdbLoggerBinary_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TransferFile_sendRdbLoggerBinary_Base> Callback_TransferFile_sendRdbLoggerBinaryPtr;

class Callback_TransferFile_sendRdbLoggerFinished_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TransferFile_sendRdbLoggerFinished_Base> Callback_TransferFile_sendRdbLoggerFinishedPtr;

class Callback_TransferFile_syncRdbFinished_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TransferFile_syncRdbFinished_Base> Callback_TransferFile_syncRdbFinishedPtr;

}

namespace IceProxy
{

namespace TransferFileSpace
{

class TransferFile : virtual public ::IceProxy::Ice::Object
{
public:

    void notifyRealdbBackup()
    {
        notifyRealdbBackup(0);
    }
    void notifyRealdbBackup(const ::Ice::Context& __ctx)
    {
        notifyRealdbBackup(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_notifyRealdbBackup(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_notifyRealdbBackup(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_notifyRealdbBackup(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_notifyRealdbBackup(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_notifyRealdbBackup(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_notifyRealdbBackup(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_notifyRealdbBackup(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_notifyRealdbBackup(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_notifyRealdbBackup()
    {
        return begin_notifyRealdbBackup(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_notifyRealdbBackup(const ::Ice::Context& __ctx)
    {
        return begin_notifyRealdbBackup(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_notifyRealdbBackup(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_notifyRealdbBackup(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_notifyRealdbBackup(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_notifyRealdbBackup(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_notifyRealdbBackup(const ::TransferFileSpace::Callback_TransferFile_notifyRealdbBackupPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_notifyRealdbBackup(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_notifyRealdbBackup(const ::Ice::Context& __ctx, const ::TransferFileSpace::Callback_TransferFile_notifyRealdbBackupPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_notifyRealdbBackup(&__ctx, __del, __cookie);
    }

    void end_notifyRealdbBackup(const ::Ice::AsyncResultPtr&);
    
private:

    void notifyRealdbBackup(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_notifyRealdbBackup(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void finishRealdbBackup()
    {
        finishRealdbBackup(0);
    }
    void finishRealdbBackup(const ::Ice::Context& __ctx)
    {
        finishRealdbBackup(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_finishRealdbBackup(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_finishRealdbBackup(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_finishRealdbBackup(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_finishRealdbBackup(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_finishRealdbBackup(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_finishRealdbBackup(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_finishRealdbBackup(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_finishRealdbBackup(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_finishRealdbBackup()
    {
        return begin_finishRealdbBackup(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_finishRealdbBackup(const ::Ice::Context& __ctx)
    {
        return begin_finishRealdbBackup(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_finishRealdbBackup(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_finishRealdbBackup(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_finishRealdbBackup(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_finishRealdbBackup(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_finishRealdbBackup(const ::TransferFileSpace::Callback_TransferFile_finishRealdbBackupPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_finishRealdbBackup(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_finishRealdbBackup(const ::Ice::Context& __ctx, const ::TransferFileSpace::Callback_TransferFile_finishRealdbBackupPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_finishRealdbBackup(&__ctx, __del, __cookie);
    }

    void end_finishRealdbBackup(const ::Ice::AsyncResultPtr&);
    
private:

    void finishRealdbBackup(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_finishRealdbBackup(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool requestRealdb()
    {
        return requestRealdb(0);
    }
    bool requestRealdb(const ::Ice::Context& __ctx)
    {
        return requestRealdb(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_requestRealdb(const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_requestRealdb(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_requestRealdb(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_requestRealdb(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_requestRealdb(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_requestRealdb(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_requestRealdb(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_requestRealdb(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_requestRealdb(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_requestRealdb()
    {
        return begin_requestRealdb(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_requestRealdb(const ::Ice::Context& __ctx)
    {
        return begin_requestRealdb(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_requestRealdb(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_requestRealdb(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_requestRealdb(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_requestRealdb(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_requestRealdb(const ::TransferFileSpace::Callback_TransferFile_requestRealdbPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_requestRealdb(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_requestRealdb(const ::Ice::Context& __ctx, const ::TransferFileSpace::Callback_TransferFile_requestRealdbPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_requestRealdb(&__ctx, __del, __cookie);
    }

    bool end_requestRealdb(const ::Ice::AsyncResultPtr&);
    
private:

    bool requestRealdb(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_requestRealdb(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void requestTransactionLogger()
    {
        requestTransactionLogger(0);
    }
    void requestTransactionLogger(const ::Ice::Context& __ctx)
    {
        requestTransactionLogger(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_requestTransactionLogger(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_requestTransactionLogger(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_requestTransactionLogger(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_requestTransactionLogger(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_requestTransactionLogger(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_requestTransactionLogger(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_requestTransactionLogger(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_requestTransactionLogger(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_requestTransactionLogger()
    {
        return begin_requestTransactionLogger(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_requestTransactionLogger(const ::Ice::Context& __ctx)
    {
        return begin_requestTransactionLogger(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_requestTransactionLogger(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_requestTransactionLogger(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_requestTransactionLogger(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_requestTransactionLogger(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_requestTransactionLogger(const ::TransferFileSpace::Callback_TransferFile_requestTransactionLoggerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_requestTransactionLogger(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_requestTransactionLogger(const ::Ice::Context& __ctx, const ::TransferFileSpace::Callback_TransferFile_requestTransactionLoggerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_requestTransactionLogger(&__ctx, __del, __cookie);
    }

    void end_requestTransactionLogger(const ::Ice::AsyncResultPtr&);
    
private:

    void requestTransactionLogger(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_requestTransactionLogger(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::TransferFileSpace::FileContent requestRealdbContent(const ::std::string& __p_fileName, ::Ice::Long __p_pos)
    {
        return requestRealdbContent(__p_fileName, __p_pos, 0);
    }
    ::TransferFileSpace::FileContent requestRealdbContent(const ::std::string& __p_fileName, ::Ice::Long __p_pos, const ::Ice::Context& __ctx)
    {
        return requestRealdbContent(__p_fileName, __p_pos, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_requestRealdbContent(const ::std::string& __p_fileName, ::Ice::Long __p_pos, const ::IceInternal::Function<void (const ::TransferFileSpace::FileContent&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_requestRealdbContent(__p_fileName, __p_pos, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_requestRealdbContent(const ::std::string& __p_fileName, ::Ice::Long __p_pos, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_requestRealdbContent(__p_fileName, __p_pos, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_requestRealdbContent(const ::std::string& __p_fileName, ::Ice::Long __p_pos, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::TransferFileSpace::FileContent&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_requestRealdbContent(__p_fileName, __p_pos, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_requestRealdbContent(const ::std::string& __p_fileName, ::Ice::Long __p_pos, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_requestRealdbContent(__p_fileName, __p_pos, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_requestRealdbContent(const ::std::string& __p_fileName, ::Ice::Long __p_pos, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::TransferFileSpace::FileContent&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_requestRealdbContent(const ::std::string& __p_fileName, ::Ice::Long __p_pos)
    {
        return begin_requestRealdbContent(__p_fileName, __p_pos, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_requestRealdbContent(const ::std::string& __p_fileName, ::Ice::Long __p_pos, const ::Ice::Context& __ctx)
    {
        return begin_requestRealdbContent(__p_fileName, __p_pos, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_requestRealdbContent(const ::std::string& __p_fileName, ::Ice::Long __p_pos, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_requestRealdbContent(__p_fileName, __p_pos, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_requestRealdbContent(const ::std::string& __p_fileName, ::Ice::Long __p_pos, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_requestRealdbContent(__p_fileName, __p_pos, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_requestRealdbContent(const ::std::string& __p_fileName, ::Ice::Long __p_pos, const ::TransferFileSpace::Callback_TransferFile_requestRealdbContentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_requestRealdbContent(__p_fileName, __p_pos, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_requestRealdbContent(const ::std::string& __p_fileName, ::Ice::Long __p_pos, const ::Ice::Context& __ctx, const ::TransferFileSpace::Callback_TransferFile_requestRealdbContentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_requestRealdbContent(__p_fileName, __p_pos, &__ctx, __del, __cookie);
    }

    ::TransferFileSpace::FileContent end_requestRealdbContent(const ::Ice::AsyncResultPtr&);
    
private:

    ::TransferFileSpace::FileContent requestRealdbContent(const ::std::string&, ::Ice::Long, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_requestRealdbContent(const ::std::string&, ::Ice::Long, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool requestHisCurveFileList(const ::std::string& __p_sDate, const ::std::string& __p_eDate, ::TransferFileSpace::FileDirSeq& __p_fileList)
    {
        return requestHisCurveFileList(__p_sDate, __p_eDate, __p_fileList, 0);
    }
    bool requestHisCurveFileList(const ::std::string& __p_sDate, const ::std::string& __p_eDate, ::TransferFileSpace::FileDirSeq& __p_fileList, const ::Ice::Context& __ctx)
    {
        return requestHisCurveFileList(__p_sDate, __p_eDate, __p_fileList, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_requestHisCurveFileList(const ::std::string& __p_sDate, const ::std::string& __p_eDate, const ::IceInternal::Function<void (bool, const ::TransferFileSpace::FileDirSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_requestHisCurveFileList(__p_sDate, __p_eDate, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_requestHisCurveFileList(const ::std::string& __p_sDate, const ::std::string& __p_eDate, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_requestHisCurveFileList(__p_sDate, __p_eDate, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_requestHisCurveFileList(const ::std::string& __p_sDate, const ::std::string& __p_eDate, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool, const ::TransferFileSpace::FileDirSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_requestHisCurveFileList(__p_sDate, __p_eDate, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_requestHisCurveFileList(const ::std::string& __p_sDate, const ::std::string& __p_eDate, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_requestHisCurveFileList(__p_sDate, __p_eDate, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_requestHisCurveFileList(const ::std::string& __p_sDate, const ::std::string& __p_eDate, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool, const ::TransferFileSpace::FileDirSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_requestHisCurveFileList(const ::std::string& __p_sDate, const ::std::string& __p_eDate)
    {
        return begin_requestHisCurveFileList(__p_sDate, __p_eDate, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_requestHisCurveFileList(const ::std::string& __p_sDate, const ::std::string& __p_eDate, const ::Ice::Context& __ctx)
    {
        return begin_requestHisCurveFileList(__p_sDate, __p_eDate, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_requestHisCurveFileList(const ::std::string& __p_sDate, const ::std::string& __p_eDate, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_requestHisCurveFileList(__p_sDate, __p_eDate, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_requestHisCurveFileList(const ::std::string& __p_sDate, const ::std::string& __p_eDate, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_requestHisCurveFileList(__p_sDate, __p_eDate, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_requestHisCurveFileList(const ::std::string& __p_sDate, const ::std::string& __p_eDate, const ::TransferFileSpace::Callback_TransferFile_requestHisCurveFileListPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_requestHisCurveFileList(__p_sDate, __p_eDate, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_requestHisCurveFileList(const ::std::string& __p_sDate, const ::std::string& __p_eDate, const ::Ice::Context& __ctx, const ::TransferFileSpace::Callback_TransferFile_requestHisCurveFileListPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_requestHisCurveFileList(__p_sDate, __p_eDate, &__ctx, __del, __cookie);
    }

    bool end_requestHisCurveFileList(::TransferFileSpace::FileDirSeq& __p_fileList, const ::Ice::AsyncResultPtr&);
    
private:

    bool requestHisCurveFileList(const ::std::string&, const ::std::string&, ::TransferFileSpace::FileDirSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_requestHisCurveFileList(const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::TransferFileSpace::FileContent requestHisCurveFile(const ::std::string& __p_date, const ::std::string& __p_fileName, ::Ice::Long __p_pos)
    {
        return requestHisCurveFile(__p_date, __p_fileName, __p_pos, 0);
    }
    ::TransferFileSpace::FileContent requestHisCurveFile(const ::std::string& __p_date, const ::std::string& __p_fileName, ::Ice::Long __p_pos, const ::Ice::Context& __ctx)
    {
        return requestHisCurveFile(__p_date, __p_fileName, __p_pos, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_requestHisCurveFile(const ::std::string& __p_date, const ::std::string& __p_fileName, ::Ice::Long __p_pos, const ::IceInternal::Function<void (const ::TransferFileSpace::FileContent&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_requestHisCurveFile(__p_date, __p_fileName, __p_pos, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_requestHisCurveFile(const ::std::string& __p_date, const ::std::string& __p_fileName, ::Ice::Long __p_pos, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_requestHisCurveFile(__p_date, __p_fileName, __p_pos, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_requestHisCurveFile(const ::std::string& __p_date, const ::std::string& __p_fileName, ::Ice::Long __p_pos, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::TransferFileSpace::FileContent&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_requestHisCurveFile(__p_date, __p_fileName, __p_pos, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_requestHisCurveFile(const ::std::string& __p_date, const ::std::string& __p_fileName, ::Ice::Long __p_pos, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_requestHisCurveFile(__p_date, __p_fileName, __p_pos, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_requestHisCurveFile(const ::std::string& __p_date, const ::std::string& __p_fileName, ::Ice::Long __p_pos, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::TransferFileSpace::FileContent&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_requestHisCurveFile(const ::std::string& __p_date, const ::std::string& __p_fileName, ::Ice::Long __p_pos)
    {
        return begin_requestHisCurveFile(__p_date, __p_fileName, __p_pos, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_requestHisCurveFile(const ::std::string& __p_date, const ::std::string& __p_fileName, ::Ice::Long __p_pos, const ::Ice::Context& __ctx)
    {
        return begin_requestHisCurveFile(__p_date, __p_fileName, __p_pos, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_requestHisCurveFile(const ::std::string& __p_date, const ::std::string& __p_fileName, ::Ice::Long __p_pos, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_requestHisCurveFile(__p_date, __p_fileName, __p_pos, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_requestHisCurveFile(const ::std::string& __p_date, const ::std::string& __p_fileName, ::Ice::Long __p_pos, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_requestHisCurveFile(__p_date, __p_fileName, __p_pos, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_requestHisCurveFile(const ::std::string& __p_date, const ::std::string& __p_fileName, ::Ice::Long __p_pos, const ::TransferFileSpace::Callback_TransferFile_requestHisCurveFilePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_requestHisCurveFile(__p_date, __p_fileName, __p_pos, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_requestHisCurveFile(const ::std::string& __p_date, const ::std::string& __p_fileName, ::Ice::Long __p_pos, const ::Ice::Context& __ctx, const ::TransferFileSpace::Callback_TransferFile_requestHisCurveFilePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_requestHisCurveFile(__p_date, __p_fileName, __p_pos, &__ctx, __del, __cookie);
    }

    ::TransferFileSpace::FileContent end_requestHisCurveFile(const ::Ice::AsyncResultPtr&);
    
private:

    ::TransferFileSpace::FileContent requestHisCurveFile(const ::std::string&, const ::std::string&, ::Ice::Long, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_requestHisCurveFile(const ::std::string&, const ::std::string&, ::Ice::Long, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool requestWarningFileList(const ::std::string& __p_sDate, const ::std::string& __p_eDate, ::TransferFileSpace::FileDirSeq& __p_fileList)
    {
        return requestWarningFileList(__p_sDate, __p_eDate, __p_fileList, 0);
    }
    bool requestWarningFileList(const ::std::string& __p_sDate, const ::std::string& __p_eDate, ::TransferFileSpace::FileDirSeq& __p_fileList, const ::Ice::Context& __ctx)
    {
        return requestWarningFileList(__p_sDate, __p_eDate, __p_fileList, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_requestWarningFileList(const ::std::string& __p_sDate, const ::std::string& __p_eDate, const ::IceInternal::Function<void (bool, const ::TransferFileSpace::FileDirSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_requestWarningFileList(__p_sDate, __p_eDate, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_requestWarningFileList(const ::std::string& __p_sDate, const ::std::string& __p_eDate, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_requestWarningFileList(__p_sDate, __p_eDate, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_requestWarningFileList(const ::std::string& __p_sDate, const ::std::string& __p_eDate, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool, const ::TransferFileSpace::FileDirSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_requestWarningFileList(__p_sDate, __p_eDate, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_requestWarningFileList(const ::std::string& __p_sDate, const ::std::string& __p_eDate, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_requestWarningFileList(__p_sDate, __p_eDate, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_requestWarningFileList(const ::std::string& __p_sDate, const ::std::string& __p_eDate, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool, const ::TransferFileSpace::FileDirSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_requestWarningFileList(const ::std::string& __p_sDate, const ::std::string& __p_eDate)
    {
        return begin_requestWarningFileList(__p_sDate, __p_eDate, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_requestWarningFileList(const ::std::string& __p_sDate, const ::std::string& __p_eDate, const ::Ice::Context& __ctx)
    {
        return begin_requestWarningFileList(__p_sDate, __p_eDate, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_requestWarningFileList(const ::std::string& __p_sDate, const ::std::string& __p_eDate, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_requestWarningFileList(__p_sDate, __p_eDate, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_requestWarningFileList(const ::std::string& __p_sDate, const ::std::string& __p_eDate, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_requestWarningFileList(__p_sDate, __p_eDate, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_requestWarningFileList(const ::std::string& __p_sDate, const ::std::string& __p_eDate, const ::TransferFileSpace::Callback_TransferFile_requestWarningFileListPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_requestWarningFileList(__p_sDate, __p_eDate, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_requestWarningFileList(const ::std::string& __p_sDate, const ::std::string& __p_eDate, const ::Ice::Context& __ctx, const ::TransferFileSpace::Callback_TransferFile_requestWarningFileListPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_requestWarningFileList(__p_sDate, __p_eDate, &__ctx, __del, __cookie);
    }

    bool end_requestWarningFileList(::TransferFileSpace::FileDirSeq& __p_fileList, const ::Ice::AsyncResultPtr&);
    
private:

    bool requestWarningFileList(const ::std::string&, const ::std::string&, ::TransferFileSpace::FileDirSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_requestWarningFileList(const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::TransferFileSpace::FileContent requestWarningFile(const ::std::string& __p_fileName, ::Ice::Long __p_pos)
    {
        return requestWarningFile(__p_fileName, __p_pos, 0);
    }
    ::TransferFileSpace::FileContent requestWarningFile(const ::std::string& __p_fileName, ::Ice::Long __p_pos, const ::Ice::Context& __ctx)
    {
        return requestWarningFile(__p_fileName, __p_pos, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_requestWarningFile(const ::std::string& __p_fileName, ::Ice::Long __p_pos, const ::IceInternal::Function<void (const ::TransferFileSpace::FileContent&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_requestWarningFile(__p_fileName, __p_pos, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_requestWarningFile(const ::std::string& __p_fileName, ::Ice::Long __p_pos, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_requestWarningFile(__p_fileName, __p_pos, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_requestWarningFile(const ::std::string& __p_fileName, ::Ice::Long __p_pos, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::TransferFileSpace::FileContent&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_requestWarningFile(__p_fileName, __p_pos, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_requestWarningFile(const ::std::string& __p_fileName, ::Ice::Long __p_pos, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_requestWarningFile(__p_fileName, __p_pos, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_requestWarningFile(const ::std::string& __p_fileName, ::Ice::Long __p_pos, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::TransferFileSpace::FileContent&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_requestWarningFile(const ::std::string& __p_fileName, ::Ice::Long __p_pos)
    {
        return begin_requestWarningFile(__p_fileName, __p_pos, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_requestWarningFile(const ::std::string& __p_fileName, ::Ice::Long __p_pos, const ::Ice::Context& __ctx)
    {
        return begin_requestWarningFile(__p_fileName, __p_pos, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_requestWarningFile(const ::std::string& __p_fileName, ::Ice::Long __p_pos, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_requestWarningFile(__p_fileName, __p_pos, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_requestWarningFile(const ::std::string& __p_fileName, ::Ice::Long __p_pos, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_requestWarningFile(__p_fileName, __p_pos, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_requestWarningFile(const ::std::string& __p_fileName, ::Ice::Long __p_pos, const ::TransferFileSpace::Callback_TransferFile_requestWarningFilePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_requestWarningFile(__p_fileName, __p_pos, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_requestWarningFile(const ::std::string& __p_fileName, ::Ice::Long __p_pos, const ::Ice::Context& __ctx, const ::TransferFileSpace::Callback_TransferFile_requestWarningFilePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_requestWarningFile(__p_fileName, __p_pos, &__ctx, __del, __cookie);
    }

    ::TransferFileSpace::FileContent end_requestWarningFile(const ::Ice::AsyncResultPtr&);
    
private:

    ::TransferFileSpace::FileContent requestWarningFile(const ::std::string&, ::Ice::Long, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_requestWarningFile(const ::std::string&, ::Ice::Long, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool requestReportFileList(const ::std::string& __p_folder, const ::std::string& __p_sDate, const ::std::string& __p_eDate, ::TransferFileSpace::FileDirSeq& __p_fileList)
    {
        return requestReportFileList(__p_folder, __p_sDate, __p_eDate, __p_fileList, 0);
    }
    bool requestReportFileList(const ::std::string& __p_folder, const ::std::string& __p_sDate, const ::std::string& __p_eDate, ::TransferFileSpace::FileDirSeq& __p_fileList, const ::Ice::Context& __ctx)
    {
        return requestReportFileList(__p_folder, __p_sDate, __p_eDate, __p_fileList, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_requestReportFileList(const ::std::string& __p_folder, const ::std::string& __p_sDate, const ::std::string& __p_eDate, const ::IceInternal::Function<void (bool, const ::TransferFileSpace::FileDirSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_requestReportFileList(__p_folder, __p_sDate, __p_eDate, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_requestReportFileList(const ::std::string& __p_folder, const ::std::string& __p_sDate, const ::std::string& __p_eDate, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_requestReportFileList(__p_folder, __p_sDate, __p_eDate, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_requestReportFileList(const ::std::string& __p_folder, const ::std::string& __p_sDate, const ::std::string& __p_eDate, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool, const ::TransferFileSpace::FileDirSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_requestReportFileList(__p_folder, __p_sDate, __p_eDate, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_requestReportFileList(const ::std::string& __p_folder, const ::std::string& __p_sDate, const ::std::string& __p_eDate, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_requestReportFileList(__p_folder, __p_sDate, __p_eDate, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_requestReportFileList(const ::std::string& __p_folder, const ::std::string& __p_sDate, const ::std::string& __p_eDate, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool, const ::TransferFileSpace::FileDirSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_requestReportFileList(const ::std::string& __p_folder, const ::std::string& __p_sDate, const ::std::string& __p_eDate)
    {
        return begin_requestReportFileList(__p_folder, __p_sDate, __p_eDate, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_requestReportFileList(const ::std::string& __p_folder, const ::std::string& __p_sDate, const ::std::string& __p_eDate, const ::Ice::Context& __ctx)
    {
        return begin_requestReportFileList(__p_folder, __p_sDate, __p_eDate, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_requestReportFileList(const ::std::string& __p_folder, const ::std::string& __p_sDate, const ::std::string& __p_eDate, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_requestReportFileList(__p_folder, __p_sDate, __p_eDate, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_requestReportFileList(const ::std::string& __p_folder, const ::std::string& __p_sDate, const ::std::string& __p_eDate, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_requestReportFileList(__p_folder, __p_sDate, __p_eDate, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_requestReportFileList(const ::std::string& __p_folder, const ::std::string& __p_sDate, const ::std::string& __p_eDate, const ::TransferFileSpace::Callback_TransferFile_requestReportFileListPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_requestReportFileList(__p_folder, __p_sDate, __p_eDate, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_requestReportFileList(const ::std::string& __p_folder, const ::std::string& __p_sDate, const ::std::string& __p_eDate, const ::Ice::Context& __ctx, const ::TransferFileSpace::Callback_TransferFile_requestReportFileListPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_requestReportFileList(__p_folder, __p_sDate, __p_eDate, &__ctx, __del, __cookie);
    }

    bool end_requestReportFileList(::TransferFileSpace::FileDirSeq& __p_fileList, const ::Ice::AsyncResultPtr&);
    
private:

    bool requestReportFileList(const ::std::string&, const ::std::string&, const ::std::string&, ::TransferFileSpace::FileDirSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_requestReportFileList(const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::TransferFileSpace::FileContent requestReportFile(const ::std::string& __p_folder, const ::std::string& __p_fileName, ::Ice::Long __p_pos)
    {
        return requestReportFile(__p_folder, __p_fileName, __p_pos, 0);
    }
    ::TransferFileSpace::FileContent requestReportFile(const ::std::string& __p_folder, const ::std::string& __p_fileName, ::Ice::Long __p_pos, const ::Ice::Context& __ctx)
    {
        return requestReportFile(__p_folder, __p_fileName, __p_pos, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_requestReportFile(const ::std::string& __p_folder, const ::std::string& __p_fileName, ::Ice::Long __p_pos, const ::IceInternal::Function<void (const ::TransferFileSpace::FileContent&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_requestReportFile(__p_folder, __p_fileName, __p_pos, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_requestReportFile(const ::std::string& __p_folder, const ::std::string& __p_fileName, ::Ice::Long __p_pos, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_requestReportFile(__p_folder, __p_fileName, __p_pos, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_requestReportFile(const ::std::string& __p_folder, const ::std::string& __p_fileName, ::Ice::Long __p_pos, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::TransferFileSpace::FileContent&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_requestReportFile(__p_folder, __p_fileName, __p_pos, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_requestReportFile(const ::std::string& __p_folder, const ::std::string& __p_fileName, ::Ice::Long __p_pos, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_requestReportFile(__p_folder, __p_fileName, __p_pos, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_requestReportFile(const ::std::string& __p_folder, const ::std::string& __p_fileName, ::Ice::Long __p_pos, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::TransferFileSpace::FileContent&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_requestReportFile(const ::std::string& __p_folder, const ::std::string& __p_fileName, ::Ice::Long __p_pos)
    {
        return begin_requestReportFile(__p_folder, __p_fileName, __p_pos, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_requestReportFile(const ::std::string& __p_folder, const ::std::string& __p_fileName, ::Ice::Long __p_pos, const ::Ice::Context& __ctx)
    {
        return begin_requestReportFile(__p_folder, __p_fileName, __p_pos, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_requestReportFile(const ::std::string& __p_folder, const ::std::string& __p_fileName, ::Ice::Long __p_pos, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_requestReportFile(__p_folder, __p_fileName, __p_pos, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_requestReportFile(const ::std::string& __p_folder, const ::std::string& __p_fileName, ::Ice::Long __p_pos, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_requestReportFile(__p_folder, __p_fileName, __p_pos, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_requestReportFile(const ::std::string& __p_folder, const ::std::string& __p_fileName, ::Ice::Long __p_pos, const ::TransferFileSpace::Callback_TransferFile_requestReportFilePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_requestReportFile(__p_folder, __p_fileName, __p_pos, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_requestReportFile(const ::std::string& __p_folder, const ::std::string& __p_fileName, ::Ice::Long __p_pos, const ::Ice::Context& __ctx, const ::TransferFileSpace::Callback_TransferFile_requestReportFilePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_requestReportFile(__p_folder, __p_fileName, __p_pos, &__ctx, __del, __cookie);
    }

    ::TransferFileSpace::FileContent end_requestReportFile(const ::Ice::AsyncResultPtr&);
    
private:

    ::TransferFileSpace::FileContent requestReportFile(const ::std::string&, const ::std::string&, ::Ice::Long, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_requestReportFile(const ::std::string&, const ::std::string&, ::Ice::Long, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void sendFileBinary(const ::std::string& __p_filePath, const ::TransferFileSpace::Bytes& __p_datas, bool __p_isFirst)
    {
        sendFileBinary(__p_filePath, __p_datas, __p_isFirst, 0);
    }
    void sendFileBinary(const ::std::string& __p_filePath, const ::TransferFileSpace::Bytes& __p_datas, bool __p_isFirst, const ::Ice::Context& __ctx)
    {
        sendFileBinary(__p_filePath, __p_datas, __p_isFirst, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_sendFileBinary(const ::std::string& __p_filePath, const ::TransferFileSpace::Bytes& __p_datas, bool __p_isFirst, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_sendFileBinary(__p_filePath, __p_datas, __p_isFirst, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_sendFileBinary(const ::std::string& __p_filePath, const ::TransferFileSpace::Bytes& __p_datas, bool __p_isFirst, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_sendFileBinary(__p_filePath, __p_datas, __p_isFirst, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_sendFileBinary(const ::std::string& __p_filePath, const ::TransferFileSpace::Bytes& __p_datas, bool __p_isFirst, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_sendFileBinary(__p_filePath, __p_datas, __p_isFirst, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_sendFileBinary(const ::std::string& __p_filePath, const ::TransferFileSpace::Bytes& __p_datas, bool __p_isFirst, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_sendFileBinary(__p_filePath, __p_datas, __p_isFirst, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_sendFileBinary(const ::std::string& __p_filePath, const ::TransferFileSpace::Bytes& __p_datas, bool __p_isFirst)
    {
        return begin_sendFileBinary(__p_filePath, __p_datas, __p_isFirst, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sendFileBinary(const ::std::string& __p_filePath, const ::TransferFileSpace::Bytes& __p_datas, bool __p_isFirst, const ::Ice::Context& __ctx)
    {
        return begin_sendFileBinary(__p_filePath, __p_datas, __p_isFirst, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sendFileBinary(const ::std::string& __p_filePath, const ::TransferFileSpace::Bytes& __p_datas, bool __p_isFirst, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendFileBinary(__p_filePath, __p_datas, __p_isFirst, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sendFileBinary(const ::std::string& __p_filePath, const ::TransferFileSpace::Bytes& __p_datas, bool __p_isFirst, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendFileBinary(__p_filePath, __p_datas, __p_isFirst, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sendFileBinary(const ::std::string& __p_filePath, const ::TransferFileSpace::Bytes& __p_datas, bool __p_isFirst, const ::TransferFileSpace::Callback_TransferFile_sendFileBinaryPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendFileBinary(__p_filePath, __p_datas, __p_isFirst, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sendFileBinary(const ::std::string& __p_filePath, const ::TransferFileSpace::Bytes& __p_datas, bool __p_isFirst, const ::Ice::Context& __ctx, const ::TransferFileSpace::Callback_TransferFile_sendFileBinaryPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendFileBinary(__p_filePath, __p_datas, __p_isFirst, &__ctx, __del, __cookie);
    }

    void end_sendFileBinary(const ::Ice::AsyncResultPtr&);
    
private:

    void sendFileBinary(const ::std::string&, const ::TransferFileSpace::Bytes&, bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_sendFileBinary(const ::std::string&, const ::TransferFileSpace::Bytes&, bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void sendRdbLoggerBinary(const ::std::string& __p_title, const ::TransferFileSpace::Bytes& __p_datas, bool __p_isFirst)
    {
        sendRdbLoggerBinary(__p_title, __p_datas, __p_isFirst, 0);
    }
    void sendRdbLoggerBinary(const ::std::string& __p_title, const ::TransferFileSpace::Bytes& __p_datas, bool __p_isFirst, const ::Ice::Context& __ctx)
    {
        sendRdbLoggerBinary(__p_title, __p_datas, __p_isFirst, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_sendRdbLoggerBinary(const ::std::string& __p_title, const ::TransferFileSpace::Bytes& __p_datas, bool __p_isFirst, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_sendRdbLoggerBinary(__p_title, __p_datas, __p_isFirst, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_sendRdbLoggerBinary(const ::std::string& __p_title, const ::TransferFileSpace::Bytes& __p_datas, bool __p_isFirst, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_sendRdbLoggerBinary(__p_title, __p_datas, __p_isFirst, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_sendRdbLoggerBinary(const ::std::string& __p_title, const ::TransferFileSpace::Bytes& __p_datas, bool __p_isFirst, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_sendRdbLoggerBinary(__p_title, __p_datas, __p_isFirst, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_sendRdbLoggerBinary(const ::std::string& __p_title, const ::TransferFileSpace::Bytes& __p_datas, bool __p_isFirst, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_sendRdbLoggerBinary(__p_title, __p_datas, __p_isFirst, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_sendRdbLoggerBinary(const ::std::string& __p_title, const ::TransferFileSpace::Bytes& __p_datas, bool __p_isFirst)
    {
        return begin_sendRdbLoggerBinary(__p_title, __p_datas, __p_isFirst, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sendRdbLoggerBinary(const ::std::string& __p_title, const ::TransferFileSpace::Bytes& __p_datas, bool __p_isFirst, const ::Ice::Context& __ctx)
    {
        return begin_sendRdbLoggerBinary(__p_title, __p_datas, __p_isFirst, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sendRdbLoggerBinary(const ::std::string& __p_title, const ::TransferFileSpace::Bytes& __p_datas, bool __p_isFirst, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendRdbLoggerBinary(__p_title, __p_datas, __p_isFirst, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sendRdbLoggerBinary(const ::std::string& __p_title, const ::TransferFileSpace::Bytes& __p_datas, bool __p_isFirst, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendRdbLoggerBinary(__p_title, __p_datas, __p_isFirst, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sendRdbLoggerBinary(const ::std::string& __p_title, const ::TransferFileSpace::Bytes& __p_datas, bool __p_isFirst, const ::TransferFileSpace::Callback_TransferFile_sendRdbLoggerBinaryPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendRdbLoggerBinary(__p_title, __p_datas, __p_isFirst, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sendRdbLoggerBinary(const ::std::string& __p_title, const ::TransferFileSpace::Bytes& __p_datas, bool __p_isFirst, const ::Ice::Context& __ctx, const ::TransferFileSpace::Callback_TransferFile_sendRdbLoggerBinaryPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendRdbLoggerBinary(__p_title, __p_datas, __p_isFirst, &__ctx, __del, __cookie);
    }

    void end_sendRdbLoggerBinary(const ::Ice::AsyncResultPtr&);
    
private:

    void sendRdbLoggerBinary(const ::std::string&, const ::TransferFileSpace::Bytes&, bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_sendRdbLoggerBinary(const ::std::string&, const ::TransferFileSpace::Bytes&, bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void sendRdbLoggerFinished(const ::std::string& __p_title)
    {
        sendRdbLoggerFinished(__p_title, 0);
    }
    void sendRdbLoggerFinished(const ::std::string& __p_title, const ::Ice::Context& __ctx)
    {
        sendRdbLoggerFinished(__p_title, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_sendRdbLoggerFinished(const ::std::string& __p_title, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_sendRdbLoggerFinished(__p_title, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_sendRdbLoggerFinished(const ::std::string& __p_title, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_sendRdbLoggerFinished(__p_title, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_sendRdbLoggerFinished(const ::std::string& __p_title, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_sendRdbLoggerFinished(__p_title, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_sendRdbLoggerFinished(const ::std::string& __p_title, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_sendRdbLoggerFinished(__p_title, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_sendRdbLoggerFinished(const ::std::string& __p_title)
    {
        return begin_sendRdbLoggerFinished(__p_title, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sendRdbLoggerFinished(const ::std::string& __p_title, const ::Ice::Context& __ctx)
    {
        return begin_sendRdbLoggerFinished(__p_title, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sendRdbLoggerFinished(const ::std::string& __p_title, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendRdbLoggerFinished(__p_title, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sendRdbLoggerFinished(const ::std::string& __p_title, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendRdbLoggerFinished(__p_title, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sendRdbLoggerFinished(const ::std::string& __p_title, const ::TransferFileSpace::Callback_TransferFile_sendRdbLoggerFinishedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendRdbLoggerFinished(__p_title, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sendRdbLoggerFinished(const ::std::string& __p_title, const ::Ice::Context& __ctx, const ::TransferFileSpace::Callback_TransferFile_sendRdbLoggerFinishedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendRdbLoggerFinished(__p_title, &__ctx, __del, __cookie);
    }

    void end_sendRdbLoggerFinished(const ::Ice::AsyncResultPtr&);
    
private:

    void sendRdbLoggerFinished(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_sendRdbLoggerFinished(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void syncRdbFinished()
    {
        syncRdbFinished(0);
    }
    void syncRdbFinished(const ::Ice::Context& __ctx)
    {
        syncRdbFinished(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_syncRdbFinished(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_syncRdbFinished(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_syncRdbFinished(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_syncRdbFinished(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_syncRdbFinished(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_syncRdbFinished(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_syncRdbFinished(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_syncRdbFinished(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_syncRdbFinished()
    {
        return begin_syncRdbFinished(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_syncRdbFinished(const ::Ice::Context& __ctx)
    {
        return begin_syncRdbFinished(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_syncRdbFinished(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_syncRdbFinished(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_syncRdbFinished(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_syncRdbFinished(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_syncRdbFinished(const ::TransferFileSpace::Callback_TransferFile_syncRdbFinishedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_syncRdbFinished(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_syncRdbFinished(const ::Ice::Context& __ctx, const ::TransferFileSpace::Callback_TransferFile_syncRdbFinishedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_syncRdbFinished(&__ctx, __del, __cookie);
    }

    void end_syncRdbFinished(const ::Ice::AsyncResultPtr&);
    
private:

    void syncRdbFinished(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_syncRdbFinished(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<TransferFile> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<TransferFile*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<TransferFile> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<TransferFile*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<TransferFile> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<TransferFile*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<TransferFile> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<TransferFile*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<TransferFile> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<TransferFile*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<TransferFile> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<TransferFile*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<TransferFile> ice_secure(bool __secure) const
    {
        return dynamic_cast<TransferFile*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<TransferFile> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<TransferFile*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<TransferFile> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<TransferFile*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<TransferFile> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<TransferFile*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<TransferFile> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<TransferFile*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<TransferFile> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<TransferFile*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<TransferFile> ice_twoway() const
    {
        return dynamic_cast<TransferFile*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<TransferFile> ice_oneway() const
    {
        return dynamic_cast<TransferFile*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<TransferFile> ice_batchOneway() const
    {
        return dynamic_cast<TransferFile*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<TransferFile> ice_datagram() const
    {
        return dynamic_cast<TransferFile*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<TransferFile> ice_batchDatagram() const
    {
        return dynamic_cast<TransferFile*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<TransferFile> ice_compress(bool __compress) const
    {
        return dynamic_cast<TransferFile*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<TransferFile> ice_timeout(int __timeout) const
    {
        return dynamic_cast<TransferFile*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<TransferFile> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<TransferFile*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<TransferFile> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<TransferFile*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace TransferFileSpace
{

class TransferFile : virtual public ::Ice::Object
{
public:

    typedef TransferFilePrx ProxyType;
    typedef TransferFilePtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void notifyRealdbBackup(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___notifyRealdbBackup(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void finishRealdbBackup(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___finishRealdbBackup(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool requestRealdb(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___requestRealdb(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void requestTransactionLogger(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___requestTransactionLogger(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::TransferFileSpace::FileContent requestRealdbContent(const ::std::string&, ::Ice::Long, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___requestRealdbContent(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool requestHisCurveFileList(const ::std::string&, const ::std::string&, ::TransferFileSpace::FileDirSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___requestHisCurveFileList(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::TransferFileSpace::FileContent requestHisCurveFile(const ::std::string&, const ::std::string&, ::Ice::Long, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___requestHisCurveFile(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool requestWarningFileList(const ::std::string&, const ::std::string&, ::TransferFileSpace::FileDirSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___requestWarningFileList(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::TransferFileSpace::FileContent requestWarningFile(const ::std::string&, ::Ice::Long, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___requestWarningFile(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool requestReportFileList(const ::std::string&, const ::std::string&, const ::std::string&, ::TransferFileSpace::FileDirSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___requestReportFileList(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::TransferFileSpace::FileContent requestReportFile(const ::std::string&, const ::std::string&, ::Ice::Long, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___requestReportFile(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void sendFileBinary(const ::std::string&, const ::TransferFileSpace::Bytes&, bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___sendFileBinary(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void sendRdbLoggerBinary(const ::std::string&, const ::TransferFileSpace::Bytes&, bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___sendRdbLoggerBinary(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void sendRdbLoggerFinished(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___sendRdbLoggerFinished(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void syncRdbFinished(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___syncRdbFinished(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
};

inline bool operator==(const TransferFile& l, const TransferFile& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const TransferFile& l, const TransferFile& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace TransferFileSpace
{

template<class T>
class CallbackNC_TransferFile_notifyRealdbBackup : public Callback_TransferFile_notifyRealdbBackup_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_TransferFile_notifyRealdbBackup(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_TransferFile_notifyRealdbBackupPtr
newCallback_TransferFile_notifyRealdbBackup(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TransferFile_notifyRealdbBackup<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TransferFile_notifyRealdbBackupPtr
newCallback_TransferFile_notifyRealdbBackup(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TransferFile_notifyRealdbBackup<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_TransferFile_notifyRealdbBackupPtr
newCallback_TransferFile_notifyRealdbBackup(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TransferFile_notifyRealdbBackup<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TransferFile_notifyRealdbBackupPtr
newCallback_TransferFile_notifyRealdbBackup(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TransferFile_notifyRealdbBackup<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_TransferFile_notifyRealdbBackup : public Callback_TransferFile_notifyRealdbBackup_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_TransferFile_notifyRealdbBackup(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_TransferFile_notifyRealdbBackupPtr
newCallback_TransferFile_notifyRealdbBackup(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TransferFile_notifyRealdbBackup<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TransferFile_notifyRealdbBackupPtr
newCallback_TransferFile_notifyRealdbBackup(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TransferFile_notifyRealdbBackup<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_TransferFile_notifyRealdbBackupPtr
newCallback_TransferFile_notifyRealdbBackup(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TransferFile_notifyRealdbBackup<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TransferFile_notifyRealdbBackupPtr
newCallback_TransferFile_notifyRealdbBackup(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TransferFile_notifyRealdbBackup<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_TransferFile_finishRealdbBackup : public Callback_TransferFile_finishRealdbBackup_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_TransferFile_finishRealdbBackup(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_TransferFile_finishRealdbBackupPtr
newCallback_TransferFile_finishRealdbBackup(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TransferFile_finishRealdbBackup<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TransferFile_finishRealdbBackupPtr
newCallback_TransferFile_finishRealdbBackup(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TransferFile_finishRealdbBackup<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_TransferFile_finishRealdbBackupPtr
newCallback_TransferFile_finishRealdbBackup(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TransferFile_finishRealdbBackup<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TransferFile_finishRealdbBackupPtr
newCallback_TransferFile_finishRealdbBackup(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TransferFile_finishRealdbBackup<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_TransferFile_finishRealdbBackup : public Callback_TransferFile_finishRealdbBackup_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_TransferFile_finishRealdbBackup(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_TransferFile_finishRealdbBackupPtr
newCallback_TransferFile_finishRealdbBackup(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TransferFile_finishRealdbBackup<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TransferFile_finishRealdbBackupPtr
newCallback_TransferFile_finishRealdbBackup(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TransferFile_finishRealdbBackup<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_TransferFile_finishRealdbBackupPtr
newCallback_TransferFile_finishRealdbBackup(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TransferFile_finishRealdbBackup<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TransferFile_finishRealdbBackupPtr
newCallback_TransferFile_finishRealdbBackup(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TransferFile_finishRealdbBackup<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_TransferFile_requestRealdb : public Callback_TransferFile_requestRealdb_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_TransferFile_requestRealdb(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::TransferFileSpace::TransferFilePrx __proxy = ::TransferFileSpace::TransferFilePrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_requestRealdb(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_TransferFile_requestRealdbPtr
newCallback_TransferFile_requestRealdb(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TransferFile_requestRealdb<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TransferFile_requestRealdbPtr
newCallback_TransferFile_requestRealdb(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TransferFile_requestRealdb<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_TransferFile_requestRealdb : public Callback_TransferFile_requestRealdb_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_TransferFile_requestRealdb(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::TransferFileSpace::TransferFilePrx __proxy = ::TransferFileSpace::TransferFilePrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_requestRealdb(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_TransferFile_requestRealdbPtr
newCallback_TransferFile_requestRealdb(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TransferFile_requestRealdb<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TransferFile_requestRealdbPtr
newCallback_TransferFile_requestRealdb(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TransferFile_requestRealdb<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_TransferFile_requestTransactionLogger : public Callback_TransferFile_requestTransactionLogger_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_TransferFile_requestTransactionLogger(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_TransferFile_requestTransactionLoggerPtr
newCallback_TransferFile_requestTransactionLogger(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TransferFile_requestTransactionLogger<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TransferFile_requestTransactionLoggerPtr
newCallback_TransferFile_requestTransactionLogger(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TransferFile_requestTransactionLogger<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_TransferFile_requestTransactionLoggerPtr
newCallback_TransferFile_requestTransactionLogger(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TransferFile_requestTransactionLogger<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TransferFile_requestTransactionLoggerPtr
newCallback_TransferFile_requestTransactionLogger(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TransferFile_requestTransactionLogger<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_TransferFile_requestTransactionLogger : public Callback_TransferFile_requestTransactionLogger_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_TransferFile_requestTransactionLogger(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_TransferFile_requestTransactionLoggerPtr
newCallback_TransferFile_requestTransactionLogger(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TransferFile_requestTransactionLogger<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TransferFile_requestTransactionLoggerPtr
newCallback_TransferFile_requestTransactionLogger(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TransferFile_requestTransactionLogger<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_TransferFile_requestTransactionLoggerPtr
newCallback_TransferFile_requestTransactionLogger(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TransferFile_requestTransactionLogger<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TransferFile_requestTransactionLoggerPtr
newCallback_TransferFile_requestTransactionLogger(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TransferFile_requestTransactionLogger<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_TransferFile_requestRealdbContent : public Callback_TransferFile_requestRealdbContent_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::TransferFileSpace::FileContent&);

    CallbackNC_TransferFile_requestRealdbContent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::TransferFileSpace::TransferFilePrx __proxy = ::TransferFileSpace::TransferFilePrx::uncheckedCast(__result->getProxy());
        ::TransferFileSpace::FileContent __ret;
        try
        {
            __ret = __proxy->end_requestRealdbContent(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_TransferFile_requestRealdbContentPtr
newCallback_TransferFile_requestRealdbContent(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::TransferFileSpace::FileContent&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TransferFile_requestRealdbContent<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TransferFile_requestRealdbContentPtr
newCallback_TransferFile_requestRealdbContent(T* instance, void (T::*cb)(const ::TransferFileSpace::FileContent&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TransferFile_requestRealdbContent<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_TransferFile_requestRealdbContent : public Callback_TransferFile_requestRealdbContent_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::TransferFileSpace::FileContent&, const CT&);

    Callback_TransferFile_requestRealdbContent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::TransferFileSpace::TransferFilePrx __proxy = ::TransferFileSpace::TransferFilePrx::uncheckedCast(__result->getProxy());
        ::TransferFileSpace::FileContent __ret;
        try
        {
            __ret = __proxy->end_requestRealdbContent(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_TransferFile_requestRealdbContentPtr
newCallback_TransferFile_requestRealdbContent(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::TransferFileSpace::FileContent&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TransferFile_requestRealdbContent<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TransferFile_requestRealdbContentPtr
newCallback_TransferFile_requestRealdbContent(T* instance, void (T::*cb)(const ::TransferFileSpace::FileContent&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TransferFile_requestRealdbContent<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_TransferFile_requestHisCurveFileList : public Callback_TransferFile_requestHisCurveFileList_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool, const ::TransferFileSpace::FileDirSeq&);

    CallbackNC_TransferFile_requestHisCurveFileList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::TransferFileSpace::TransferFilePrx __proxy = ::TransferFileSpace::TransferFilePrx::uncheckedCast(__result->getProxy());
        ::TransferFileSpace::FileDirSeq fileList;
        bool __ret;
        try
        {
            __ret = __proxy->end_requestHisCurveFileList(fileList, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret, fileList);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_TransferFile_requestHisCurveFileListPtr
newCallback_TransferFile_requestHisCurveFileList(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const ::TransferFileSpace::FileDirSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TransferFile_requestHisCurveFileList<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TransferFile_requestHisCurveFileListPtr
newCallback_TransferFile_requestHisCurveFileList(T* instance, void (T::*cb)(bool, const ::TransferFileSpace::FileDirSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TransferFile_requestHisCurveFileList<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_TransferFile_requestHisCurveFileList : public Callback_TransferFile_requestHisCurveFileList_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const ::TransferFileSpace::FileDirSeq&, const CT&);

    Callback_TransferFile_requestHisCurveFileList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::TransferFileSpace::TransferFilePrx __proxy = ::TransferFileSpace::TransferFilePrx::uncheckedCast(__result->getProxy());
        ::TransferFileSpace::FileDirSeq fileList;
        bool __ret;
        try
        {
            __ret = __proxy->end_requestHisCurveFileList(fileList, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, fileList, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_TransferFile_requestHisCurveFileListPtr
newCallback_TransferFile_requestHisCurveFileList(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const ::TransferFileSpace::FileDirSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TransferFile_requestHisCurveFileList<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TransferFile_requestHisCurveFileListPtr
newCallback_TransferFile_requestHisCurveFileList(T* instance, void (T::*cb)(bool, const ::TransferFileSpace::FileDirSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TransferFile_requestHisCurveFileList<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_TransferFile_requestHisCurveFile : public Callback_TransferFile_requestHisCurveFile_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::TransferFileSpace::FileContent&);

    CallbackNC_TransferFile_requestHisCurveFile(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::TransferFileSpace::TransferFilePrx __proxy = ::TransferFileSpace::TransferFilePrx::uncheckedCast(__result->getProxy());
        ::TransferFileSpace::FileContent __ret;
        try
        {
            __ret = __proxy->end_requestHisCurveFile(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_TransferFile_requestHisCurveFilePtr
newCallback_TransferFile_requestHisCurveFile(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::TransferFileSpace::FileContent&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TransferFile_requestHisCurveFile<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TransferFile_requestHisCurveFilePtr
newCallback_TransferFile_requestHisCurveFile(T* instance, void (T::*cb)(const ::TransferFileSpace::FileContent&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TransferFile_requestHisCurveFile<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_TransferFile_requestHisCurveFile : public Callback_TransferFile_requestHisCurveFile_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::TransferFileSpace::FileContent&, const CT&);

    Callback_TransferFile_requestHisCurveFile(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::TransferFileSpace::TransferFilePrx __proxy = ::TransferFileSpace::TransferFilePrx::uncheckedCast(__result->getProxy());
        ::TransferFileSpace::FileContent __ret;
        try
        {
            __ret = __proxy->end_requestHisCurveFile(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_TransferFile_requestHisCurveFilePtr
newCallback_TransferFile_requestHisCurveFile(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::TransferFileSpace::FileContent&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TransferFile_requestHisCurveFile<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TransferFile_requestHisCurveFilePtr
newCallback_TransferFile_requestHisCurveFile(T* instance, void (T::*cb)(const ::TransferFileSpace::FileContent&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TransferFile_requestHisCurveFile<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_TransferFile_requestWarningFileList : public Callback_TransferFile_requestWarningFileList_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool, const ::TransferFileSpace::FileDirSeq&);

    CallbackNC_TransferFile_requestWarningFileList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::TransferFileSpace::TransferFilePrx __proxy = ::TransferFileSpace::TransferFilePrx::uncheckedCast(__result->getProxy());
        ::TransferFileSpace::FileDirSeq fileList;
        bool __ret;
        try
        {
            __ret = __proxy->end_requestWarningFileList(fileList, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret, fileList);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_TransferFile_requestWarningFileListPtr
newCallback_TransferFile_requestWarningFileList(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const ::TransferFileSpace::FileDirSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TransferFile_requestWarningFileList<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TransferFile_requestWarningFileListPtr
newCallback_TransferFile_requestWarningFileList(T* instance, void (T::*cb)(bool, const ::TransferFileSpace::FileDirSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TransferFile_requestWarningFileList<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_TransferFile_requestWarningFileList : public Callback_TransferFile_requestWarningFileList_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const ::TransferFileSpace::FileDirSeq&, const CT&);

    Callback_TransferFile_requestWarningFileList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::TransferFileSpace::TransferFilePrx __proxy = ::TransferFileSpace::TransferFilePrx::uncheckedCast(__result->getProxy());
        ::TransferFileSpace::FileDirSeq fileList;
        bool __ret;
        try
        {
            __ret = __proxy->end_requestWarningFileList(fileList, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, fileList, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_TransferFile_requestWarningFileListPtr
newCallback_TransferFile_requestWarningFileList(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const ::TransferFileSpace::FileDirSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TransferFile_requestWarningFileList<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TransferFile_requestWarningFileListPtr
newCallback_TransferFile_requestWarningFileList(T* instance, void (T::*cb)(bool, const ::TransferFileSpace::FileDirSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TransferFile_requestWarningFileList<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_TransferFile_requestWarningFile : public Callback_TransferFile_requestWarningFile_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::TransferFileSpace::FileContent&);

    CallbackNC_TransferFile_requestWarningFile(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::TransferFileSpace::TransferFilePrx __proxy = ::TransferFileSpace::TransferFilePrx::uncheckedCast(__result->getProxy());
        ::TransferFileSpace::FileContent __ret;
        try
        {
            __ret = __proxy->end_requestWarningFile(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_TransferFile_requestWarningFilePtr
newCallback_TransferFile_requestWarningFile(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::TransferFileSpace::FileContent&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TransferFile_requestWarningFile<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TransferFile_requestWarningFilePtr
newCallback_TransferFile_requestWarningFile(T* instance, void (T::*cb)(const ::TransferFileSpace::FileContent&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TransferFile_requestWarningFile<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_TransferFile_requestWarningFile : public Callback_TransferFile_requestWarningFile_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::TransferFileSpace::FileContent&, const CT&);

    Callback_TransferFile_requestWarningFile(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::TransferFileSpace::TransferFilePrx __proxy = ::TransferFileSpace::TransferFilePrx::uncheckedCast(__result->getProxy());
        ::TransferFileSpace::FileContent __ret;
        try
        {
            __ret = __proxy->end_requestWarningFile(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_TransferFile_requestWarningFilePtr
newCallback_TransferFile_requestWarningFile(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::TransferFileSpace::FileContent&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TransferFile_requestWarningFile<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TransferFile_requestWarningFilePtr
newCallback_TransferFile_requestWarningFile(T* instance, void (T::*cb)(const ::TransferFileSpace::FileContent&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TransferFile_requestWarningFile<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_TransferFile_requestReportFileList : public Callback_TransferFile_requestReportFileList_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool, const ::TransferFileSpace::FileDirSeq&);

    CallbackNC_TransferFile_requestReportFileList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::TransferFileSpace::TransferFilePrx __proxy = ::TransferFileSpace::TransferFilePrx::uncheckedCast(__result->getProxy());
        ::TransferFileSpace::FileDirSeq fileList;
        bool __ret;
        try
        {
            __ret = __proxy->end_requestReportFileList(fileList, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret, fileList);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_TransferFile_requestReportFileListPtr
newCallback_TransferFile_requestReportFileList(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const ::TransferFileSpace::FileDirSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TransferFile_requestReportFileList<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TransferFile_requestReportFileListPtr
newCallback_TransferFile_requestReportFileList(T* instance, void (T::*cb)(bool, const ::TransferFileSpace::FileDirSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TransferFile_requestReportFileList<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_TransferFile_requestReportFileList : public Callback_TransferFile_requestReportFileList_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const ::TransferFileSpace::FileDirSeq&, const CT&);

    Callback_TransferFile_requestReportFileList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::TransferFileSpace::TransferFilePrx __proxy = ::TransferFileSpace::TransferFilePrx::uncheckedCast(__result->getProxy());
        ::TransferFileSpace::FileDirSeq fileList;
        bool __ret;
        try
        {
            __ret = __proxy->end_requestReportFileList(fileList, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, fileList, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_TransferFile_requestReportFileListPtr
newCallback_TransferFile_requestReportFileList(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const ::TransferFileSpace::FileDirSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TransferFile_requestReportFileList<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TransferFile_requestReportFileListPtr
newCallback_TransferFile_requestReportFileList(T* instance, void (T::*cb)(bool, const ::TransferFileSpace::FileDirSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TransferFile_requestReportFileList<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_TransferFile_requestReportFile : public Callback_TransferFile_requestReportFile_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::TransferFileSpace::FileContent&);

    CallbackNC_TransferFile_requestReportFile(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::TransferFileSpace::TransferFilePrx __proxy = ::TransferFileSpace::TransferFilePrx::uncheckedCast(__result->getProxy());
        ::TransferFileSpace::FileContent __ret;
        try
        {
            __ret = __proxy->end_requestReportFile(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_TransferFile_requestReportFilePtr
newCallback_TransferFile_requestReportFile(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::TransferFileSpace::FileContent&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TransferFile_requestReportFile<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TransferFile_requestReportFilePtr
newCallback_TransferFile_requestReportFile(T* instance, void (T::*cb)(const ::TransferFileSpace::FileContent&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TransferFile_requestReportFile<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_TransferFile_requestReportFile : public Callback_TransferFile_requestReportFile_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::TransferFileSpace::FileContent&, const CT&);

    Callback_TransferFile_requestReportFile(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::TransferFileSpace::TransferFilePrx __proxy = ::TransferFileSpace::TransferFilePrx::uncheckedCast(__result->getProxy());
        ::TransferFileSpace::FileContent __ret;
        try
        {
            __ret = __proxy->end_requestReportFile(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_TransferFile_requestReportFilePtr
newCallback_TransferFile_requestReportFile(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::TransferFileSpace::FileContent&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TransferFile_requestReportFile<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TransferFile_requestReportFilePtr
newCallback_TransferFile_requestReportFile(T* instance, void (T::*cb)(const ::TransferFileSpace::FileContent&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TransferFile_requestReportFile<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_TransferFile_sendFileBinary : public Callback_TransferFile_sendFileBinary_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_TransferFile_sendFileBinary(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_TransferFile_sendFileBinaryPtr
newCallback_TransferFile_sendFileBinary(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TransferFile_sendFileBinary<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TransferFile_sendFileBinaryPtr
newCallback_TransferFile_sendFileBinary(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TransferFile_sendFileBinary<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_TransferFile_sendFileBinaryPtr
newCallback_TransferFile_sendFileBinary(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TransferFile_sendFileBinary<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TransferFile_sendFileBinaryPtr
newCallback_TransferFile_sendFileBinary(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TransferFile_sendFileBinary<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_TransferFile_sendFileBinary : public Callback_TransferFile_sendFileBinary_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_TransferFile_sendFileBinary(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_TransferFile_sendFileBinaryPtr
newCallback_TransferFile_sendFileBinary(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TransferFile_sendFileBinary<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TransferFile_sendFileBinaryPtr
newCallback_TransferFile_sendFileBinary(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TransferFile_sendFileBinary<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_TransferFile_sendFileBinaryPtr
newCallback_TransferFile_sendFileBinary(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TransferFile_sendFileBinary<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TransferFile_sendFileBinaryPtr
newCallback_TransferFile_sendFileBinary(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TransferFile_sendFileBinary<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_TransferFile_sendRdbLoggerBinary : public Callback_TransferFile_sendRdbLoggerBinary_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_TransferFile_sendRdbLoggerBinary(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_TransferFile_sendRdbLoggerBinaryPtr
newCallback_TransferFile_sendRdbLoggerBinary(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TransferFile_sendRdbLoggerBinary<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TransferFile_sendRdbLoggerBinaryPtr
newCallback_TransferFile_sendRdbLoggerBinary(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TransferFile_sendRdbLoggerBinary<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_TransferFile_sendRdbLoggerBinaryPtr
newCallback_TransferFile_sendRdbLoggerBinary(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TransferFile_sendRdbLoggerBinary<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TransferFile_sendRdbLoggerBinaryPtr
newCallback_TransferFile_sendRdbLoggerBinary(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TransferFile_sendRdbLoggerBinary<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_TransferFile_sendRdbLoggerBinary : public Callback_TransferFile_sendRdbLoggerBinary_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_TransferFile_sendRdbLoggerBinary(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_TransferFile_sendRdbLoggerBinaryPtr
newCallback_TransferFile_sendRdbLoggerBinary(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TransferFile_sendRdbLoggerBinary<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TransferFile_sendRdbLoggerBinaryPtr
newCallback_TransferFile_sendRdbLoggerBinary(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TransferFile_sendRdbLoggerBinary<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_TransferFile_sendRdbLoggerBinaryPtr
newCallback_TransferFile_sendRdbLoggerBinary(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TransferFile_sendRdbLoggerBinary<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TransferFile_sendRdbLoggerBinaryPtr
newCallback_TransferFile_sendRdbLoggerBinary(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TransferFile_sendRdbLoggerBinary<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_TransferFile_sendRdbLoggerFinished : public Callback_TransferFile_sendRdbLoggerFinished_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_TransferFile_sendRdbLoggerFinished(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_TransferFile_sendRdbLoggerFinishedPtr
newCallback_TransferFile_sendRdbLoggerFinished(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TransferFile_sendRdbLoggerFinished<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TransferFile_sendRdbLoggerFinishedPtr
newCallback_TransferFile_sendRdbLoggerFinished(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TransferFile_sendRdbLoggerFinished<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_TransferFile_sendRdbLoggerFinishedPtr
newCallback_TransferFile_sendRdbLoggerFinished(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TransferFile_sendRdbLoggerFinished<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TransferFile_sendRdbLoggerFinishedPtr
newCallback_TransferFile_sendRdbLoggerFinished(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TransferFile_sendRdbLoggerFinished<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_TransferFile_sendRdbLoggerFinished : public Callback_TransferFile_sendRdbLoggerFinished_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_TransferFile_sendRdbLoggerFinished(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_TransferFile_sendRdbLoggerFinishedPtr
newCallback_TransferFile_sendRdbLoggerFinished(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TransferFile_sendRdbLoggerFinished<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TransferFile_sendRdbLoggerFinishedPtr
newCallback_TransferFile_sendRdbLoggerFinished(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TransferFile_sendRdbLoggerFinished<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_TransferFile_sendRdbLoggerFinishedPtr
newCallback_TransferFile_sendRdbLoggerFinished(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TransferFile_sendRdbLoggerFinished<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TransferFile_sendRdbLoggerFinishedPtr
newCallback_TransferFile_sendRdbLoggerFinished(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TransferFile_sendRdbLoggerFinished<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_TransferFile_syncRdbFinished : public Callback_TransferFile_syncRdbFinished_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_TransferFile_syncRdbFinished(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_TransferFile_syncRdbFinishedPtr
newCallback_TransferFile_syncRdbFinished(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TransferFile_syncRdbFinished<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TransferFile_syncRdbFinishedPtr
newCallback_TransferFile_syncRdbFinished(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TransferFile_syncRdbFinished<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_TransferFile_syncRdbFinishedPtr
newCallback_TransferFile_syncRdbFinished(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TransferFile_syncRdbFinished<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TransferFile_syncRdbFinishedPtr
newCallback_TransferFile_syncRdbFinished(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TransferFile_syncRdbFinished<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_TransferFile_syncRdbFinished : public Callback_TransferFile_syncRdbFinished_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_TransferFile_syncRdbFinished(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_TransferFile_syncRdbFinishedPtr
newCallback_TransferFile_syncRdbFinished(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TransferFile_syncRdbFinished<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TransferFile_syncRdbFinishedPtr
newCallback_TransferFile_syncRdbFinished(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TransferFile_syncRdbFinished<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_TransferFile_syncRdbFinishedPtr
newCallback_TransferFile_syncRdbFinished(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TransferFile_syncRdbFinished<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TransferFile_syncRdbFinishedPtr
newCallback_TransferFile_syncRdbFinished(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TransferFile_syncRdbFinished<T, CT>(instance, 0, excb, sentcb);
}

}

#include <IceUtil/PopDisableWarnings.h>
#endif
