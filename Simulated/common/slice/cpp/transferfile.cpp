// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.4
//
// <auto-generated>
//
// Generated from file `transferfile.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <transferfile.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/BasicStream.h>
#include <IceUtil/Iterator.h>
#include <IceUtil/PopDisableWarnings.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 306
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 4
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

const ::std::string __TransferFileSpace__TransferFile__notifyRealdbBackup_name = "notifyRealdbBackup";

const ::std::string __TransferFileSpace__TransferFile__finishRealdbBackup_name = "finishRealdbBackup";

const ::std::string __TransferFileSpace__TransferFile__requestRealdb_name = "requestRealdb";

const ::std::string __TransferFileSpace__TransferFile__requestTransactionLogger_name = "requestTransactionLogger";

const ::std::string __TransferFileSpace__TransferFile__requestRealdbContent_name = "requestRealdbContent";

const ::std::string __TransferFileSpace__TransferFile__requestHisCurveFileList_name = "requestHisCurveFileList";

const ::std::string __TransferFileSpace__TransferFile__requestHisCurveFile_name = "requestHisCurveFile";

const ::std::string __TransferFileSpace__TransferFile__requestWarningFileList_name = "requestWarningFileList";

const ::std::string __TransferFileSpace__TransferFile__requestWarningFile_name = "requestWarningFile";

const ::std::string __TransferFileSpace__TransferFile__requestReportFileList_name = "requestReportFileList";

const ::std::string __TransferFileSpace__TransferFile__requestReportFile_name = "requestReportFile";

const ::std::string __TransferFileSpace__TransferFile__sendFileBinary_name = "sendFileBinary";

const ::std::string __TransferFileSpace__TransferFile__sendRdbLoggerBinary_name = "sendRdbLoggerBinary";

const ::std::string __TransferFileSpace__TransferFile__sendRdbLoggerFinished_name = "sendRdbLoggerFinished";

const ::std::string __TransferFileSpace__TransferFile__syncRdbFinished_name = "syncRdbFinished";

}

namespace Ice
{
}
::IceProxy::Ice::Object* ::IceProxy::TransferFileSpace::upCast(::IceProxy::TransferFileSpace::TransferFile* p) { return p; }

void
::IceProxy::TransferFileSpace::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::TransferFileSpace::TransferFile>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::TransferFileSpace::TransferFile;
        v->__copyFrom(proxy);
    }
}

void
IceProxy::TransferFileSpace::TransferFile::notifyRealdbBackup(const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __TransferFileSpace__TransferFile__notifyRealdbBackup_name, ::Ice::Normal, __ctx);
    __og.writeEmptyParams();
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::TransferFileSpace::TransferFile::begin_notifyRealdbBackup(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __TransferFileSpace__TransferFile__notifyRealdbBackup_name, __del, __cookie);
    try
    {
        __result->prepare(__TransferFileSpace__TransferFile__notifyRealdbBackup_name, ::Ice::Normal, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::TransferFileSpace::TransferFile::end_notifyRealdbBackup(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __TransferFileSpace__TransferFile__notifyRealdbBackup_name);
}

void
IceProxy::TransferFileSpace::TransferFile::finishRealdbBackup(const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __TransferFileSpace__TransferFile__finishRealdbBackup_name, ::Ice::Normal, __ctx);
    __og.writeEmptyParams();
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::TransferFileSpace::TransferFile::begin_finishRealdbBackup(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __TransferFileSpace__TransferFile__finishRealdbBackup_name, __del, __cookie);
    try
    {
        __result->prepare(__TransferFileSpace__TransferFile__finishRealdbBackup_name, ::Ice::Normal, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::TransferFileSpace::TransferFile::end_finishRealdbBackup(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __TransferFileSpace__TransferFile__finishRealdbBackup_name);
}

bool
IceProxy::TransferFileSpace::TransferFile::requestRealdb(const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__TransferFileSpace__TransferFile__requestRealdb_name);
    ::IceInternal::Outgoing __og(this, __TransferFileSpace__TransferFile__requestRealdb_name, ::Ice::Normal, __ctx);
    __og.writeEmptyParams();
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    bool __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::TransferFileSpace::TransferFile::begin_requestRealdb(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__TransferFileSpace__TransferFile__requestRealdb_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __TransferFileSpace__TransferFile__requestRealdb_name, __del, __cookie);
    try
    {
        __result->prepare(__TransferFileSpace__TransferFile__requestRealdb_name, ::Ice::Normal, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::TransferFileSpace::TransferFile::__begin_requestRealdb(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (bool)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::TransferFileSpace::TransferFilePrx __proxy = ::TransferFileSpace::TransferFilePrx::uncheckedCast(__result->getProxy());
            bool __ret;
            try
            {
                __ret = __proxy->end_requestRealdb(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (bool)> _response;
    };
    return begin_requestRealdb(__ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

bool
IceProxy::TransferFileSpace::TransferFile::end_requestRealdb(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __TransferFileSpace__TransferFile__requestRealdb_name);
    bool __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

void
IceProxy::TransferFileSpace::TransferFile::requestTransactionLogger(const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __TransferFileSpace__TransferFile__requestTransactionLogger_name, ::Ice::Normal, __ctx);
    __og.writeEmptyParams();
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::TransferFileSpace::TransferFile::begin_requestTransactionLogger(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __TransferFileSpace__TransferFile__requestTransactionLogger_name, __del, __cookie);
    try
    {
        __result->prepare(__TransferFileSpace__TransferFile__requestTransactionLogger_name, ::Ice::Normal, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::TransferFileSpace::TransferFile::end_requestTransactionLogger(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __TransferFileSpace__TransferFile__requestTransactionLogger_name);
}

::TransferFileSpace::FileContent
IceProxy::TransferFileSpace::TransferFile::requestRealdbContent(const ::std::string& __p_fileName, ::Ice::Long __p_pos, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__TransferFileSpace__TransferFile__requestRealdbContent_name);
    ::IceInternal::Outgoing __og(this, __TransferFileSpace__TransferFile__requestRealdbContent_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_fileName);
        __os->write(__p_pos);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::TransferFileSpace::FileContent __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::TransferFileSpace::TransferFile::begin_requestRealdbContent(const ::std::string& __p_fileName, ::Ice::Long __p_pos, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__TransferFileSpace__TransferFile__requestRealdbContent_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __TransferFileSpace__TransferFile__requestRealdbContent_name, __del, __cookie);
    try
    {
        __result->prepare(__TransferFileSpace__TransferFile__requestRealdbContent_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_fileName);
        __os->write(__p_pos);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::TransferFileSpace::TransferFile::__begin_requestRealdbContent(const ::std::string& __p_fileName, ::Ice::Long __p_pos, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::TransferFileSpace::FileContent&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::TransferFileSpace::FileContent&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::TransferFileSpace::TransferFilePrx __proxy = ::TransferFileSpace::TransferFilePrx::uncheckedCast(__result->getProxy());
            ::TransferFileSpace::FileContent __ret;
            try
            {
                __ret = __proxy->end_requestRealdbContent(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (const ::TransferFileSpace::FileContent&)> _response;
    };
    return begin_requestRealdbContent(__p_fileName, __p_pos, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::TransferFileSpace::FileContent
IceProxy::TransferFileSpace::TransferFile::end_requestRealdbContent(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __TransferFileSpace__TransferFile__requestRealdbContent_name);
    ::TransferFileSpace::FileContent __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

bool
IceProxy::TransferFileSpace::TransferFile::requestHisCurveFileList(const ::std::string& __p_sDate, const ::std::string& __p_eDate, ::TransferFileSpace::FileDirSeq& __p_fileList, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__TransferFileSpace__TransferFile__requestHisCurveFileList_name);
    ::IceInternal::Outgoing __og(this, __TransferFileSpace__TransferFile__requestHisCurveFileList_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_sDate);
        __os->write(__p_eDate);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    bool __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__p_fileList);
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::TransferFileSpace::TransferFile::begin_requestHisCurveFileList(const ::std::string& __p_sDate, const ::std::string& __p_eDate, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__TransferFileSpace__TransferFile__requestHisCurveFileList_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __TransferFileSpace__TransferFile__requestHisCurveFileList_name, __del, __cookie);
    try
    {
        __result->prepare(__TransferFileSpace__TransferFile__requestHisCurveFileList_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_sDate);
        __os->write(__p_eDate);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::TransferFileSpace::TransferFile::__begin_requestHisCurveFileList(const ::std::string& __p_sDate, const ::std::string& __p_eDate, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool, const ::TransferFileSpace::FileDirSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (bool, const ::TransferFileSpace::FileDirSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::TransferFileSpace::TransferFilePrx __proxy = ::TransferFileSpace::TransferFilePrx::uncheckedCast(__result->getProxy());
            ::TransferFileSpace::FileDirSeq __p_fileList;
            bool __ret;
            try
            {
                __ret = __proxy->end_requestHisCurveFileList(__p_fileList, __result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret, __p_fileList);
            }
        }
    
    private:
        
        ::std::function<void (bool, const ::TransferFileSpace::FileDirSeq&)> _response;
    };
    return begin_requestHisCurveFileList(__p_sDate, __p_eDate, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

bool
IceProxy::TransferFileSpace::TransferFile::end_requestHisCurveFileList(::TransferFileSpace::FileDirSeq& __p_fileList, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __TransferFileSpace__TransferFile__requestHisCurveFileList_name);
    bool __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__p_fileList);
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::TransferFileSpace::FileContent
IceProxy::TransferFileSpace::TransferFile::requestHisCurveFile(const ::std::string& __p_date, const ::std::string& __p_fileName, ::Ice::Long __p_pos, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__TransferFileSpace__TransferFile__requestHisCurveFile_name);
    ::IceInternal::Outgoing __og(this, __TransferFileSpace__TransferFile__requestHisCurveFile_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_date);
        __os->write(__p_fileName);
        __os->write(__p_pos);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::TransferFileSpace::FileContent __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::TransferFileSpace::TransferFile::begin_requestHisCurveFile(const ::std::string& __p_date, const ::std::string& __p_fileName, ::Ice::Long __p_pos, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__TransferFileSpace__TransferFile__requestHisCurveFile_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __TransferFileSpace__TransferFile__requestHisCurveFile_name, __del, __cookie);
    try
    {
        __result->prepare(__TransferFileSpace__TransferFile__requestHisCurveFile_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_date);
        __os->write(__p_fileName);
        __os->write(__p_pos);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::TransferFileSpace::TransferFile::__begin_requestHisCurveFile(const ::std::string& __p_date, const ::std::string& __p_fileName, ::Ice::Long __p_pos, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::TransferFileSpace::FileContent&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::TransferFileSpace::FileContent&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::TransferFileSpace::TransferFilePrx __proxy = ::TransferFileSpace::TransferFilePrx::uncheckedCast(__result->getProxy());
            ::TransferFileSpace::FileContent __ret;
            try
            {
                __ret = __proxy->end_requestHisCurveFile(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (const ::TransferFileSpace::FileContent&)> _response;
    };
    return begin_requestHisCurveFile(__p_date, __p_fileName, __p_pos, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::TransferFileSpace::FileContent
IceProxy::TransferFileSpace::TransferFile::end_requestHisCurveFile(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __TransferFileSpace__TransferFile__requestHisCurveFile_name);
    ::TransferFileSpace::FileContent __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

bool
IceProxy::TransferFileSpace::TransferFile::requestWarningFileList(const ::std::string& __p_sDate, const ::std::string& __p_eDate, ::TransferFileSpace::FileDirSeq& __p_fileList, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__TransferFileSpace__TransferFile__requestWarningFileList_name);
    ::IceInternal::Outgoing __og(this, __TransferFileSpace__TransferFile__requestWarningFileList_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_sDate);
        __os->write(__p_eDate);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    bool __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__p_fileList);
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::TransferFileSpace::TransferFile::begin_requestWarningFileList(const ::std::string& __p_sDate, const ::std::string& __p_eDate, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__TransferFileSpace__TransferFile__requestWarningFileList_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __TransferFileSpace__TransferFile__requestWarningFileList_name, __del, __cookie);
    try
    {
        __result->prepare(__TransferFileSpace__TransferFile__requestWarningFileList_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_sDate);
        __os->write(__p_eDate);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::TransferFileSpace::TransferFile::__begin_requestWarningFileList(const ::std::string& __p_sDate, const ::std::string& __p_eDate, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool, const ::TransferFileSpace::FileDirSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (bool, const ::TransferFileSpace::FileDirSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::TransferFileSpace::TransferFilePrx __proxy = ::TransferFileSpace::TransferFilePrx::uncheckedCast(__result->getProxy());
            ::TransferFileSpace::FileDirSeq __p_fileList;
            bool __ret;
            try
            {
                __ret = __proxy->end_requestWarningFileList(__p_fileList, __result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret, __p_fileList);
            }
        }
    
    private:
        
        ::std::function<void (bool, const ::TransferFileSpace::FileDirSeq&)> _response;
    };
    return begin_requestWarningFileList(__p_sDate, __p_eDate, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

bool
IceProxy::TransferFileSpace::TransferFile::end_requestWarningFileList(::TransferFileSpace::FileDirSeq& __p_fileList, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __TransferFileSpace__TransferFile__requestWarningFileList_name);
    bool __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__p_fileList);
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::TransferFileSpace::FileContent
IceProxy::TransferFileSpace::TransferFile::requestWarningFile(const ::std::string& __p_fileName, ::Ice::Long __p_pos, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__TransferFileSpace__TransferFile__requestWarningFile_name);
    ::IceInternal::Outgoing __og(this, __TransferFileSpace__TransferFile__requestWarningFile_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_fileName);
        __os->write(__p_pos);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::TransferFileSpace::FileContent __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::TransferFileSpace::TransferFile::begin_requestWarningFile(const ::std::string& __p_fileName, ::Ice::Long __p_pos, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__TransferFileSpace__TransferFile__requestWarningFile_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __TransferFileSpace__TransferFile__requestWarningFile_name, __del, __cookie);
    try
    {
        __result->prepare(__TransferFileSpace__TransferFile__requestWarningFile_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_fileName);
        __os->write(__p_pos);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::TransferFileSpace::TransferFile::__begin_requestWarningFile(const ::std::string& __p_fileName, ::Ice::Long __p_pos, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::TransferFileSpace::FileContent&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::TransferFileSpace::FileContent&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::TransferFileSpace::TransferFilePrx __proxy = ::TransferFileSpace::TransferFilePrx::uncheckedCast(__result->getProxy());
            ::TransferFileSpace::FileContent __ret;
            try
            {
                __ret = __proxy->end_requestWarningFile(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (const ::TransferFileSpace::FileContent&)> _response;
    };
    return begin_requestWarningFile(__p_fileName, __p_pos, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::TransferFileSpace::FileContent
IceProxy::TransferFileSpace::TransferFile::end_requestWarningFile(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __TransferFileSpace__TransferFile__requestWarningFile_name);
    ::TransferFileSpace::FileContent __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

bool
IceProxy::TransferFileSpace::TransferFile::requestReportFileList(const ::std::string& __p_folder, const ::std::string& __p_sDate, const ::std::string& __p_eDate, ::TransferFileSpace::FileDirSeq& __p_fileList, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__TransferFileSpace__TransferFile__requestReportFileList_name);
    ::IceInternal::Outgoing __og(this, __TransferFileSpace__TransferFile__requestReportFileList_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_folder);
        __os->write(__p_sDate);
        __os->write(__p_eDate);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    bool __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__p_fileList);
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::TransferFileSpace::TransferFile::begin_requestReportFileList(const ::std::string& __p_folder, const ::std::string& __p_sDate, const ::std::string& __p_eDate, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__TransferFileSpace__TransferFile__requestReportFileList_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __TransferFileSpace__TransferFile__requestReportFileList_name, __del, __cookie);
    try
    {
        __result->prepare(__TransferFileSpace__TransferFile__requestReportFileList_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_folder);
        __os->write(__p_sDate);
        __os->write(__p_eDate);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::TransferFileSpace::TransferFile::__begin_requestReportFileList(const ::std::string& __p_folder, const ::std::string& __p_sDate, const ::std::string& __p_eDate, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool, const ::TransferFileSpace::FileDirSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (bool, const ::TransferFileSpace::FileDirSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::TransferFileSpace::TransferFilePrx __proxy = ::TransferFileSpace::TransferFilePrx::uncheckedCast(__result->getProxy());
            ::TransferFileSpace::FileDirSeq __p_fileList;
            bool __ret;
            try
            {
                __ret = __proxy->end_requestReportFileList(__p_fileList, __result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret, __p_fileList);
            }
        }
    
    private:
        
        ::std::function<void (bool, const ::TransferFileSpace::FileDirSeq&)> _response;
    };
    return begin_requestReportFileList(__p_folder, __p_sDate, __p_eDate, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

bool
IceProxy::TransferFileSpace::TransferFile::end_requestReportFileList(::TransferFileSpace::FileDirSeq& __p_fileList, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __TransferFileSpace__TransferFile__requestReportFileList_name);
    bool __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__p_fileList);
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::TransferFileSpace::FileContent
IceProxy::TransferFileSpace::TransferFile::requestReportFile(const ::std::string& __p_folder, const ::std::string& __p_fileName, ::Ice::Long __p_pos, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__TransferFileSpace__TransferFile__requestReportFile_name);
    ::IceInternal::Outgoing __og(this, __TransferFileSpace__TransferFile__requestReportFile_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_folder);
        __os->write(__p_fileName);
        __os->write(__p_pos);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::TransferFileSpace::FileContent __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::TransferFileSpace::TransferFile::begin_requestReportFile(const ::std::string& __p_folder, const ::std::string& __p_fileName, ::Ice::Long __p_pos, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__TransferFileSpace__TransferFile__requestReportFile_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __TransferFileSpace__TransferFile__requestReportFile_name, __del, __cookie);
    try
    {
        __result->prepare(__TransferFileSpace__TransferFile__requestReportFile_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_folder);
        __os->write(__p_fileName);
        __os->write(__p_pos);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::TransferFileSpace::TransferFile::__begin_requestReportFile(const ::std::string& __p_folder, const ::std::string& __p_fileName, ::Ice::Long __p_pos, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::TransferFileSpace::FileContent&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::TransferFileSpace::FileContent&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::TransferFileSpace::TransferFilePrx __proxy = ::TransferFileSpace::TransferFilePrx::uncheckedCast(__result->getProxy());
            ::TransferFileSpace::FileContent __ret;
            try
            {
                __ret = __proxy->end_requestReportFile(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (const ::TransferFileSpace::FileContent&)> _response;
    };
    return begin_requestReportFile(__p_folder, __p_fileName, __p_pos, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::TransferFileSpace::FileContent
IceProxy::TransferFileSpace::TransferFile::end_requestReportFile(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __TransferFileSpace__TransferFile__requestReportFile_name);
    ::TransferFileSpace::FileContent __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

void
IceProxy::TransferFileSpace::TransferFile::sendFileBinary(const ::std::string& __p_filePath, const ::TransferFileSpace::Bytes& __p_datas, bool __p_isFirst, const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __TransferFileSpace__TransferFile__sendFileBinary_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_filePath);
        __os->write(__p_datas);
        __os->write(__p_isFirst);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::TransferFileSpace::TransferFile::begin_sendFileBinary(const ::std::string& __p_filePath, const ::TransferFileSpace::Bytes& __p_datas, bool __p_isFirst, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __TransferFileSpace__TransferFile__sendFileBinary_name, __del, __cookie);
    try
    {
        __result->prepare(__TransferFileSpace__TransferFile__sendFileBinary_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_filePath);
        __os->write(__p_datas);
        __os->write(__p_isFirst);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::TransferFileSpace::TransferFile::end_sendFileBinary(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __TransferFileSpace__TransferFile__sendFileBinary_name);
}

void
IceProxy::TransferFileSpace::TransferFile::sendRdbLoggerBinary(const ::std::string& __p_title, const ::TransferFileSpace::Bytes& __p_datas, bool __p_isFirst, const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __TransferFileSpace__TransferFile__sendRdbLoggerBinary_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_title);
        __os->write(__p_datas);
        __os->write(__p_isFirst);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::TransferFileSpace::TransferFile::begin_sendRdbLoggerBinary(const ::std::string& __p_title, const ::TransferFileSpace::Bytes& __p_datas, bool __p_isFirst, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __TransferFileSpace__TransferFile__sendRdbLoggerBinary_name, __del, __cookie);
    try
    {
        __result->prepare(__TransferFileSpace__TransferFile__sendRdbLoggerBinary_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_title);
        __os->write(__p_datas);
        __os->write(__p_isFirst);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::TransferFileSpace::TransferFile::end_sendRdbLoggerBinary(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __TransferFileSpace__TransferFile__sendRdbLoggerBinary_name);
}

void
IceProxy::TransferFileSpace::TransferFile::sendRdbLoggerFinished(const ::std::string& __p_title, const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __TransferFileSpace__TransferFile__sendRdbLoggerFinished_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_title);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::TransferFileSpace::TransferFile::begin_sendRdbLoggerFinished(const ::std::string& __p_title, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __TransferFileSpace__TransferFile__sendRdbLoggerFinished_name, __del, __cookie);
    try
    {
        __result->prepare(__TransferFileSpace__TransferFile__sendRdbLoggerFinished_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_title);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::TransferFileSpace::TransferFile::end_sendRdbLoggerFinished(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __TransferFileSpace__TransferFile__sendRdbLoggerFinished_name);
}

void
IceProxy::TransferFileSpace::TransferFile::syncRdbFinished(const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __TransferFileSpace__TransferFile__syncRdbFinished_name, ::Ice::Normal, __ctx);
    __og.writeEmptyParams();
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::TransferFileSpace::TransferFile::begin_syncRdbFinished(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __TransferFileSpace__TransferFile__syncRdbFinished_name, __del, __cookie);
    try
    {
        __result->prepare(__TransferFileSpace__TransferFile__syncRdbFinished_name, ::Ice::Normal, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::TransferFileSpace::TransferFile::end_syncRdbFinished(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __TransferFileSpace__TransferFile__syncRdbFinished_name);
}

const ::std::string&
IceProxy::TransferFileSpace::TransferFile::ice_staticId()
{
    return ::TransferFileSpace::TransferFile::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::TransferFileSpace::TransferFile::__newInstance() const
{
    return new TransferFile;
}

::Ice::Object* TransferFileSpace::upCast(::TransferFileSpace::TransferFile* p) { return p; }

namespace
{
const ::std::string __TransferFileSpace__TransferFile_ids[2] =
{
    "::Ice::Object",
    "::TransferFileSpace::TransferFile"
};

}

bool
TransferFileSpace::TransferFile::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__TransferFileSpace__TransferFile_ids, __TransferFileSpace__TransferFile_ids + 2, _s);
}

::std::vector< ::std::string>
TransferFileSpace::TransferFile::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__TransferFileSpace__TransferFile_ids[0], &__TransferFileSpace__TransferFile_ids[2]);
}

const ::std::string&
TransferFileSpace::TransferFile::ice_id(const ::Ice::Current&) const
{
    return __TransferFileSpace__TransferFile_ids[1];
}

const ::std::string&
TransferFileSpace::TransferFile::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::TransferFileSpace::TransferFile";
    return typeId;
#else
    return __TransferFileSpace__TransferFile_ids[1];
#endif
}

::Ice::DispatchStatus
TransferFileSpace::TransferFile::___notifyRealdbBackup(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    notifyRealdbBackup(__current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
TransferFileSpace::TransferFile::___finishRealdbBackup(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    finishRealdbBackup(__current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
TransferFileSpace::TransferFile::___requestRealdb(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    bool __ret = requestRealdb(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
TransferFileSpace::TransferFile::___requestTransactionLogger(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    requestTransactionLogger(__current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
TransferFileSpace::TransferFile::___requestRealdbContent(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_fileName;
    ::Ice::Long __p_pos;
    __is->read(__p_fileName);
    __is->read(__p_pos);
    __inS.endReadParams();
    ::TransferFileSpace::FileContent __ret = requestRealdbContent(__p_fileName, __p_pos, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
TransferFileSpace::TransferFile::___requestHisCurveFileList(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_sDate;
    ::std::string __p_eDate;
    __is->read(__p_sDate);
    __is->read(__p_eDate);
    __inS.endReadParams();
    ::TransferFileSpace::FileDirSeq __p_fileList;
    bool __ret = requestHisCurveFileList(__p_sDate, __p_eDate, __p_fileList, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__p_fileList);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
TransferFileSpace::TransferFile::___requestHisCurveFile(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_date;
    ::std::string __p_fileName;
    ::Ice::Long __p_pos;
    __is->read(__p_date);
    __is->read(__p_fileName);
    __is->read(__p_pos);
    __inS.endReadParams();
    ::TransferFileSpace::FileContent __ret = requestHisCurveFile(__p_date, __p_fileName, __p_pos, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
TransferFileSpace::TransferFile::___requestWarningFileList(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_sDate;
    ::std::string __p_eDate;
    __is->read(__p_sDate);
    __is->read(__p_eDate);
    __inS.endReadParams();
    ::TransferFileSpace::FileDirSeq __p_fileList;
    bool __ret = requestWarningFileList(__p_sDate, __p_eDate, __p_fileList, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__p_fileList);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
TransferFileSpace::TransferFile::___requestWarningFile(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_fileName;
    ::Ice::Long __p_pos;
    __is->read(__p_fileName);
    __is->read(__p_pos);
    __inS.endReadParams();
    ::TransferFileSpace::FileContent __ret = requestWarningFile(__p_fileName, __p_pos, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
TransferFileSpace::TransferFile::___requestReportFileList(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_folder;
    ::std::string __p_sDate;
    ::std::string __p_eDate;
    __is->read(__p_folder);
    __is->read(__p_sDate);
    __is->read(__p_eDate);
    __inS.endReadParams();
    ::TransferFileSpace::FileDirSeq __p_fileList;
    bool __ret = requestReportFileList(__p_folder, __p_sDate, __p_eDate, __p_fileList, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__p_fileList);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
TransferFileSpace::TransferFile::___requestReportFile(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_folder;
    ::std::string __p_fileName;
    ::Ice::Long __p_pos;
    __is->read(__p_folder);
    __is->read(__p_fileName);
    __is->read(__p_pos);
    __inS.endReadParams();
    ::TransferFileSpace::FileContent __ret = requestReportFile(__p_folder, __p_fileName, __p_pos, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
TransferFileSpace::TransferFile::___sendFileBinary(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_filePath;
    ::TransferFileSpace::Bytes __p_datas;
    bool __p_isFirst;
    __is->read(__p_filePath);
    __is->read(__p_datas);
    __is->read(__p_isFirst);
    __inS.endReadParams();
    sendFileBinary(__p_filePath, __p_datas, __p_isFirst, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
TransferFileSpace::TransferFile::___sendRdbLoggerBinary(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_title;
    ::TransferFileSpace::Bytes __p_datas;
    bool __p_isFirst;
    __is->read(__p_title);
    __is->read(__p_datas);
    __is->read(__p_isFirst);
    __inS.endReadParams();
    sendRdbLoggerBinary(__p_title, __p_datas, __p_isFirst, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
TransferFileSpace::TransferFile::___sendRdbLoggerFinished(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_title;
    __is->read(__p_title);
    __inS.endReadParams();
    sendRdbLoggerFinished(__p_title, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
TransferFileSpace::TransferFile::___syncRdbFinished(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    syncRdbFinished(__current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __TransferFileSpace__TransferFile_all[] =
{
    "finishRealdbBackup",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "notifyRealdbBackup",
    "requestHisCurveFile",
    "requestHisCurveFileList",
    "requestRealdb",
    "requestRealdbContent",
    "requestReportFile",
    "requestReportFileList",
    "requestTransactionLogger",
    "requestWarningFile",
    "requestWarningFileList",
    "sendFileBinary",
    "sendRdbLoggerBinary",
    "sendRdbLoggerFinished",
    "syncRdbFinished"
};

}

::Ice::DispatchStatus
TransferFileSpace::TransferFile::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__TransferFileSpace__TransferFile_all, __TransferFileSpace__TransferFile_all + 19, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __TransferFileSpace__TransferFile_all)
    {
        case 0:
        {
            return ___finishRealdbBackup(in, current);
        }
        case 1:
        {
            return ___ice_id(in, current);
        }
        case 2:
        {
            return ___ice_ids(in, current);
        }
        case 3:
        {
            return ___ice_isA(in, current);
        }
        case 4:
        {
            return ___ice_ping(in, current);
        }
        case 5:
        {
            return ___notifyRealdbBackup(in, current);
        }
        case 6:
        {
            return ___requestHisCurveFile(in, current);
        }
        case 7:
        {
            return ___requestHisCurveFileList(in, current);
        }
        case 8:
        {
            return ___requestRealdb(in, current);
        }
        case 9:
        {
            return ___requestRealdbContent(in, current);
        }
        case 10:
        {
            return ___requestReportFile(in, current);
        }
        case 11:
        {
            return ___requestReportFileList(in, current);
        }
        case 12:
        {
            return ___requestTransactionLogger(in, current);
        }
        case 13:
        {
            return ___requestWarningFile(in, current);
        }
        case 14:
        {
            return ___requestWarningFileList(in, current);
        }
        case 15:
        {
            return ___sendFileBinary(in, current);
        }
        case 16:
        {
            return ___sendRdbLoggerBinary(in, current);
        }
        case 17:
        {
            return ___sendRdbLoggerFinished(in, current);
        }
        case 18:
        {
            return ___syncRdbFinished(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
TransferFileSpace::TransferFile::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
TransferFileSpace::TransferFile::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
TransferFileSpace::__patch(TransferFilePtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::TransferFileSpace::TransferFilePtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::TransferFileSpace::TransferFile::ice_staticId(), v);
    }
}
