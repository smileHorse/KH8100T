// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.4
//
// <auto-generated>
//
// Generated from file `fepcommstate.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __fepcommstate_h__
#define __fepcommstate_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/GCObject.h>
#include <Ice/AsyncResult.h>
#include <Ice/Incoming.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 306
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 4
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace FepCommState
{

class CComStateApp;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::FepCommState::CComStateApp>&);
::IceProxy::Ice::Object* upCast(::IceProxy::FepCommState::CComStateApp*);

class CComStateFep;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::FepCommState::CComStateFep>&);
::IceProxy::Ice::Object* upCast(::IceProxy::FepCommState::CComStateFep*);

class FepCommStateManager;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::FepCommState::FepCommStateManager>&);
::IceProxy::Ice::Object* upCast(::IceProxy::FepCommState::FepCommStateManager*);

}

}

namespace FepCommState
{

class CComStateApp;
::Ice::Object* upCast(::FepCommState::CComStateApp*);
typedef ::IceInternal::Handle< ::FepCommState::CComStateApp> CComStateAppPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::FepCommState::CComStateApp> CComStateAppPrx;
void __patch(CComStateAppPtr&, const ::Ice::ObjectPtr&);

class CComStateFep;
::Ice::Object* upCast(::FepCommState::CComStateFep*);
typedef ::IceInternal::Handle< ::FepCommState::CComStateFep> CComStateFepPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::FepCommState::CComStateFep> CComStateFepPrx;
void __patch(CComStateFepPtr&, const ::Ice::ObjectPtr&);

class FepCommStateManager;
::Ice::Object* upCast(::FepCommState::FepCommStateManager*);
typedef ::IceInternal::Handle< ::FepCommState::FepCommStateManager> FepCommStateManagerPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::FepCommState::FepCommStateManager> FepCommStateManagerPrx;
void __patch(FepCommStateManagerPtr&, const ::Ice::ObjectPtr&);

}

namespace FepCommState
{

enum StateValue
{
    disconnection,
    cutoff,
    connection,
    unknown
};

struct UnitChannel
{
    ::Ice::Short unitNo;
    ::Ice::Byte channelNum;
    ::Ice::Byte currentNo;
    ::std::string unitName;
    ::std::string gateWay;
    ::std::string rtuAddr;
    ::FepCommState::StateValue unitState;
    ::std::string gateWay1;
    ::std::string rtuAddr1;
    ::FepCommState::StateValue unitState1;

    bool operator==(const UnitChannel& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(unitNo != __rhs.unitNo)
        {
            return false;
        }
        if(channelNum != __rhs.channelNum)
        {
            return false;
        }
        if(currentNo != __rhs.currentNo)
        {
            return false;
        }
        if(unitName != __rhs.unitName)
        {
            return false;
        }
        if(gateWay != __rhs.gateWay)
        {
            return false;
        }
        if(rtuAddr != __rhs.rtuAddr)
        {
            return false;
        }
        if(unitState != __rhs.unitState)
        {
            return false;
        }
        if(gateWay1 != __rhs.gateWay1)
        {
            return false;
        }
        if(rtuAddr1 != __rhs.rtuAddr1)
        {
            return false;
        }
        if(unitState1 != __rhs.unitState1)
        {
            return false;
        }
        return true;
    }

    bool operator<(const UnitChannel& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(unitNo < __rhs.unitNo)
        {
            return true;
        }
        else if(__rhs.unitNo < unitNo)
        {
            return false;
        }
        if(channelNum < __rhs.channelNum)
        {
            return true;
        }
        else if(__rhs.channelNum < channelNum)
        {
            return false;
        }
        if(currentNo < __rhs.currentNo)
        {
            return true;
        }
        else if(__rhs.currentNo < currentNo)
        {
            return false;
        }
        if(unitName < __rhs.unitName)
        {
            return true;
        }
        else if(__rhs.unitName < unitName)
        {
            return false;
        }
        if(gateWay < __rhs.gateWay)
        {
            return true;
        }
        else if(__rhs.gateWay < gateWay)
        {
            return false;
        }
        if(rtuAddr < __rhs.rtuAddr)
        {
            return true;
        }
        else if(__rhs.rtuAddr < rtuAddr)
        {
            return false;
        }
        if(unitState < __rhs.unitState)
        {
            return true;
        }
        else if(__rhs.unitState < unitState)
        {
            return false;
        }
        if(gateWay1 < __rhs.gateWay1)
        {
            return true;
        }
        else if(__rhs.gateWay1 < gateWay1)
        {
            return false;
        }
        if(rtuAddr1 < __rhs.rtuAddr1)
        {
            return true;
        }
        else if(__rhs.rtuAddr1 < rtuAddr1)
        {
            return false;
        }
        if(unitState1 < __rhs.unitState1)
        {
            return true;
        }
        else if(__rhs.unitState1 < unitState1)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const UnitChannel& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const UnitChannel& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const UnitChannel& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const UnitChannel& __rhs) const
    {
        return !operator<(__rhs);
    }
};

typedef ::std::vector< ::FepCommState::UnitChannel> UnitChannelSeq;

struct StateDataPacket
{
    ::Ice::Byte id;
    ::std::string fepNode;
    ::Ice::Int requestId;
    ::FepCommState::UnitChannelSeq unitchannels;
};

const ::std::string CommStateValueAppTopic = "commstatevalue_app_operation";

const ::std::string CommStateValueFepTopic = "commstatevalue_fep_operation";

const ::std::string strCommStateTopic = "fep_commdata_state";

}

namespace Ice
{
template<>
struct StreamableTraits< ::FepCommState::StateValue>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 3;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::FepCommState::UnitChannel>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 11;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::FepCommState::UnitChannel, S>
{
    static void write(S* __os, const ::FepCommState::UnitChannel& v)
    {
        __os->write(v.unitNo);
        __os->write(v.channelNum);
        __os->write(v.currentNo);
        __os->write(v.unitName);
        __os->write(v.gateWay);
        __os->write(v.rtuAddr);
        __os->write(v.unitState);
        __os->write(v.gateWay1);
        __os->write(v.rtuAddr1);
        __os->write(v.unitState1);
    }
};

template<class S>
struct StreamReader< ::FepCommState::UnitChannel, S>
{
    static void read(S* __is, ::FepCommState::UnitChannel& v)
    {
        __is->read(v.unitNo);
        __is->read(v.channelNum);
        __is->read(v.currentNo);
        __is->read(v.unitName);
        __is->read(v.gateWay);
        __is->read(v.rtuAddr);
        __is->read(v.unitState);
        __is->read(v.gateWay1);
        __is->read(v.rtuAddr1);
        __is->read(v.unitState1);
    }
};

template<>
struct StreamableTraits< ::FepCommState::StateDataPacket>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 7;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::FepCommState::StateDataPacket, S>
{
    static void write(S* __os, const ::FepCommState::StateDataPacket& v)
    {
        __os->write(v.id);
        __os->write(v.fepNode);
        __os->write(v.requestId);
        __os->write(v.unitchannels);
    }
};

template<class S>
struct StreamReader< ::FepCommState::StateDataPacket, S>
{
    static void read(S* __is, ::FepCommState::StateDataPacket& v)
    {
        __is->read(v.id);
        __is->read(v.fepNode);
        __is->read(v.requestId);
        __is->read(v.unitchannels);
    }
};

}

namespace FepCommState
{

class Callback_CComStateApp_processCommState_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CComStateApp_processCommState_Base> Callback_CComStateApp_processCommStatePtr;

class Callback_CComStateFep_processCommState_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CComStateFep_processCommState_Base> Callback_CComStateFep_processCommStatePtr;

class Callback_FepCommStateManager_processData_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FepCommStateManager_processData_Base> Callback_FepCommStateManager_processDataPtr;

}

namespace IceProxy
{

namespace FepCommState
{

class CComStateApp : virtual public ::IceProxy::Ice::Object
{
public:

    void processCommState(const ::FepCommState::StateDataPacket& __p_csInfo)
    {
        processCommState(__p_csInfo, 0);
    }
    void processCommState(const ::FepCommState::StateDataPacket& __p_csInfo, const ::Ice::Context& __ctx)
    {
        processCommState(__p_csInfo, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_processCommState(const ::FepCommState::StateDataPacket& __p_csInfo, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_processCommState(__p_csInfo, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_processCommState(const ::FepCommState::StateDataPacket& __p_csInfo, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_processCommState(__p_csInfo, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_processCommState(const ::FepCommState::StateDataPacket& __p_csInfo, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_processCommState(__p_csInfo, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_processCommState(const ::FepCommState::StateDataPacket& __p_csInfo, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_processCommState(__p_csInfo, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_processCommState(const ::FepCommState::StateDataPacket& __p_csInfo)
    {
        return begin_processCommState(__p_csInfo, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_processCommState(const ::FepCommState::StateDataPacket& __p_csInfo, const ::Ice::Context& __ctx)
    {
        return begin_processCommState(__p_csInfo, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_processCommState(const ::FepCommState::StateDataPacket& __p_csInfo, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_processCommState(__p_csInfo, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_processCommState(const ::FepCommState::StateDataPacket& __p_csInfo, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_processCommState(__p_csInfo, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_processCommState(const ::FepCommState::StateDataPacket& __p_csInfo, const ::FepCommState::Callback_CComStateApp_processCommStatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_processCommState(__p_csInfo, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_processCommState(const ::FepCommState::StateDataPacket& __p_csInfo, const ::Ice::Context& __ctx, const ::FepCommState::Callback_CComStateApp_processCommStatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_processCommState(__p_csInfo, &__ctx, __del, __cookie);
    }

    void end_processCommState(const ::Ice::AsyncResultPtr&);
    
private:

    void processCommState(const ::FepCommState::StateDataPacket&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_processCommState(const ::FepCommState::StateDataPacket&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<CComStateApp> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<CComStateApp*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<CComStateApp> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<CComStateApp*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<CComStateApp> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<CComStateApp*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<CComStateApp> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<CComStateApp*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<CComStateApp> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<CComStateApp*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<CComStateApp> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<CComStateApp*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<CComStateApp> ice_secure(bool __secure) const
    {
        return dynamic_cast<CComStateApp*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<CComStateApp> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<CComStateApp*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<CComStateApp> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<CComStateApp*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<CComStateApp> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<CComStateApp*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<CComStateApp> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<CComStateApp*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<CComStateApp> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<CComStateApp*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<CComStateApp> ice_twoway() const
    {
        return dynamic_cast<CComStateApp*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<CComStateApp> ice_oneway() const
    {
        return dynamic_cast<CComStateApp*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<CComStateApp> ice_batchOneway() const
    {
        return dynamic_cast<CComStateApp*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<CComStateApp> ice_datagram() const
    {
        return dynamic_cast<CComStateApp*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<CComStateApp> ice_batchDatagram() const
    {
        return dynamic_cast<CComStateApp*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<CComStateApp> ice_compress(bool __compress) const
    {
        return dynamic_cast<CComStateApp*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<CComStateApp> ice_timeout(int __timeout) const
    {
        return dynamic_cast<CComStateApp*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<CComStateApp> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<CComStateApp*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<CComStateApp> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<CComStateApp*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class CComStateFep : virtual public ::IceProxy::Ice::Object
{
public:

    void processCommState(const ::FepCommState::StateDataPacket& __p_csInfo)
    {
        processCommState(__p_csInfo, 0);
    }
    void processCommState(const ::FepCommState::StateDataPacket& __p_csInfo, const ::Ice::Context& __ctx)
    {
        processCommState(__p_csInfo, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_processCommState(const ::FepCommState::StateDataPacket& __p_csInfo, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_processCommState(__p_csInfo, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_processCommState(const ::FepCommState::StateDataPacket& __p_csInfo, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_processCommState(__p_csInfo, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_processCommState(const ::FepCommState::StateDataPacket& __p_csInfo, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_processCommState(__p_csInfo, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_processCommState(const ::FepCommState::StateDataPacket& __p_csInfo, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_processCommState(__p_csInfo, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_processCommState(const ::FepCommState::StateDataPacket& __p_csInfo)
    {
        return begin_processCommState(__p_csInfo, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_processCommState(const ::FepCommState::StateDataPacket& __p_csInfo, const ::Ice::Context& __ctx)
    {
        return begin_processCommState(__p_csInfo, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_processCommState(const ::FepCommState::StateDataPacket& __p_csInfo, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_processCommState(__p_csInfo, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_processCommState(const ::FepCommState::StateDataPacket& __p_csInfo, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_processCommState(__p_csInfo, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_processCommState(const ::FepCommState::StateDataPacket& __p_csInfo, const ::FepCommState::Callback_CComStateFep_processCommStatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_processCommState(__p_csInfo, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_processCommState(const ::FepCommState::StateDataPacket& __p_csInfo, const ::Ice::Context& __ctx, const ::FepCommState::Callback_CComStateFep_processCommStatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_processCommState(__p_csInfo, &__ctx, __del, __cookie);
    }

    void end_processCommState(const ::Ice::AsyncResultPtr&);
    
private:

    void processCommState(const ::FepCommState::StateDataPacket&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_processCommState(const ::FepCommState::StateDataPacket&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<CComStateFep> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<CComStateFep*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<CComStateFep> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<CComStateFep*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<CComStateFep> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<CComStateFep*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<CComStateFep> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<CComStateFep*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<CComStateFep> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<CComStateFep*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<CComStateFep> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<CComStateFep*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<CComStateFep> ice_secure(bool __secure) const
    {
        return dynamic_cast<CComStateFep*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<CComStateFep> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<CComStateFep*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<CComStateFep> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<CComStateFep*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<CComStateFep> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<CComStateFep*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<CComStateFep> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<CComStateFep*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<CComStateFep> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<CComStateFep*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<CComStateFep> ice_twoway() const
    {
        return dynamic_cast<CComStateFep*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<CComStateFep> ice_oneway() const
    {
        return dynamic_cast<CComStateFep*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<CComStateFep> ice_batchOneway() const
    {
        return dynamic_cast<CComStateFep*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<CComStateFep> ice_datagram() const
    {
        return dynamic_cast<CComStateFep*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<CComStateFep> ice_batchDatagram() const
    {
        return dynamic_cast<CComStateFep*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<CComStateFep> ice_compress(bool __compress) const
    {
        return dynamic_cast<CComStateFep*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<CComStateFep> ice_timeout(int __timeout) const
    {
        return dynamic_cast<CComStateFep*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<CComStateFep> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<CComStateFep*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<CComStateFep> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<CComStateFep*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class FepCommStateManager : virtual public ::IceProxy::Ice::Object
{
public:

    void processData(const ::FepCommState::StateDataPacket& __p_aPacket)
    {
        processData(__p_aPacket, 0);
    }
    void processData(const ::FepCommState::StateDataPacket& __p_aPacket, const ::Ice::Context& __ctx)
    {
        processData(__p_aPacket, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_processData(const ::FepCommState::StateDataPacket& __p_aPacket, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_processData(__p_aPacket, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_processData(const ::FepCommState::StateDataPacket& __p_aPacket, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_processData(__p_aPacket, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_processData(const ::FepCommState::StateDataPacket& __p_aPacket, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_processData(__p_aPacket, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_processData(const ::FepCommState::StateDataPacket& __p_aPacket, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_processData(__p_aPacket, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_processData(const ::FepCommState::StateDataPacket& __p_aPacket)
    {
        return begin_processData(__p_aPacket, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_processData(const ::FepCommState::StateDataPacket& __p_aPacket, const ::Ice::Context& __ctx)
    {
        return begin_processData(__p_aPacket, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_processData(const ::FepCommState::StateDataPacket& __p_aPacket, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_processData(__p_aPacket, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_processData(const ::FepCommState::StateDataPacket& __p_aPacket, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_processData(__p_aPacket, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_processData(const ::FepCommState::StateDataPacket& __p_aPacket, const ::FepCommState::Callback_FepCommStateManager_processDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_processData(__p_aPacket, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_processData(const ::FepCommState::StateDataPacket& __p_aPacket, const ::Ice::Context& __ctx, const ::FepCommState::Callback_FepCommStateManager_processDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_processData(__p_aPacket, &__ctx, __del, __cookie);
    }

    void end_processData(const ::Ice::AsyncResultPtr&);
    
private:

    void processData(const ::FepCommState::StateDataPacket&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_processData(const ::FepCommState::StateDataPacket&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<FepCommStateManager> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<FepCommStateManager*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<FepCommStateManager> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<FepCommStateManager*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<FepCommStateManager> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<FepCommStateManager*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<FepCommStateManager> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<FepCommStateManager*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<FepCommStateManager> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<FepCommStateManager*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<FepCommStateManager> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<FepCommStateManager*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<FepCommStateManager> ice_secure(bool __secure) const
    {
        return dynamic_cast<FepCommStateManager*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<FepCommStateManager> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<FepCommStateManager*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<FepCommStateManager> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<FepCommStateManager*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<FepCommStateManager> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<FepCommStateManager*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<FepCommStateManager> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<FepCommStateManager*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<FepCommStateManager> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<FepCommStateManager*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<FepCommStateManager> ice_twoway() const
    {
        return dynamic_cast<FepCommStateManager*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<FepCommStateManager> ice_oneway() const
    {
        return dynamic_cast<FepCommStateManager*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<FepCommStateManager> ice_batchOneway() const
    {
        return dynamic_cast<FepCommStateManager*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<FepCommStateManager> ice_datagram() const
    {
        return dynamic_cast<FepCommStateManager*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<FepCommStateManager> ice_batchDatagram() const
    {
        return dynamic_cast<FepCommStateManager*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<FepCommStateManager> ice_compress(bool __compress) const
    {
        return dynamic_cast<FepCommStateManager*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<FepCommStateManager> ice_timeout(int __timeout) const
    {
        return dynamic_cast<FepCommStateManager*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<FepCommStateManager> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<FepCommStateManager*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<FepCommStateManager> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<FepCommStateManager*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace FepCommState
{

class CComStateApp : virtual public ::Ice::Object
{
public:

    typedef CComStateAppPrx ProxyType;
    typedef CComStateAppPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void processCommState(const ::FepCommState::StateDataPacket&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___processCommState(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
};

inline bool operator==(const CComStateApp& l, const CComStateApp& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const CComStateApp& l, const CComStateApp& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class CComStateFep : virtual public ::Ice::Object
{
public:

    typedef CComStateFepPrx ProxyType;
    typedef CComStateFepPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void processCommState(const ::FepCommState::StateDataPacket&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___processCommState(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
};

inline bool operator==(const CComStateFep& l, const CComStateFep& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const CComStateFep& l, const CComStateFep& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class FepCommStateManager : virtual public ::Ice::Object
{
public:

    typedef FepCommStateManagerPrx ProxyType;
    typedef FepCommStateManagerPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void processData(const ::FepCommState::StateDataPacket&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___processData(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
};

inline bool operator==(const FepCommStateManager& l, const FepCommStateManager& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const FepCommStateManager& l, const FepCommStateManager& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace FepCommState
{

template<class T>
class CallbackNC_CComStateApp_processCommState : public Callback_CComStateApp_processCommState_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_CComStateApp_processCommState(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_CComStateApp_processCommStatePtr
newCallback_CComStateApp_processCommState(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CComStateApp_processCommState<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CComStateApp_processCommStatePtr
newCallback_CComStateApp_processCommState(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CComStateApp_processCommState<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_CComStateApp_processCommStatePtr
newCallback_CComStateApp_processCommState(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CComStateApp_processCommState<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CComStateApp_processCommStatePtr
newCallback_CComStateApp_processCommState(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CComStateApp_processCommState<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_CComStateApp_processCommState : public Callback_CComStateApp_processCommState_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_CComStateApp_processCommState(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_CComStateApp_processCommStatePtr
newCallback_CComStateApp_processCommState(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CComStateApp_processCommState<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CComStateApp_processCommStatePtr
newCallback_CComStateApp_processCommState(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CComStateApp_processCommState<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_CComStateApp_processCommStatePtr
newCallback_CComStateApp_processCommState(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CComStateApp_processCommState<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CComStateApp_processCommStatePtr
newCallback_CComStateApp_processCommState(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CComStateApp_processCommState<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_CComStateFep_processCommState : public Callback_CComStateFep_processCommState_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_CComStateFep_processCommState(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_CComStateFep_processCommStatePtr
newCallback_CComStateFep_processCommState(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CComStateFep_processCommState<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CComStateFep_processCommStatePtr
newCallback_CComStateFep_processCommState(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CComStateFep_processCommState<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_CComStateFep_processCommStatePtr
newCallback_CComStateFep_processCommState(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CComStateFep_processCommState<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CComStateFep_processCommStatePtr
newCallback_CComStateFep_processCommState(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CComStateFep_processCommState<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_CComStateFep_processCommState : public Callback_CComStateFep_processCommState_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_CComStateFep_processCommState(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_CComStateFep_processCommStatePtr
newCallback_CComStateFep_processCommState(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CComStateFep_processCommState<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CComStateFep_processCommStatePtr
newCallback_CComStateFep_processCommState(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CComStateFep_processCommState<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_CComStateFep_processCommStatePtr
newCallback_CComStateFep_processCommState(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CComStateFep_processCommState<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CComStateFep_processCommStatePtr
newCallback_CComStateFep_processCommState(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CComStateFep_processCommState<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_FepCommStateManager_processData : public Callback_FepCommStateManager_processData_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_FepCommStateManager_processData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_FepCommStateManager_processDataPtr
newCallback_FepCommStateManager_processData(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FepCommStateManager_processData<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FepCommStateManager_processDataPtr
newCallback_FepCommStateManager_processData(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FepCommStateManager_processData<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_FepCommStateManager_processDataPtr
newCallback_FepCommStateManager_processData(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FepCommStateManager_processData<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FepCommStateManager_processDataPtr
newCallback_FepCommStateManager_processData(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FepCommStateManager_processData<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_FepCommStateManager_processData : public Callback_FepCommStateManager_processData_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_FepCommStateManager_processData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_FepCommStateManager_processDataPtr
newCallback_FepCommStateManager_processData(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FepCommStateManager_processData<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FepCommStateManager_processDataPtr
newCallback_FepCommStateManager_processData(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FepCommStateManager_processData<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_FepCommStateManager_processDataPtr
newCallback_FepCommStateManager_processData(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FepCommStateManager_processData<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FepCommStateManager_processDataPtr
newCallback_FepCommStateManager_processData(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FepCommStateManager_processData<T, CT>(instance, 0, excb, sentcb);
}

}

#include <IceUtil/PopDisableWarnings.h>
#endif
