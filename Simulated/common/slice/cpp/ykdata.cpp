// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.4
//
// <auto-generated>
//
// Generated from file `ykdata.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <ykdata.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/BasicStream.h>
#include <IceUtil/Iterator.h>
#include <IceUtil/PopDisableWarnings.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 306
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 4
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

const ::std::string __Yk__YkMmiManager__sendYkRequest_name = "sendYkRequest";

const ::std::string __Yk__YkMmiManager__sendValidateRequest_name = "sendValidateRequest";

const ::std::string __Yk__YkMmiManager__sendYtRequest_name = "sendYtRequest";

const ::std::string __Yk__YkMmiManager__sendValidateYtRequest_name = "sendValidateYtRequest";

const ::std::string __Yk__YkMmiManager__sendSettingRequest_name = "sendSettingRequest";

const ::std::string __Yk__YkMmiManager__sendValidateSettingRequest_name = "sendValidateSettingRequest";

const ::std::string __Yk__YkFepManager__select_name = "select";

const ::std::string __Yk__YkFepManager__execute_name = "execute";

const ::std::string __Yk__YkFepManager__cancel_name = "cancel";

const ::std::string __Yk__YkAppManager__selectEcho_name = "selectEcho";

const ::std::string __Yk__YkAppManager__selectReturn_name = "selectReturn";

const ::std::string __Yk__YkAppManager__executeEcho_name = "executeEcho";

const ::std::string __Yk__YkAppManager__executeReturn_name = "executeReturn";

const ::std::string __Yk__YkAppManager__cancelEcho_name = "cancelEcho";

const ::std::string __Yk__YkAppManager__cancelReturn_name = "cancelReturn";

}

namespace Ice
{
}
::IceProxy::Ice::Object* ::IceProxy::Yk::upCast(::IceProxy::Yk::YkMmiManager* p) { return p; }

void
::IceProxy::Yk::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Yk::YkMmiManager>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Yk::YkMmiManager;
        v->__copyFrom(proxy);
    }
}

void
IceProxy::Yk::YkMmiManager::sendYkRequest(const ::Yk::YkRequestMsg& __p_msg, const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __Yk__YkMmiManager__sendYkRequest_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_msg);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::Yk::YkMmiManager::begin_sendYkRequest(const ::Yk::YkRequestMsg& __p_msg, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Yk__YkMmiManager__sendYkRequest_name, __del, __cookie);
    try
    {
        __result->prepare(__Yk__YkMmiManager__sendYkRequest_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_msg);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::Yk::YkMmiManager::end_sendYkRequest(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Yk__YkMmiManager__sendYkRequest_name);
}

void
IceProxy::Yk::YkMmiManager::sendValidateRequest(const ::Yk::YkRequestMsg& __p_msg, const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __Yk__YkMmiManager__sendValidateRequest_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_msg);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::Yk::YkMmiManager::begin_sendValidateRequest(const ::Yk::YkRequestMsg& __p_msg, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Yk__YkMmiManager__sendValidateRequest_name, __del, __cookie);
    try
    {
        __result->prepare(__Yk__YkMmiManager__sendValidateRequest_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_msg);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::Yk::YkMmiManager::end_sendValidateRequest(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Yk__YkMmiManager__sendValidateRequest_name);
}

void
IceProxy::Yk::YkMmiManager::sendYtRequest(const ::Yk::YtRequestMsg& __p_msg, const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __Yk__YkMmiManager__sendYtRequest_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_msg);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::Yk::YkMmiManager::begin_sendYtRequest(const ::Yk::YtRequestMsg& __p_msg, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Yk__YkMmiManager__sendYtRequest_name, __del, __cookie);
    try
    {
        __result->prepare(__Yk__YkMmiManager__sendYtRequest_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_msg);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::Yk::YkMmiManager::end_sendYtRequest(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Yk__YkMmiManager__sendYtRequest_name);
}

void
IceProxy::Yk::YkMmiManager::sendValidateYtRequest(const ::Yk::YtRequestMsg& __p_msg, const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __Yk__YkMmiManager__sendValidateYtRequest_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_msg);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::Yk::YkMmiManager::begin_sendValidateYtRequest(const ::Yk::YtRequestMsg& __p_msg, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Yk__YkMmiManager__sendValidateYtRequest_name, __del, __cookie);
    try
    {
        __result->prepare(__Yk__YkMmiManager__sendValidateYtRequest_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_msg);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::Yk::YkMmiManager::end_sendValidateYtRequest(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Yk__YkMmiManager__sendValidateYtRequest_name);
}

void
IceProxy::Yk::YkMmiManager::sendSettingRequest(const ::Yk::SettingMsg& __p_msg, const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __Yk__YkMmiManager__sendSettingRequest_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_msg);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::Yk::YkMmiManager::begin_sendSettingRequest(const ::Yk::SettingMsg& __p_msg, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Yk__YkMmiManager__sendSettingRequest_name, __del, __cookie);
    try
    {
        __result->prepare(__Yk__YkMmiManager__sendSettingRequest_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_msg);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::Yk::YkMmiManager::end_sendSettingRequest(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Yk__YkMmiManager__sendSettingRequest_name);
}

void
IceProxy::Yk::YkMmiManager::sendValidateSettingRequest(const ::Yk::SettingMsg& __p_msg, const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __Yk__YkMmiManager__sendValidateSettingRequest_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_msg);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::Yk::YkMmiManager::begin_sendValidateSettingRequest(const ::Yk::SettingMsg& __p_msg, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Yk__YkMmiManager__sendValidateSettingRequest_name, __del, __cookie);
    try
    {
        __result->prepare(__Yk__YkMmiManager__sendValidateSettingRequest_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_msg);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::Yk::YkMmiManager::end_sendValidateSettingRequest(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Yk__YkMmiManager__sendValidateSettingRequest_name);
}

const ::std::string&
IceProxy::Yk::YkMmiManager::ice_staticId()
{
    return ::Yk::YkMmiManager::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::Yk::YkMmiManager::__newInstance() const
{
    return new YkMmiManager;
}
::IceProxy::Ice::Object* ::IceProxy::Yk::upCast(::IceProxy::Yk::YkFepManager* p) { return p; }

void
::IceProxy::Yk::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Yk::YkFepManager>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Yk::YkFepManager;
        v->__copyFrom(proxy);
    }
}

void
IceProxy::Yk::YkFepManager::select(const ::Yk::YkCommand& __p_cmd, const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __Yk__YkFepManager__select_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_cmd);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::Yk::YkFepManager::begin_select(const ::Yk::YkCommand& __p_cmd, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Yk__YkFepManager__select_name, __del, __cookie);
    try
    {
        __result->prepare(__Yk__YkFepManager__select_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_cmd);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::Yk::YkFepManager::end_select(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Yk__YkFepManager__select_name);
}

void
IceProxy::Yk::YkFepManager::execute(const ::Yk::YkCommand& __p_cmd, const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __Yk__YkFepManager__execute_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_cmd);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::Yk::YkFepManager::begin_execute(const ::Yk::YkCommand& __p_cmd, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Yk__YkFepManager__execute_name, __del, __cookie);
    try
    {
        __result->prepare(__Yk__YkFepManager__execute_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_cmd);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::Yk::YkFepManager::end_execute(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Yk__YkFepManager__execute_name);
}

void
IceProxy::Yk::YkFepManager::cancel(const ::Yk::YkCommand& __p_cmd, const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __Yk__YkFepManager__cancel_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_cmd);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::Yk::YkFepManager::begin_cancel(const ::Yk::YkCommand& __p_cmd, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Yk__YkFepManager__cancel_name, __del, __cookie);
    try
    {
        __result->prepare(__Yk__YkFepManager__cancel_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_cmd);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::Yk::YkFepManager::end_cancel(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Yk__YkFepManager__cancel_name);
}

const ::std::string&
IceProxy::Yk::YkFepManager::ice_staticId()
{
    return ::Yk::YkFepManager::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::Yk::YkFepManager::__newInstance() const
{
    return new YkFepManager;
}
::IceProxy::Ice::Object* ::IceProxy::Yk::upCast(::IceProxy::Yk::YkAppManager* p) { return p; }

void
::IceProxy::Yk::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Yk::YkAppManager>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Yk::YkAppManager;
        v->__copyFrom(proxy);
    }
}

void
IceProxy::Yk::YkAppManager::selectEcho(const ::Yk::YkCommand& __p_cmd, bool __p_flag, const ::std::string& __p_tip, const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __Yk__YkAppManager__selectEcho_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_cmd);
        __os->write(__p_flag);
        __os->write(__p_tip);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::Yk::YkAppManager::begin_selectEcho(const ::Yk::YkCommand& __p_cmd, bool __p_flag, const ::std::string& __p_tip, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Yk__YkAppManager__selectEcho_name, __del, __cookie);
    try
    {
        __result->prepare(__Yk__YkAppManager__selectEcho_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_cmd);
        __os->write(__p_flag);
        __os->write(__p_tip);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::Yk::YkAppManager::end_selectEcho(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Yk__YkAppManager__selectEcho_name);
}

void
IceProxy::Yk::YkAppManager::selectReturn(const ::Yk::YkCommand& __p_cmd, bool __p_flag, const ::std::string& __p_tip, const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __Yk__YkAppManager__selectReturn_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_cmd);
        __os->write(__p_flag);
        __os->write(__p_tip);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::Yk::YkAppManager::begin_selectReturn(const ::Yk::YkCommand& __p_cmd, bool __p_flag, const ::std::string& __p_tip, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Yk__YkAppManager__selectReturn_name, __del, __cookie);
    try
    {
        __result->prepare(__Yk__YkAppManager__selectReturn_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_cmd);
        __os->write(__p_flag);
        __os->write(__p_tip);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::Yk::YkAppManager::end_selectReturn(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Yk__YkAppManager__selectReturn_name);
}

void
IceProxy::Yk::YkAppManager::executeEcho(const ::Yk::YkCommand& __p_cmd, bool __p_flag, const ::std::string& __p_tip, const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __Yk__YkAppManager__executeEcho_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_cmd);
        __os->write(__p_flag);
        __os->write(__p_tip);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::Yk::YkAppManager::begin_executeEcho(const ::Yk::YkCommand& __p_cmd, bool __p_flag, const ::std::string& __p_tip, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Yk__YkAppManager__executeEcho_name, __del, __cookie);
    try
    {
        __result->prepare(__Yk__YkAppManager__executeEcho_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_cmd);
        __os->write(__p_flag);
        __os->write(__p_tip);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::Yk::YkAppManager::end_executeEcho(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Yk__YkAppManager__executeEcho_name);
}

void
IceProxy::Yk::YkAppManager::executeReturn(const ::Yk::YkCommand& __p_cmd, bool __p_flag, const ::std::string& __p_tip, const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __Yk__YkAppManager__executeReturn_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_cmd);
        __os->write(__p_flag);
        __os->write(__p_tip);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::Yk::YkAppManager::begin_executeReturn(const ::Yk::YkCommand& __p_cmd, bool __p_flag, const ::std::string& __p_tip, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Yk__YkAppManager__executeReturn_name, __del, __cookie);
    try
    {
        __result->prepare(__Yk__YkAppManager__executeReturn_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_cmd);
        __os->write(__p_flag);
        __os->write(__p_tip);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::Yk::YkAppManager::end_executeReturn(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Yk__YkAppManager__executeReturn_name);
}

void
IceProxy::Yk::YkAppManager::cancelEcho(const ::Yk::YkCommand& __p_cmd, bool __p_flag, const ::std::string& __p_tip, const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __Yk__YkAppManager__cancelEcho_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_cmd);
        __os->write(__p_flag);
        __os->write(__p_tip);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::Yk::YkAppManager::begin_cancelEcho(const ::Yk::YkCommand& __p_cmd, bool __p_flag, const ::std::string& __p_tip, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Yk__YkAppManager__cancelEcho_name, __del, __cookie);
    try
    {
        __result->prepare(__Yk__YkAppManager__cancelEcho_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_cmd);
        __os->write(__p_flag);
        __os->write(__p_tip);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::Yk::YkAppManager::end_cancelEcho(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Yk__YkAppManager__cancelEcho_name);
}

void
IceProxy::Yk::YkAppManager::cancelReturn(const ::Yk::YkCommand& __p_cmd, bool __p_flag, const ::std::string& __p_tip, const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __Yk__YkAppManager__cancelReturn_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_cmd);
        __os->write(__p_flag);
        __os->write(__p_tip);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::Yk::YkAppManager::begin_cancelReturn(const ::Yk::YkCommand& __p_cmd, bool __p_flag, const ::std::string& __p_tip, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Yk__YkAppManager__cancelReturn_name, __del, __cookie);
    try
    {
        __result->prepare(__Yk__YkAppManager__cancelReturn_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_cmd);
        __os->write(__p_flag);
        __os->write(__p_tip);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::Yk::YkAppManager::end_cancelReturn(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Yk__YkAppManager__cancelReturn_name);
}

const ::std::string&
IceProxy::Yk::YkAppManager::ice_staticId()
{
    return ::Yk::YkAppManager::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::Yk::YkAppManager::__newInstance() const
{
    return new YkAppManager;
}

::Ice::Object* Yk::upCast(::Yk::YkMmiManager* p) { return p; }

namespace
{
const ::std::string __Yk__YkMmiManager_ids[2] =
{
    "::Ice::Object",
    "::Yk::YkMmiManager"
};

}

bool
Yk::YkMmiManager::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Yk__YkMmiManager_ids, __Yk__YkMmiManager_ids + 2, _s);
}

::std::vector< ::std::string>
Yk::YkMmiManager::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Yk__YkMmiManager_ids[0], &__Yk__YkMmiManager_ids[2]);
}

const ::std::string&
Yk::YkMmiManager::ice_id(const ::Ice::Current&) const
{
    return __Yk__YkMmiManager_ids[1];
}

const ::std::string&
Yk::YkMmiManager::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::Yk::YkMmiManager";
    return typeId;
#else
    return __Yk__YkMmiManager_ids[1];
#endif
}

::Ice::DispatchStatus
Yk::YkMmiManager::___sendYkRequest(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Yk::YkRequestMsg __p_msg;
    __is->read(__p_msg);
    __inS.endReadParams();
    sendYkRequest(__p_msg, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Yk::YkMmiManager::___sendValidateRequest(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Yk::YkRequestMsg __p_msg;
    __is->read(__p_msg);
    __inS.endReadParams();
    sendValidateRequest(__p_msg, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Yk::YkMmiManager::___sendYtRequest(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Yk::YtRequestMsg __p_msg;
    __is->read(__p_msg);
    __inS.endReadParams();
    sendYtRequest(__p_msg, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Yk::YkMmiManager::___sendValidateYtRequest(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Yk::YtRequestMsg __p_msg;
    __is->read(__p_msg);
    __inS.endReadParams();
    sendValidateYtRequest(__p_msg, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Yk::YkMmiManager::___sendSettingRequest(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Yk::SettingMsg __p_msg;
    __is->read(__p_msg);
    __inS.endReadParams();
    sendSettingRequest(__p_msg, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Yk::YkMmiManager::___sendValidateSettingRequest(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Yk::SettingMsg __p_msg;
    __is->read(__p_msg);
    __inS.endReadParams();
    sendValidateSettingRequest(__p_msg, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __Yk__YkMmiManager_all[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "sendSettingRequest",
    "sendValidateRequest",
    "sendValidateSettingRequest",
    "sendValidateYtRequest",
    "sendYkRequest",
    "sendYtRequest"
};

}

::Ice::DispatchStatus
Yk::YkMmiManager::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__Yk__YkMmiManager_all, __Yk__YkMmiManager_all + 10, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __Yk__YkMmiManager_all)
    {
        case 0:
        {
            return ___ice_id(in, current);
        }
        case 1:
        {
            return ___ice_ids(in, current);
        }
        case 2:
        {
            return ___ice_isA(in, current);
        }
        case 3:
        {
            return ___ice_ping(in, current);
        }
        case 4:
        {
            return ___sendSettingRequest(in, current);
        }
        case 5:
        {
            return ___sendValidateRequest(in, current);
        }
        case 6:
        {
            return ___sendValidateSettingRequest(in, current);
        }
        case 7:
        {
            return ___sendValidateYtRequest(in, current);
        }
        case 8:
        {
            return ___sendYkRequest(in, current);
        }
        case 9:
        {
            return ___sendYtRequest(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
Yk::YkMmiManager::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
Yk::YkMmiManager::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
Yk::__patch(YkMmiManagerPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Yk::YkMmiManagerPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Yk::YkMmiManager::ice_staticId(), v);
    }
}

::Ice::Object* Yk::upCast(::Yk::YkFepManager* p) { return p; }

namespace
{
const ::std::string __Yk__YkFepManager_ids[2] =
{
    "::Ice::Object",
    "::Yk::YkFepManager"
};

}

bool
Yk::YkFepManager::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Yk__YkFepManager_ids, __Yk__YkFepManager_ids + 2, _s);
}

::std::vector< ::std::string>
Yk::YkFepManager::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Yk__YkFepManager_ids[0], &__Yk__YkFepManager_ids[2]);
}

const ::std::string&
Yk::YkFepManager::ice_id(const ::Ice::Current&) const
{
    return __Yk__YkFepManager_ids[1];
}

const ::std::string&
Yk::YkFepManager::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::Yk::YkFepManager";
    return typeId;
#else
    return __Yk__YkFepManager_ids[1];
#endif
}

::Ice::DispatchStatus
Yk::YkFepManager::___select(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Yk::YkCommand __p_cmd;
    __is->read(__p_cmd);
    __inS.endReadParams();
    select(__p_cmd, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Yk::YkFepManager::___execute(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Yk::YkCommand __p_cmd;
    __is->read(__p_cmd);
    __inS.endReadParams();
    execute(__p_cmd, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Yk::YkFepManager::___cancel(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Yk::YkCommand __p_cmd;
    __is->read(__p_cmd);
    __inS.endReadParams();
    cancel(__p_cmd, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __Yk__YkFepManager_all[] =
{
    "cancel",
    "execute",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "select"
};

}

::Ice::DispatchStatus
Yk::YkFepManager::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__Yk__YkFepManager_all, __Yk__YkFepManager_all + 7, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __Yk__YkFepManager_all)
    {
        case 0:
        {
            return ___cancel(in, current);
        }
        case 1:
        {
            return ___execute(in, current);
        }
        case 2:
        {
            return ___ice_id(in, current);
        }
        case 3:
        {
            return ___ice_ids(in, current);
        }
        case 4:
        {
            return ___ice_isA(in, current);
        }
        case 5:
        {
            return ___ice_ping(in, current);
        }
        case 6:
        {
            return ___select(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
Yk::YkFepManager::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
Yk::YkFepManager::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
Yk::__patch(YkFepManagerPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Yk::YkFepManagerPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Yk::YkFepManager::ice_staticId(), v);
    }
}

::Ice::Object* Yk::upCast(::Yk::YkAppManager* p) { return p; }

namespace
{
const ::std::string __Yk__YkAppManager_ids[2] =
{
    "::Ice::Object",
    "::Yk::YkAppManager"
};

}

bool
Yk::YkAppManager::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Yk__YkAppManager_ids, __Yk__YkAppManager_ids + 2, _s);
}

::std::vector< ::std::string>
Yk::YkAppManager::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Yk__YkAppManager_ids[0], &__Yk__YkAppManager_ids[2]);
}

const ::std::string&
Yk::YkAppManager::ice_id(const ::Ice::Current&) const
{
    return __Yk__YkAppManager_ids[1];
}

const ::std::string&
Yk::YkAppManager::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::Yk::YkAppManager";
    return typeId;
#else
    return __Yk__YkAppManager_ids[1];
#endif
}

::Ice::DispatchStatus
Yk::YkAppManager::___selectEcho(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Yk::YkCommand __p_cmd;
    bool __p_flag;
    ::std::string __p_tip;
    __is->read(__p_cmd);
    __is->read(__p_flag);
    __is->read(__p_tip);
    __inS.endReadParams();
    selectEcho(__p_cmd, __p_flag, __p_tip, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Yk::YkAppManager::___selectReturn(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Yk::YkCommand __p_cmd;
    bool __p_flag;
    ::std::string __p_tip;
    __is->read(__p_cmd);
    __is->read(__p_flag);
    __is->read(__p_tip);
    __inS.endReadParams();
    selectReturn(__p_cmd, __p_flag, __p_tip, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Yk::YkAppManager::___executeEcho(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Yk::YkCommand __p_cmd;
    bool __p_flag;
    ::std::string __p_tip;
    __is->read(__p_cmd);
    __is->read(__p_flag);
    __is->read(__p_tip);
    __inS.endReadParams();
    executeEcho(__p_cmd, __p_flag, __p_tip, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Yk::YkAppManager::___executeReturn(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Yk::YkCommand __p_cmd;
    bool __p_flag;
    ::std::string __p_tip;
    __is->read(__p_cmd);
    __is->read(__p_flag);
    __is->read(__p_tip);
    __inS.endReadParams();
    executeReturn(__p_cmd, __p_flag, __p_tip, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Yk::YkAppManager::___cancelEcho(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Yk::YkCommand __p_cmd;
    bool __p_flag;
    ::std::string __p_tip;
    __is->read(__p_cmd);
    __is->read(__p_flag);
    __is->read(__p_tip);
    __inS.endReadParams();
    cancelEcho(__p_cmd, __p_flag, __p_tip, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Yk::YkAppManager::___cancelReturn(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Yk::YkCommand __p_cmd;
    bool __p_flag;
    ::std::string __p_tip;
    __is->read(__p_cmd);
    __is->read(__p_flag);
    __is->read(__p_tip);
    __inS.endReadParams();
    cancelReturn(__p_cmd, __p_flag, __p_tip, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __Yk__YkAppManager_all[] =
{
    "cancelEcho",
    "cancelReturn",
    "executeEcho",
    "executeReturn",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "selectEcho",
    "selectReturn"
};

}

::Ice::DispatchStatus
Yk::YkAppManager::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__Yk__YkAppManager_all, __Yk__YkAppManager_all + 10, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __Yk__YkAppManager_all)
    {
        case 0:
        {
            return ___cancelEcho(in, current);
        }
        case 1:
        {
            return ___cancelReturn(in, current);
        }
        case 2:
        {
            return ___executeEcho(in, current);
        }
        case 3:
        {
            return ___executeReturn(in, current);
        }
        case 4:
        {
            return ___ice_id(in, current);
        }
        case 5:
        {
            return ___ice_ids(in, current);
        }
        case 6:
        {
            return ___ice_isA(in, current);
        }
        case 7:
        {
            return ___ice_ping(in, current);
        }
        case 8:
        {
            return ___selectEcho(in, current);
        }
        case 9:
        {
            return ___selectReturn(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
Yk::YkAppManager::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
Yk::YkAppManager::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
Yk::__patch(YkAppManagerPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Yk::YkAppManagerPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Yk::YkAppManager::ice_staticId(), v);
    }
}
