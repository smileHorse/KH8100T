// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.4
//
// <auto-generated>
//
// Generated from file `fepdata.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __fepdata_h__
#define __fepdata_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/GCObject.h>
#include <Ice/AsyncResult.h>
#include <Ice/Incoming.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 306
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 4
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace FepData
{

class FepDataManager;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::FepData::FepDataManager>&);
::IceProxy::Ice::Object* upCast(::IceProxy::FepData::FepDataManager*);

}

}

namespace FepData
{

class FepDataManager;
::Ice::Object* upCast(::FepData::FepDataManager*);
typedef ::IceInternal::Handle< ::FepData::FepDataManager> FepDataManagerPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::FepData::FepDataManager> FepDataManagerPrx;
void __patch(FepDataManagerPtr&, const ::Ice::ObjectPtr&);

}

namespace FepData
{

enum DiscreteValue
{
    Open,
    Close,
    DblOpen,
    DblClose,
    Unknown
};

struct ChangedAnalog
{
    ::Ice::Long timeStamp;
    ::Ice::Short unitNo;
    ::Ice::Short index;
    ::Ice::Double value;
};

enum State
{
    NotInstall,
    OffLine,
    New,
    Run,
    Stop,
    HighErrorRate
};

enum StateValue
{
    disconnection,
    cutoff,
    connection,
    unknown2
};

struct Unit
{
    ::Ice::Short unitNo;
    ::FepData::State unitState;
    ::FepData::State channelState1;
    ::FepData::State channelState2;
    ::Ice::Byte channelNum;
    ::Ice::Byte currentNo;
    ::std::string gateWay;
    ::std::string rtuAddr;
    ::FepData::StateValue unitState1;
    ::std::string gateWay1;
    ::std::string rtuAddr1;
    ::FepData::StateValue unitState2;
    ::Ice::Byte errorRate;

    bool operator==(const Unit& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(unitNo != __rhs.unitNo)
        {
            return false;
        }
        if(unitState != __rhs.unitState)
        {
            return false;
        }
        if(channelState1 != __rhs.channelState1)
        {
            return false;
        }
        if(channelState2 != __rhs.channelState2)
        {
            return false;
        }
        if(channelNum != __rhs.channelNum)
        {
            return false;
        }
        if(currentNo != __rhs.currentNo)
        {
            return false;
        }
        if(gateWay != __rhs.gateWay)
        {
            return false;
        }
        if(rtuAddr != __rhs.rtuAddr)
        {
            return false;
        }
        if(unitState1 != __rhs.unitState1)
        {
            return false;
        }
        if(gateWay1 != __rhs.gateWay1)
        {
            return false;
        }
        if(rtuAddr1 != __rhs.rtuAddr1)
        {
            return false;
        }
        if(unitState2 != __rhs.unitState2)
        {
            return false;
        }
        if(errorRate != __rhs.errorRate)
        {
            return false;
        }
        return true;
    }

    bool operator<(const Unit& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(unitNo < __rhs.unitNo)
        {
            return true;
        }
        else if(__rhs.unitNo < unitNo)
        {
            return false;
        }
        if(unitState < __rhs.unitState)
        {
            return true;
        }
        else if(__rhs.unitState < unitState)
        {
            return false;
        }
        if(channelState1 < __rhs.channelState1)
        {
            return true;
        }
        else if(__rhs.channelState1 < channelState1)
        {
            return false;
        }
        if(channelState2 < __rhs.channelState2)
        {
            return true;
        }
        else if(__rhs.channelState2 < channelState2)
        {
            return false;
        }
        if(channelNum < __rhs.channelNum)
        {
            return true;
        }
        else if(__rhs.channelNum < channelNum)
        {
            return false;
        }
        if(currentNo < __rhs.currentNo)
        {
            return true;
        }
        else if(__rhs.currentNo < currentNo)
        {
            return false;
        }
        if(gateWay < __rhs.gateWay)
        {
            return true;
        }
        else if(__rhs.gateWay < gateWay)
        {
            return false;
        }
        if(rtuAddr < __rhs.rtuAddr)
        {
            return true;
        }
        else if(__rhs.rtuAddr < rtuAddr)
        {
            return false;
        }
        if(unitState1 < __rhs.unitState1)
        {
            return true;
        }
        else if(__rhs.unitState1 < unitState1)
        {
            return false;
        }
        if(gateWay1 < __rhs.gateWay1)
        {
            return true;
        }
        else if(__rhs.gateWay1 < gateWay1)
        {
            return false;
        }
        if(rtuAddr1 < __rhs.rtuAddr1)
        {
            return true;
        }
        else if(__rhs.rtuAddr1 < rtuAddr1)
        {
            return false;
        }
        if(unitState2 < __rhs.unitState2)
        {
            return true;
        }
        else if(__rhs.unitState2 < unitState2)
        {
            return false;
        }
        if(errorRate < __rhs.errorRate)
        {
            return true;
        }
        else if(__rhs.errorRate < errorRate)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const Unit& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const Unit& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const Unit& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const Unit& __rhs) const
    {
        return !operator<(__rhs);
    }
};

enum DataType
{
    AllDataType,
    ChangedAnalogType,
    AccumulatorType,
    UnitStateType
};

typedef ::std::vector< ::FepData::Unit> UnitSeq;

typedef ::std::vector< ::Ice::Double> AnalogSeq;

typedef ::std::vector< ::Ice::Int> DiscreteSeq;

typedef ::std::vector< ::Ice::Double> AccmulatorSeq;

typedef ::std::vector< ::FepData::ChangedAnalog> ChangedAnalogSeq;

struct DataPacket
{
    ::Ice::Byte id;
    ::std::string fepNode;
    ::std::string fepIP;
    ::FepData::DataType type;
    ::Ice::Short unitNo;
    ::FepData::UnitSeq units;
    ::FepData::AnalogSeq analogs;
    ::FepData::DiscreteSeq discretes;
    ::FepData::AccmulatorSeq accmulators;
    ::FepData::ChangedAnalogSeq changedAnalogs;
};

typedef ::std::vector< ::Ice::Short> FaultValueSeq;

struct FaultEvent
{
    ::Ice::Short unitNo;
    ::Ice::Long timeStamp;
    ::Ice::Short source;
    ::Ice::Short eventType;
    ::Ice::Short directionFlag;
    ::Ice::Short faultType;
    ::Ice::Short lineNo;
    ::Ice::Short duration;
    ::Ice::Short direction;
    ::Ice::Short distance;
    ::Ice::Short directionMultiplier;
    ::Ice::Short credibility;
    ::Ice::Short v0Amp;
    ::Ice::Short waveType;
    ::FepData::FaultValueSeq values;
};

typedef ::std::vector< ::FepData::FaultEvent> FaultEvents;

struct FaultPacket
{
    ::Ice::Byte id;
    ::std::string fepNode;
    ::FepData::FaultEvents events;
};

struct ChangedDigital
{
    ::Ice::Short unitNo;
    ::Ice::Short index;
    ::FepData::DiscreteValue value;
    ::Ice::Long timeStamp;

    bool operator==(const ChangedDigital& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(unitNo != __rhs.unitNo)
        {
            return false;
        }
        if(index != __rhs.index)
        {
            return false;
        }
        if(value != __rhs.value)
        {
            return false;
        }
        if(timeStamp != __rhs.timeStamp)
        {
            return false;
        }
        return true;
    }

    bool operator<(const ChangedDigital& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(unitNo < __rhs.unitNo)
        {
            return true;
        }
        else if(__rhs.unitNo < unitNo)
        {
            return false;
        }
        if(index < __rhs.index)
        {
            return true;
        }
        else if(__rhs.index < index)
        {
            return false;
        }
        if(value < __rhs.value)
        {
            return true;
        }
        else if(__rhs.value < value)
        {
            return false;
        }
        if(timeStamp < __rhs.timeStamp)
        {
            return true;
        }
        else if(__rhs.timeStamp < timeStamp)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const ChangedDigital& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const ChangedDigital& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const ChangedDigital& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const ChangedDigital& __rhs) const
    {
        return !operator<(__rhs);
    }
};

struct Soe
{
    ::Ice::Short unitNo;
    ::Ice::Short index;
    ::FepData::DiscreteValue value;
    ::Ice::Long timeStamp;
    bool IsYK;

    bool operator==(const Soe& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(unitNo != __rhs.unitNo)
        {
            return false;
        }
        if(index != __rhs.index)
        {
            return false;
        }
        if(value != __rhs.value)
        {
            return false;
        }
        if(timeStamp != __rhs.timeStamp)
        {
            return false;
        }
        if(IsYK != __rhs.IsYK)
        {
            return false;
        }
        return true;
    }

    bool operator<(const Soe& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(unitNo < __rhs.unitNo)
        {
            return true;
        }
        else if(__rhs.unitNo < unitNo)
        {
            return false;
        }
        if(index < __rhs.index)
        {
            return true;
        }
        else if(__rhs.index < index)
        {
            return false;
        }
        if(value < __rhs.value)
        {
            return true;
        }
        else if(__rhs.value < value)
        {
            return false;
        }
        if(timeStamp < __rhs.timeStamp)
        {
            return true;
        }
        else if(__rhs.timeStamp < timeStamp)
        {
            return false;
        }
        if(IsYK < __rhs.IsYK)
        {
            return true;
        }
        else if(__rhs.IsYK < IsYK)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const Soe& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const Soe& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const Soe& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const Soe& __rhs) const
    {
        return !operator<(__rhs);
    }
};

enum ProEventType
{
    ProtectAction,
    ProtectAlarm
};

struct ProValue
{
    ::Ice::Short index;
    ::Ice::Double value;
};

typedef ::std::vector< ::FepData::ProValue> ProValues;

struct ProtectEvent
{
    ::Ice::Short unitNo;
    ::FepData::ProEventType Type;
    ::Ice::Long timeStamp;
    ::Ice::Short moduleNo;
    ::Ice::Short moduleType;
    ::Ice::Short infoNo;
    ::Ice::Short state;
    ::FepData::ProValues values;
    bool manualData;
};

struct ChangedUnit
{
    ::Ice::Short unitNo;
    ::FepData::State unitState;
    ::FepData::State channelState1;
    ::FepData::State channelState2;
    ::Ice::Byte errorRate;
    ::Ice::Long timeStamp;

    bool operator==(const ChangedUnit& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(unitNo != __rhs.unitNo)
        {
            return false;
        }
        if(unitState != __rhs.unitState)
        {
            return false;
        }
        if(channelState1 != __rhs.channelState1)
        {
            return false;
        }
        if(channelState2 != __rhs.channelState2)
        {
            return false;
        }
        if(errorRate != __rhs.errorRate)
        {
            return false;
        }
        if(timeStamp != __rhs.timeStamp)
        {
            return false;
        }
        return true;
    }

    bool operator<(const ChangedUnit& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(unitNo < __rhs.unitNo)
        {
            return true;
        }
        else if(__rhs.unitNo < unitNo)
        {
            return false;
        }
        if(unitState < __rhs.unitState)
        {
            return true;
        }
        else if(__rhs.unitState < unitState)
        {
            return false;
        }
        if(channelState1 < __rhs.channelState1)
        {
            return true;
        }
        else if(__rhs.channelState1 < channelState1)
        {
            return false;
        }
        if(channelState2 < __rhs.channelState2)
        {
            return true;
        }
        else if(__rhs.channelState2 < channelState2)
        {
            return false;
        }
        if(errorRate < __rhs.errorRate)
        {
            return true;
        }
        else if(__rhs.errorRate < errorRate)
        {
            return false;
        }
        if(timeStamp < __rhs.timeStamp)
        {
            return true;
        }
        else if(__rhs.timeStamp < timeStamp)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const ChangedUnit& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const ChangedUnit& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const ChangedUnit& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const ChangedUnit& __rhs) const
    {
        return !operator<(__rhs);
    }
};

enum ChannelEventType
{
    ChannelSwitch,
    ChannelRun
};

struct UnitChannel
{
    ::Ice::Short unitNo;
    ::FepData::ChannelEventType type;
    ::Ice::Byte channelNo;
    ::Ice::Byte channelState;
    ::Ice::Long timeStamp;

    bool operator==(const UnitChannel& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(unitNo != __rhs.unitNo)
        {
            return false;
        }
        if(type != __rhs.type)
        {
            return false;
        }
        if(channelNo != __rhs.channelNo)
        {
            return false;
        }
        if(channelState != __rhs.channelState)
        {
            return false;
        }
        if(timeStamp != __rhs.timeStamp)
        {
            return false;
        }
        return true;
    }

    bool operator<(const UnitChannel& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(unitNo < __rhs.unitNo)
        {
            return true;
        }
        else if(__rhs.unitNo < unitNo)
        {
            return false;
        }
        if(type < __rhs.type)
        {
            return true;
        }
        else if(__rhs.type < type)
        {
            return false;
        }
        if(channelNo < __rhs.channelNo)
        {
            return true;
        }
        else if(__rhs.channelNo < channelNo)
        {
            return false;
        }
        if(channelState < __rhs.channelState)
        {
            return true;
        }
        else if(__rhs.channelState < channelState)
        {
            return false;
        }
        if(timeStamp < __rhs.timeStamp)
        {
            return true;
        }
        else if(__rhs.timeStamp < timeStamp)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const UnitChannel& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const UnitChannel& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const UnitChannel& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const UnitChannel& __rhs) const
    {
        return !operator<(__rhs);
    }
};

enum EventType
{
    YxType,
    SoeType,
    UnitType,
    ProType,
    ChannelType
};

typedef ::std::vector< ::FepData::ChangedDigital> ChangedDigitalSeq;

typedef ::std::vector< ::FepData::Soe> SoeSeq;

typedef ::std::vector< ::FepData::ProtectEvent> ProtectEventSeq;

typedef ::std::vector< ::FepData::ChangedUnit> ChangedUnitSeq;

typedef ::std::vector< ::FepData::UnitChannel> ChangedUnitChannelSeq;

struct EventPacket
{
    ::Ice::Int id;
    ::std::string fepNode;
    ::std::string fepIP;
    ::FepData::EventType type;
    ::FepData::ChangedDigitalSeq digitals;
    ::FepData::SoeSeq soes;
    ::FepData::ProtectEventSeq protects;
    ::FepData::ChangedUnitSeq units;
    ::FepData::ChangedUnitChannelSeq channels;
};

typedef ::std::vector< ::Ice::Short> WaveValueSeq;

struct WaveEvent
{
    ::Ice::Short unitNo;
    ::Ice::Long timeStamp;
    ::Ice::Short source;
    ::Ice::Short eventType;
    ::Ice::Short directionFlag;
    ::Ice::Short faultType;
    ::Ice::Short lineNo;
    ::Ice::Short duration;
    ::Ice::Short direction;
    ::Ice::Short distance;
    ::Ice::Short directionMultiplier;
    ::Ice::Short credibility;
    ::Ice::Short v0Amp;
    ::Ice::Short waveType;
    ::FepData::WaveValueSeq values;
};

typedef ::std::vector< ::FepData::WaveEvent> WaveEvents;

struct WavePacket
{
    ::Ice::Byte id;
    ::std::string fepNode;
    ::FepData::WaveEvents events;
};

const ::std::string strDataTopic = "fep_data_event";

}

namespace Ice
{
template<>
struct StreamableTraits< ::FepData::DiscreteValue>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 4;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::FepData::ChangedAnalog>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 20;
    static const bool fixedLength = true;
};

template<class S>
struct StreamWriter< ::FepData::ChangedAnalog, S>
{
    static void write(S* __os, const ::FepData::ChangedAnalog& v)
    {
        __os->write(v.timeStamp);
        __os->write(v.unitNo);
        __os->write(v.index);
        __os->write(v.value);
    }
};

template<class S>
struct StreamReader< ::FepData::ChangedAnalog, S>
{
    static void read(S* __is, ::FepData::ChangedAnalog& v)
    {
        __is->read(v.timeStamp);
        __is->read(v.unitNo);
        __is->read(v.index);
        __is->read(v.value);
    }
};

template<>
struct StreamableTraits< ::FepData::State>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 5;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::FepData::StateValue>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 3;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::FepData::Unit>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 14;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::FepData::Unit, S>
{
    static void write(S* __os, const ::FepData::Unit& v)
    {
        __os->write(v.unitNo);
        __os->write(v.unitState);
        __os->write(v.channelState1);
        __os->write(v.channelState2);
        __os->write(v.channelNum);
        __os->write(v.currentNo);
        __os->write(v.gateWay);
        __os->write(v.rtuAddr);
        __os->write(v.unitState1);
        __os->write(v.gateWay1);
        __os->write(v.rtuAddr1);
        __os->write(v.unitState2);
        __os->write(v.errorRate);
    }
};

template<class S>
struct StreamReader< ::FepData::Unit, S>
{
    static void read(S* __is, ::FepData::Unit& v)
    {
        __is->read(v.unitNo);
        __is->read(v.unitState);
        __is->read(v.channelState1);
        __is->read(v.channelState2);
        __is->read(v.channelNum);
        __is->read(v.currentNo);
        __is->read(v.gateWay);
        __is->read(v.rtuAddr);
        __is->read(v.unitState1);
        __is->read(v.gateWay1);
        __is->read(v.rtuAddr1);
        __is->read(v.unitState2);
        __is->read(v.errorRate);
    }
};

template<>
struct StreamableTraits< ::FepData::DataType>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 3;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::FepData::DataPacket>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 11;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::FepData::DataPacket, S>
{
    static void write(S* __os, const ::FepData::DataPacket& v)
    {
        __os->write(v.id);
        __os->write(v.fepNode);
        __os->write(v.fepIP);
        __os->write(v.type);
        __os->write(v.unitNo);
        __os->write(v.units);
        __os->write(v.analogs);
        __os->write(v.discretes);
        __os->write(v.accmulators);
        __os->write(v.changedAnalogs);
    }
};

template<class S>
struct StreamReader< ::FepData::DataPacket, S>
{
    static void read(S* __is, ::FepData::DataPacket& v)
    {
        __is->read(v.id);
        __is->read(v.fepNode);
        __is->read(v.fepIP);
        __is->read(v.type);
        __is->read(v.unitNo);
        __is->read(v.units);
        __is->read(v.analogs);
        __is->read(v.discretes);
        __is->read(v.accmulators);
        __is->read(v.changedAnalogs);
    }
};

template<>
struct StreamableTraits< ::FepData::FaultEvent>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 35;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::FepData::FaultEvent, S>
{
    static void write(S* __os, const ::FepData::FaultEvent& v)
    {
        __os->write(v.unitNo);
        __os->write(v.timeStamp);
        __os->write(v.source);
        __os->write(v.eventType);
        __os->write(v.directionFlag);
        __os->write(v.faultType);
        __os->write(v.lineNo);
        __os->write(v.duration);
        __os->write(v.direction);
        __os->write(v.distance);
        __os->write(v.directionMultiplier);
        __os->write(v.credibility);
        __os->write(v.v0Amp);
        __os->write(v.waveType);
        __os->write(v.values);
    }
};

template<class S>
struct StreamReader< ::FepData::FaultEvent, S>
{
    static void read(S* __is, ::FepData::FaultEvent& v)
    {
        __is->read(v.unitNo);
        __is->read(v.timeStamp);
        __is->read(v.source);
        __is->read(v.eventType);
        __is->read(v.directionFlag);
        __is->read(v.faultType);
        __is->read(v.lineNo);
        __is->read(v.duration);
        __is->read(v.direction);
        __is->read(v.distance);
        __is->read(v.directionMultiplier);
        __is->read(v.credibility);
        __is->read(v.v0Amp);
        __is->read(v.waveType);
        __is->read(v.values);
    }
};

template<>
struct StreamableTraits< ::FepData::FaultPacket>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 3;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::FepData::FaultPacket, S>
{
    static void write(S* __os, const ::FepData::FaultPacket& v)
    {
        __os->write(v.id);
        __os->write(v.fepNode);
        __os->write(v.events);
    }
};

template<class S>
struct StreamReader< ::FepData::FaultPacket, S>
{
    static void read(S* __is, ::FepData::FaultPacket& v)
    {
        __is->read(v.id);
        __is->read(v.fepNode);
        __is->read(v.events);
    }
};

template<>
struct StreamableTraits< ::FepData::ChangedDigital>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 13;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::FepData::ChangedDigital, S>
{
    static void write(S* __os, const ::FepData::ChangedDigital& v)
    {
        __os->write(v.unitNo);
        __os->write(v.index);
        __os->write(v.value);
        __os->write(v.timeStamp);
    }
};

template<class S>
struct StreamReader< ::FepData::ChangedDigital, S>
{
    static void read(S* __is, ::FepData::ChangedDigital& v)
    {
        __is->read(v.unitNo);
        __is->read(v.index);
        __is->read(v.value);
        __is->read(v.timeStamp);
    }
};

template<>
struct StreamableTraits< ::FepData::Soe>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 14;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::FepData::Soe, S>
{
    static void write(S* __os, const ::FepData::Soe& v)
    {
        __os->write(v.unitNo);
        __os->write(v.index);
        __os->write(v.value);
        __os->write(v.timeStamp);
        __os->write(v.IsYK);
    }
};

template<class S>
struct StreamReader< ::FepData::Soe, S>
{
    static void read(S* __is, ::FepData::Soe& v)
    {
        __is->read(v.unitNo);
        __is->read(v.index);
        __is->read(v.value);
        __is->read(v.timeStamp);
        __is->read(v.IsYK);
    }
};

template<>
struct StreamableTraits< ::FepData::ProEventType>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 1;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::FepData::ProValue>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 10;
    static const bool fixedLength = true;
};

template<class S>
struct StreamWriter< ::FepData::ProValue, S>
{
    static void write(S* __os, const ::FepData::ProValue& v)
    {
        __os->write(v.index);
        __os->write(v.value);
    }
};

template<class S>
struct StreamReader< ::FepData::ProValue, S>
{
    static void read(S* __is, ::FepData::ProValue& v)
    {
        __is->read(v.index);
        __is->read(v.value);
    }
};

template<>
struct StreamableTraits< ::FepData::ProtectEvent>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 21;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::FepData::ProtectEvent, S>
{
    static void write(S* __os, const ::FepData::ProtectEvent& v)
    {
        __os->write(v.unitNo);
        __os->write(v.Type);
        __os->write(v.timeStamp);
        __os->write(v.moduleNo);
        __os->write(v.moduleType);
        __os->write(v.infoNo);
        __os->write(v.state);
        __os->write(v.values);
        __os->write(v.manualData);
    }
};

template<class S>
struct StreamReader< ::FepData::ProtectEvent, S>
{
    static void read(S* __is, ::FepData::ProtectEvent& v)
    {
        __is->read(v.unitNo);
        __is->read(v.Type);
        __is->read(v.timeStamp);
        __is->read(v.moduleNo);
        __is->read(v.moduleType);
        __is->read(v.infoNo);
        __is->read(v.state);
        __is->read(v.values);
        __is->read(v.manualData);
    }
};

template<>
struct StreamableTraits< ::FepData::ChangedUnit>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 14;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::FepData::ChangedUnit, S>
{
    static void write(S* __os, const ::FepData::ChangedUnit& v)
    {
        __os->write(v.unitNo);
        __os->write(v.unitState);
        __os->write(v.channelState1);
        __os->write(v.channelState2);
        __os->write(v.errorRate);
        __os->write(v.timeStamp);
    }
};

template<class S>
struct StreamReader< ::FepData::ChangedUnit, S>
{
    static void read(S* __is, ::FepData::ChangedUnit& v)
    {
        __is->read(v.unitNo);
        __is->read(v.unitState);
        __is->read(v.channelState1);
        __is->read(v.channelState2);
        __is->read(v.errorRate);
        __is->read(v.timeStamp);
    }
};

template<>
struct StreamableTraits< ::FepData::ChannelEventType>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 1;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::FepData::UnitChannel>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 13;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::FepData::UnitChannel, S>
{
    static void write(S* __os, const ::FepData::UnitChannel& v)
    {
        __os->write(v.unitNo);
        __os->write(v.type);
        __os->write(v.channelNo);
        __os->write(v.channelState);
        __os->write(v.timeStamp);
    }
};

template<class S>
struct StreamReader< ::FepData::UnitChannel, S>
{
    static void read(S* __is, ::FepData::UnitChannel& v)
    {
        __is->read(v.unitNo);
        __is->read(v.type);
        __is->read(v.channelNo);
        __is->read(v.channelState);
        __is->read(v.timeStamp);
    }
};

template<>
struct StreamableTraits< ::FepData::EventType>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 4;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::FepData::EventPacket>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 12;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::FepData::EventPacket, S>
{
    static void write(S* __os, const ::FepData::EventPacket& v)
    {
        __os->write(v.id);
        __os->write(v.fepNode);
        __os->write(v.fepIP);
        __os->write(v.type);
        __os->write(v.digitals);
        __os->write(v.soes);
        __os->write(v.protects);
        __os->write(v.units);
        __os->write(v.channels);
    }
};

template<class S>
struct StreamReader< ::FepData::EventPacket, S>
{
    static void read(S* __is, ::FepData::EventPacket& v)
    {
        __is->read(v.id);
        __is->read(v.fepNode);
        __is->read(v.fepIP);
        __is->read(v.type);
        __is->read(v.digitals);
        __is->read(v.soes);
        __is->read(v.protects);
        __is->read(v.units);
        __is->read(v.channels);
    }
};

template<>
struct StreamableTraits< ::FepData::WaveEvent>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 35;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::FepData::WaveEvent, S>
{
    static void write(S* __os, const ::FepData::WaveEvent& v)
    {
        __os->write(v.unitNo);
        __os->write(v.timeStamp);
        __os->write(v.source);
        __os->write(v.eventType);
        __os->write(v.directionFlag);
        __os->write(v.faultType);
        __os->write(v.lineNo);
        __os->write(v.duration);
        __os->write(v.direction);
        __os->write(v.distance);
        __os->write(v.directionMultiplier);
        __os->write(v.credibility);
        __os->write(v.v0Amp);
        __os->write(v.waveType);
        __os->write(v.values);
    }
};

template<class S>
struct StreamReader< ::FepData::WaveEvent, S>
{
    static void read(S* __is, ::FepData::WaveEvent& v)
    {
        __is->read(v.unitNo);
        __is->read(v.timeStamp);
        __is->read(v.source);
        __is->read(v.eventType);
        __is->read(v.directionFlag);
        __is->read(v.faultType);
        __is->read(v.lineNo);
        __is->read(v.duration);
        __is->read(v.direction);
        __is->read(v.distance);
        __is->read(v.directionMultiplier);
        __is->read(v.credibility);
        __is->read(v.v0Amp);
        __is->read(v.waveType);
        __is->read(v.values);
    }
};

template<>
struct StreamableTraits< ::FepData::WavePacket>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 3;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::FepData::WavePacket, S>
{
    static void write(S* __os, const ::FepData::WavePacket& v)
    {
        __os->write(v.id);
        __os->write(v.fepNode);
        __os->write(v.events);
    }
};

template<class S>
struct StreamReader< ::FepData::WavePacket, S>
{
    static void read(S* __is, ::FepData::WavePacket& v)
    {
        __is->read(v.id);
        __is->read(v.fepNode);
        __is->read(v.events);
    }
};

}

namespace FepData
{

class Callback_FepDataManager_processData_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FepDataManager_processData_Base> Callback_FepDataManager_processDataPtr;

class Callback_FepDataManager_processFault_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FepDataManager_processFault_Base> Callback_FepDataManager_processFaultPtr;

class Callback_FepDataManager_processEvent_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FepDataManager_processEvent_Base> Callback_FepDataManager_processEventPtr;

class Callback_FepDataManager_processWave_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FepDataManager_processWave_Base> Callback_FepDataManager_processWavePtr;

}

namespace IceProxy
{

namespace FepData
{

class FepDataManager : virtual public ::IceProxy::Ice::Object
{
public:

    void processData(const ::FepData::DataPacket& __p_aDataPacket)
    {
        processData(__p_aDataPacket, 0);
    }
    void processData(const ::FepData::DataPacket& __p_aDataPacket, const ::Ice::Context& __ctx)
    {
        processData(__p_aDataPacket, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_processData(const ::FepData::DataPacket& __p_aDataPacket, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_processData(__p_aDataPacket, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_processData(const ::FepData::DataPacket& __p_aDataPacket, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_processData(__p_aDataPacket, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_processData(const ::FepData::DataPacket& __p_aDataPacket, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_processData(__p_aDataPacket, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_processData(const ::FepData::DataPacket& __p_aDataPacket, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_processData(__p_aDataPacket, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_processData(const ::FepData::DataPacket& __p_aDataPacket)
    {
        return begin_processData(__p_aDataPacket, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_processData(const ::FepData::DataPacket& __p_aDataPacket, const ::Ice::Context& __ctx)
    {
        return begin_processData(__p_aDataPacket, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_processData(const ::FepData::DataPacket& __p_aDataPacket, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_processData(__p_aDataPacket, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_processData(const ::FepData::DataPacket& __p_aDataPacket, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_processData(__p_aDataPacket, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_processData(const ::FepData::DataPacket& __p_aDataPacket, const ::FepData::Callback_FepDataManager_processDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_processData(__p_aDataPacket, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_processData(const ::FepData::DataPacket& __p_aDataPacket, const ::Ice::Context& __ctx, const ::FepData::Callback_FepDataManager_processDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_processData(__p_aDataPacket, &__ctx, __del, __cookie);
    }

    void end_processData(const ::Ice::AsyncResultPtr&);
    
private:

    void processData(const ::FepData::DataPacket&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_processData(const ::FepData::DataPacket&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void processFault(const ::FepData::FaultPacket& __p_aFaultPacket)
    {
        processFault(__p_aFaultPacket, 0);
    }
    void processFault(const ::FepData::FaultPacket& __p_aFaultPacket, const ::Ice::Context& __ctx)
    {
        processFault(__p_aFaultPacket, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_processFault(const ::FepData::FaultPacket& __p_aFaultPacket, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_processFault(__p_aFaultPacket, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_processFault(const ::FepData::FaultPacket& __p_aFaultPacket, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_processFault(__p_aFaultPacket, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_processFault(const ::FepData::FaultPacket& __p_aFaultPacket, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_processFault(__p_aFaultPacket, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_processFault(const ::FepData::FaultPacket& __p_aFaultPacket, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_processFault(__p_aFaultPacket, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_processFault(const ::FepData::FaultPacket& __p_aFaultPacket)
    {
        return begin_processFault(__p_aFaultPacket, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_processFault(const ::FepData::FaultPacket& __p_aFaultPacket, const ::Ice::Context& __ctx)
    {
        return begin_processFault(__p_aFaultPacket, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_processFault(const ::FepData::FaultPacket& __p_aFaultPacket, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_processFault(__p_aFaultPacket, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_processFault(const ::FepData::FaultPacket& __p_aFaultPacket, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_processFault(__p_aFaultPacket, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_processFault(const ::FepData::FaultPacket& __p_aFaultPacket, const ::FepData::Callback_FepDataManager_processFaultPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_processFault(__p_aFaultPacket, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_processFault(const ::FepData::FaultPacket& __p_aFaultPacket, const ::Ice::Context& __ctx, const ::FepData::Callback_FepDataManager_processFaultPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_processFault(__p_aFaultPacket, &__ctx, __del, __cookie);
    }

    void end_processFault(const ::Ice::AsyncResultPtr&);
    
private:

    void processFault(const ::FepData::FaultPacket&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_processFault(const ::FepData::FaultPacket&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void processEvent(const ::FepData::EventPacket& __p_aEventPacket)
    {
        processEvent(__p_aEventPacket, 0);
    }
    void processEvent(const ::FepData::EventPacket& __p_aEventPacket, const ::Ice::Context& __ctx)
    {
        processEvent(__p_aEventPacket, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_processEvent(const ::FepData::EventPacket& __p_aEventPacket, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_processEvent(__p_aEventPacket, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_processEvent(const ::FepData::EventPacket& __p_aEventPacket, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_processEvent(__p_aEventPacket, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_processEvent(const ::FepData::EventPacket& __p_aEventPacket, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_processEvent(__p_aEventPacket, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_processEvent(const ::FepData::EventPacket& __p_aEventPacket, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_processEvent(__p_aEventPacket, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_processEvent(const ::FepData::EventPacket& __p_aEventPacket)
    {
        return begin_processEvent(__p_aEventPacket, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_processEvent(const ::FepData::EventPacket& __p_aEventPacket, const ::Ice::Context& __ctx)
    {
        return begin_processEvent(__p_aEventPacket, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_processEvent(const ::FepData::EventPacket& __p_aEventPacket, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_processEvent(__p_aEventPacket, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_processEvent(const ::FepData::EventPacket& __p_aEventPacket, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_processEvent(__p_aEventPacket, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_processEvent(const ::FepData::EventPacket& __p_aEventPacket, const ::FepData::Callback_FepDataManager_processEventPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_processEvent(__p_aEventPacket, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_processEvent(const ::FepData::EventPacket& __p_aEventPacket, const ::Ice::Context& __ctx, const ::FepData::Callback_FepDataManager_processEventPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_processEvent(__p_aEventPacket, &__ctx, __del, __cookie);
    }

    void end_processEvent(const ::Ice::AsyncResultPtr&);
    
private:

    void processEvent(const ::FepData::EventPacket&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_processEvent(const ::FepData::EventPacket&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void processWave(const ::FepData::WavePacket& __p_aWavePacket)
    {
        processWave(__p_aWavePacket, 0);
    }
    void processWave(const ::FepData::WavePacket& __p_aWavePacket, const ::Ice::Context& __ctx)
    {
        processWave(__p_aWavePacket, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_processWave(const ::FepData::WavePacket& __p_aWavePacket, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_processWave(__p_aWavePacket, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_processWave(const ::FepData::WavePacket& __p_aWavePacket, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_processWave(__p_aWavePacket, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_processWave(const ::FepData::WavePacket& __p_aWavePacket, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_processWave(__p_aWavePacket, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_processWave(const ::FepData::WavePacket& __p_aWavePacket, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_processWave(__p_aWavePacket, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_processWave(const ::FepData::WavePacket& __p_aWavePacket)
    {
        return begin_processWave(__p_aWavePacket, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_processWave(const ::FepData::WavePacket& __p_aWavePacket, const ::Ice::Context& __ctx)
    {
        return begin_processWave(__p_aWavePacket, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_processWave(const ::FepData::WavePacket& __p_aWavePacket, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_processWave(__p_aWavePacket, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_processWave(const ::FepData::WavePacket& __p_aWavePacket, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_processWave(__p_aWavePacket, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_processWave(const ::FepData::WavePacket& __p_aWavePacket, const ::FepData::Callback_FepDataManager_processWavePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_processWave(__p_aWavePacket, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_processWave(const ::FepData::WavePacket& __p_aWavePacket, const ::Ice::Context& __ctx, const ::FepData::Callback_FepDataManager_processWavePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_processWave(__p_aWavePacket, &__ctx, __del, __cookie);
    }

    void end_processWave(const ::Ice::AsyncResultPtr&);
    
private:

    void processWave(const ::FepData::WavePacket&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_processWave(const ::FepData::WavePacket&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<FepDataManager> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<FepDataManager*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<FepDataManager> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<FepDataManager*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<FepDataManager> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<FepDataManager*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<FepDataManager> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<FepDataManager*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<FepDataManager> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<FepDataManager*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<FepDataManager> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<FepDataManager*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<FepDataManager> ice_secure(bool __secure) const
    {
        return dynamic_cast<FepDataManager*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<FepDataManager> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<FepDataManager*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<FepDataManager> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<FepDataManager*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<FepDataManager> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<FepDataManager*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<FepDataManager> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<FepDataManager*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<FepDataManager> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<FepDataManager*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<FepDataManager> ice_twoway() const
    {
        return dynamic_cast<FepDataManager*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<FepDataManager> ice_oneway() const
    {
        return dynamic_cast<FepDataManager*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<FepDataManager> ice_batchOneway() const
    {
        return dynamic_cast<FepDataManager*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<FepDataManager> ice_datagram() const
    {
        return dynamic_cast<FepDataManager*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<FepDataManager> ice_batchDatagram() const
    {
        return dynamic_cast<FepDataManager*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<FepDataManager> ice_compress(bool __compress) const
    {
        return dynamic_cast<FepDataManager*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<FepDataManager> ice_timeout(int __timeout) const
    {
        return dynamic_cast<FepDataManager*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<FepDataManager> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<FepDataManager*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<FepDataManager> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<FepDataManager*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace FepData
{

class FepDataManager : virtual public ::Ice::Object
{
public:

    typedef FepDataManagerPrx ProxyType;
    typedef FepDataManagerPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void processData(const ::FepData::DataPacket&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___processData(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void processFault(const ::FepData::FaultPacket&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___processFault(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void processEvent(const ::FepData::EventPacket&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___processEvent(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void processWave(const ::FepData::WavePacket&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___processWave(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
};

inline bool operator==(const FepDataManager& l, const FepDataManager& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const FepDataManager& l, const FepDataManager& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace FepData
{

template<class T>
class CallbackNC_FepDataManager_processData : public Callback_FepDataManager_processData_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_FepDataManager_processData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_FepDataManager_processDataPtr
newCallback_FepDataManager_processData(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FepDataManager_processData<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FepDataManager_processDataPtr
newCallback_FepDataManager_processData(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FepDataManager_processData<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_FepDataManager_processDataPtr
newCallback_FepDataManager_processData(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FepDataManager_processData<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FepDataManager_processDataPtr
newCallback_FepDataManager_processData(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FepDataManager_processData<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_FepDataManager_processData : public Callback_FepDataManager_processData_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_FepDataManager_processData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_FepDataManager_processDataPtr
newCallback_FepDataManager_processData(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FepDataManager_processData<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FepDataManager_processDataPtr
newCallback_FepDataManager_processData(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FepDataManager_processData<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_FepDataManager_processDataPtr
newCallback_FepDataManager_processData(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FepDataManager_processData<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FepDataManager_processDataPtr
newCallback_FepDataManager_processData(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FepDataManager_processData<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_FepDataManager_processFault : public Callback_FepDataManager_processFault_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_FepDataManager_processFault(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_FepDataManager_processFaultPtr
newCallback_FepDataManager_processFault(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FepDataManager_processFault<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FepDataManager_processFaultPtr
newCallback_FepDataManager_processFault(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FepDataManager_processFault<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_FepDataManager_processFaultPtr
newCallback_FepDataManager_processFault(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FepDataManager_processFault<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FepDataManager_processFaultPtr
newCallback_FepDataManager_processFault(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FepDataManager_processFault<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_FepDataManager_processFault : public Callback_FepDataManager_processFault_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_FepDataManager_processFault(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_FepDataManager_processFaultPtr
newCallback_FepDataManager_processFault(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FepDataManager_processFault<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FepDataManager_processFaultPtr
newCallback_FepDataManager_processFault(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FepDataManager_processFault<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_FepDataManager_processFaultPtr
newCallback_FepDataManager_processFault(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FepDataManager_processFault<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FepDataManager_processFaultPtr
newCallback_FepDataManager_processFault(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FepDataManager_processFault<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_FepDataManager_processEvent : public Callback_FepDataManager_processEvent_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_FepDataManager_processEvent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_FepDataManager_processEventPtr
newCallback_FepDataManager_processEvent(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FepDataManager_processEvent<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FepDataManager_processEventPtr
newCallback_FepDataManager_processEvent(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FepDataManager_processEvent<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_FepDataManager_processEventPtr
newCallback_FepDataManager_processEvent(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FepDataManager_processEvent<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FepDataManager_processEventPtr
newCallback_FepDataManager_processEvent(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FepDataManager_processEvent<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_FepDataManager_processEvent : public Callback_FepDataManager_processEvent_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_FepDataManager_processEvent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_FepDataManager_processEventPtr
newCallback_FepDataManager_processEvent(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FepDataManager_processEvent<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FepDataManager_processEventPtr
newCallback_FepDataManager_processEvent(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FepDataManager_processEvent<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_FepDataManager_processEventPtr
newCallback_FepDataManager_processEvent(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FepDataManager_processEvent<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FepDataManager_processEventPtr
newCallback_FepDataManager_processEvent(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FepDataManager_processEvent<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_FepDataManager_processWave : public Callback_FepDataManager_processWave_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_FepDataManager_processWave(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_FepDataManager_processWavePtr
newCallback_FepDataManager_processWave(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FepDataManager_processWave<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FepDataManager_processWavePtr
newCallback_FepDataManager_processWave(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FepDataManager_processWave<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_FepDataManager_processWavePtr
newCallback_FepDataManager_processWave(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FepDataManager_processWave<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FepDataManager_processWavePtr
newCallback_FepDataManager_processWave(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FepDataManager_processWave<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_FepDataManager_processWave : public Callback_FepDataManager_processWave_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_FepDataManager_processWave(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_FepDataManager_processWavePtr
newCallback_FepDataManager_processWave(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FepDataManager_processWave<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FepDataManager_processWavePtr
newCallback_FepDataManager_processWave(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FepDataManager_processWave<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_FepDataManager_processWavePtr
newCallback_FepDataManager_processWave(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FepDataManager_processWave<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FepDataManager_processWavePtr
newCallback_FepDataManager_processWave(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FepDataManager_processWave<T, CT>(instance, 0, excb, sentcb);
}

}

#include <IceUtil/PopDisableWarnings.h>
#endif
