// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.4
//
// <auto-generated>
//
// Generated from file `ykdata.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __ykdata_h__
#define __ykdata_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/GCObject.h>
#include <Ice/AsyncResult.h>
#include <Ice/Incoming.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 306
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 4
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace Yk
{

class YkMmiManager;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Yk::YkMmiManager>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Yk::YkMmiManager*);

class YkFepManager;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Yk::YkFepManager>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Yk::YkFepManager*);

class YkAppManager;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Yk::YkAppManager>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Yk::YkAppManager*);

}

}

namespace Yk
{

class YkMmiManager;
::Ice::Object* upCast(::Yk::YkMmiManager*);
typedef ::IceInternal::Handle< ::Yk::YkMmiManager> YkMmiManagerPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Yk::YkMmiManager> YkMmiManagerPrx;
void __patch(YkMmiManagerPtr&, const ::Ice::ObjectPtr&);

class YkFepManager;
::Ice::Object* upCast(::Yk::YkFepManager*);
typedef ::IceInternal::Handle< ::Yk::YkFepManager> YkFepManagerPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Yk::YkFepManager> YkFepManagerPrx;
void __patch(YkFepManagerPtr&, const ::Ice::ObjectPtr&);

class YkAppManager;
::Ice::Object* upCast(::Yk::YkAppManager*);
typedef ::IceInternal::Handle< ::Yk::YkAppManager> YkAppManagerPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Yk::YkAppManager> YkAppManagerPrx;
void __patch(YkAppManagerPtr&, const ::Ice::ObjectPtr&);

}

namespace Yk
{

enum YkValue
{
    Open,
    Close
};

enum YkStep
{
    Select,
    FepRecvSelect,
    SelectReturn,
    Execute,
    FepRecvExecute,
    ExecuteReturn,
    Cancel,
    FepRecvCancel,
    CancelReturn
};

enum YkType
{
    SelectBeforeOperate,
    DirectlyOperate,
    PowerTransformerOperate
};

struct YkCommand
{
    ::Yk::YkStep step;
    ::Yk::YkType type;
    ::Ice::Int requestId;
    ::std::string rID;
    ::Ice::Short unitNo;
    ::Ice::Short ykNo;
    ::Ice::Short yxIndex;
    ::Yk::YkValue value;
    ::Ice::Int waitTime;

    bool operator==(const YkCommand& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(step != __rhs.step)
        {
            return false;
        }
        if(type != __rhs.type)
        {
            return false;
        }
        if(requestId != __rhs.requestId)
        {
            return false;
        }
        if(rID != __rhs.rID)
        {
            return false;
        }
        if(unitNo != __rhs.unitNo)
        {
            return false;
        }
        if(ykNo != __rhs.ykNo)
        {
            return false;
        }
        if(yxIndex != __rhs.yxIndex)
        {
            return false;
        }
        if(value != __rhs.value)
        {
            return false;
        }
        if(waitTime != __rhs.waitTime)
        {
            return false;
        }
        return true;
    }

    bool operator<(const YkCommand& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(step < __rhs.step)
        {
            return true;
        }
        else if(__rhs.step < step)
        {
            return false;
        }
        if(type < __rhs.type)
        {
            return true;
        }
        else if(__rhs.type < type)
        {
            return false;
        }
        if(requestId < __rhs.requestId)
        {
            return true;
        }
        else if(__rhs.requestId < requestId)
        {
            return false;
        }
        if(rID < __rhs.rID)
        {
            return true;
        }
        else if(__rhs.rID < rID)
        {
            return false;
        }
        if(unitNo < __rhs.unitNo)
        {
            return true;
        }
        else if(__rhs.unitNo < unitNo)
        {
            return false;
        }
        if(ykNo < __rhs.ykNo)
        {
            return true;
        }
        else if(__rhs.ykNo < ykNo)
        {
            return false;
        }
        if(yxIndex < __rhs.yxIndex)
        {
            return true;
        }
        else if(__rhs.yxIndex < yxIndex)
        {
            return false;
        }
        if(value < __rhs.value)
        {
            return true;
        }
        else if(__rhs.value < value)
        {
            return false;
        }
        if(waitTime < __rhs.waitTime)
        {
            return true;
        }
        else if(__rhs.waitTime < waitTime)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const YkCommand& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const YkCommand& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const YkCommand& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const YkCommand& __rhs) const
    {
        return !operator<(__rhs);
    }
};

struct YkRequestMsg
{
    ::Ice::Int requestId;
    ::Ice::Short unitNo;
    ::Yk::YkStep step;
    ::std::string breakerRid;
    ::Ice::Short breakerControlID;
    ::Yk::YkValue breakerNormalValue;
    ::std::string oper;
    bool isAgree;
    ::std::string yxType;

    bool operator==(const YkRequestMsg& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(requestId != __rhs.requestId)
        {
            return false;
        }
        if(unitNo != __rhs.unitNo)
        {
            return false;
        }
        if(step != __rhs.step)
        {
            return false;
        }
        if(breakerRid != __rhs.breakerRid)
        {
            return false;
        }
        if(breakerControlID != __rhs.breakerControlID)
        {
            return false;
        }
        if(breakerNormalValue != __rhs.breakerNormalValue)
        {
            return false;
        }
        if(oper != __rhs.oper)
        {
            return false;
        }
        if(isAgree != __rhs.isAgree)
        {
            return false;
        }
        if(yxType != __rhs.yxType)
        {
            return false;
        }
        return true;
    }

    bool operator<(const YkRequestMsg& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(requestId < __rhs.requestId)
        {
            return true;
        }
        else if(__rhs.requestId < requestId)
        {
            return false;
        }
        if(unitNo < __rhs.unitNo)
        {
            return true;
        }
        else if(__rhs.unitNo < unitNo)
        {
            return false;
        }
        if(step < __rhs.step)
        {
            return true;
        }
        else if(__rhs.step < step)
        {
            return false;
        }
        if(breakerRid < __rhs.breakerRid)
        {
            return true;
        }
        else if(__rhs.breakerRid < breakerRid)
        {
            return false;
        }
        if(breakerControlID < __rhs.breakerControlID)
        {
            return true;
        }
        else if(__rhs.breakerControlID < breakerControlID)
        {
            return false;
        }
        if(breakerNormalValue < __rhs.breakerNormalValue)
        {
            return true;
        }
        else if(__rhs.breakerNormalValue < breakerNormalValue)
        {
            return false;
        }
        if(oper < __rhs.oper)
        {
            return true;
        }
        else if(__rhs.oper < oper)
        {
            return false;
        }
        if(isAgree < __rhs.isAgree)
        {
            return true;
        }
        else if(__rhs.isAgree < isAgree)
        {
            return false;
        }
        if(yxType < __rhs.yxType)
        {
            return true;
        }
        else if(__rhs.yxType < yxType)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const YkRequestMsg& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const YkRequestMsg& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const YkRequestMsg& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const YkRequestMsg& __rhs) const
    {
        return !operator<(__rhs);
    }
};

struct YtRequestMsg
{
    ::Ice::Int requestId;
    ::Ice::Short unitNo;
    ::Ice::Int step;
    ::std::string subname;
    ::std::string byqname;
    ::Ice::Short curNo;
    ::std::string oper;
    bool isAgree;

    bool operator==(const YtRequestMsg& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(requestId != __rhs.requestId)
        {
            return false;
        }
        if(unitNo != __rhs.unitNo)
        {
            return false;
        }
        if(step != __rhs.step)
        {
            return false;
        }
        if(subname != __rhs.subname)
        {
            return false;
        }
        if(byqname != __rhs.byqname)
        {
            return false;
        }
        if(curNo != __rhs.curNo)
        {
            return false;
        }
        if(oper != __rhs.oper)
        {
            return false;
        }
        if(isAgree != __rhs.isAgree)
        {
            return false;
        }
        return true;
    }

    bool operator<(const YtRequestMsg& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(requestId < __rhs.requestId)
        {
            return true;
        }
        else if(__rhs.requestId < requestId)
        {
            return false;
        }
        if(unitNo < __rhs.unitNo)
        {
            return true;
        }
        else if(__rhs.unitNo < unitNo)
        {
            return false;
        }
        if(step < __rhs.step)
        {
            return true;
        }
        else if(__rhs.step < step)
        {
            return false;
        }
        if(subname < __rhs.subname)
        {
            return true;
        }
        else if(__rhs.subname < subname)
        {
            return false;
        }
        if(byqname < __rhs.byqname)
        {
            return true;
        }
        else if(__rhs.byqname < byqname)
        {
            return false;
        }
        if(curNo < __rhs.curNo)
        {
            return true;
        }
        else if(__rhs.curNo < curNo)
        {
            return false;
        }
        if(oper < __rhs.oper)
        {
            return true;
        }
        else if(__rhs.oper < oper)
        {
            return false;
        }
        if(isAgree < __rhs.isAgree)
        {
            return true;
        }
        else if(__rhs.isAgree < isAgree)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const YtRequestMsg& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const YtRequestMsg& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const YtRequestMsg& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const YtRequestMsg& __rhs) const
    {
        return !operator<(__rhs);
    }
};

struct settingInfo
{
    ::Ice::Int no;
    ::std::string name;
    ::std::string val;
    ::std::string dw;
    ::std::string type;
    ::std::string val1;
    ::std::string val2;
    ::std::string val3;
    ::std::string val4;

    bool operator==(const settingInfo& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(no != __rhs.no)
        {
            return false;
        }
        if(name != __rhs.name)
        {
            return false;
        }
        if(val != __rhs.val)
        {
            return false;
        }
        if(dw != __rhs.dw)
        {
            return false;
        }
        if(type != __rhs.type)
        {
            return false;
        }
        if(val1 != __rhs.val1)
        {
            return false;
        }
        if(val2 != __rhs.val2)
        {
            return false;
        }
        if(val3 != __rhs.val3)
        {
            return false;
        }
        if(val4 != __rhs.val4)
        {
            return false;
        }
        return true;
    }

    bool operator<(const settingInfo& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(no < __rhs.no)
        {
            return true;
        }
        else if(__rhs.no < no)
        {
            return false;
        }
        if(name < __rhs.name)
        {
            return true;
        }
        else if(__rhs.name < name)
        {
            return false;
        }
        if(val < __rhs.val)
        {
            return true;
        }
        else if(__rhs.val < val)
        {
            return false;
        }
        if(dw < __rhs.dw)
        {
            return true;
        }
        else if(__rhs.dw < dw)
        {
            return false;
        }
        if(type < __rhs.type)
        {
            return true;
        }
        else if(__rhs.type < type)
        {
            return false;
        }
        if(val1 < __rhs.val1)
        {
            return true;
        }
        else if(__rhs.val1 < val1)
        {
            return false;
        }
        if(val2 < __rhs.val2)
        {
            return true;
        }
        else if(__rhs.val2 < val2)
        {
            return false;
        }
        if(val3 < __rhs.val3)
        {
            return true;
        }
        else if(__rhs.val3 < val3)
        {
            return false;
        }
        if(val4 < __rhs.val4)
        {
            return true;
        }
        else if(__rhs.val4 < val4)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const settingInfo& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const settingInfo& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const settingInfo& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const settingInfo& __rhs) const
    {
        return !operator<(__rhs);
    }
};

typedef ::std::vector< ::Yk::settingInfo> settingInfoVect;

struct SettingMsg
{
    ::Ice::Int requestId;
    ::std::string unitName;
    ::std::string selectFun;
    ::std::string funType;
    ::std::string devFactory;
    ::std::string proectType;
    ::std::string settingType;
    ::Yk::settingInfoVect setInfoVect;
    bool isAgree;
};

const ::std::string YkMmiTopic = "yk_mmi_operation";

const ::std::string YkFepTopic = "yk_fep_operation";

const ::std::string YkAppTopic = "yk_app_operation";

}

namespace Ice
{
template<>
struct StreamableTraits< ::Yk::YkValue>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 1;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::Yk::YkStep>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 8;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::Yk::YkType>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 2;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::Yk::YkCommand>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 18;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::Yk::YkCommand, S>
{
    static void write(S* __os, const ::Yk::YkCommand& v)
    {
        __os->write(v.step);
        __os->write(v.type);
        __os->write(v.requestId);
        __os->write(v.rID);
        __os->write(v.unitNo);
        __os->write(v.ykNo);
        __os->write(v.yxIndex);
        __os->write(v.value);
        __os->write(v.waitTime);
    }
};

template<class S>
struct StreamReader< ::Yk::YkCommand, S>
{
    static void read(S* __is, ::Yk::YkCommand& v)
    {
        __is->read(v.step);
        __is->read(v.type);
        __is->read(v.requestId);
        __is->read(v.rID);
        __is->read(v.unitNo);
        __is->read(v.ykNo);
        __is->read(v.yxIndex);
        __is->read(v.value);
        __is->read(v.waitTime);
    }
};

template<>
struct StreamableTraits< ::Yk::YkRequestMsg>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 14;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::Yk::YkRequestMsg, S>
{
    static void write(S* __os, const ::Yk::YkRequestMsg& v)
    {
        __os->write(v.requestId);
        __os->write(v.unitNo);
        __os->write(v.step);
        __os->write(v.breakerRid);
        __os->write(v.breakerControlID);
        __os->write(v.breakerNormalValue);
        __os->write(v.oper);
        __os->write(v.isAgree);
        __os->write(v.yxType);
    }
};

template<class S>
struct StreamReader< ::Yk::YkRequestMsg, S>
{
    static void read(S* __is, ::Yk::YkRequestMsg& v)
    {
        __is->read(v.requestId);
        __is->read(v.unitNo);
        __is->read(v.step);
        __is->read(v.breakerRid);
        __is->read(v.breakerControlID);
        __is->read(v.breakerNormalValue);
        __is->read(v.oper);
        __is->read(v.isAgree);
        __is->read(v.yxType);
    }
};

template<>
struct StreamableTraits< ::Yk::YtRequestMsg>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 16;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::Yk::YtRequestMsg, S>
{
    static void write(S* __os, const ::Yk::YtRequestMsg& v)
    {
        __os->write(v.requestId);
        __os->write(v.unitNo);
        __os->write(v.step);
        __os->write(v.subname);
        __os->write(v.byqname);
        __os->write(v.curNo);
        __os->write(v.oper);
        __os->write(v.isAgree);
    }
};

template<class S>
struct StreamReader< ::Yk::YtRequestMsg, S>
{
    static void read(S* __is, ::Yk::YtRequestMsg& v)
    {
        __is->read(v.requestId);
        __is->read(v.unitNo);
        __is->read(v.step);
        __is->read(v.subname);
        __is->read(v.byqname);
        __is->read(v.curNo);
        __is->read(v.oper);
        __is->read(v.isAgree);
    }
};

template<>
struct StreamableTraits< ::Yk::settingInfo>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 12;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::Yk::settingInfo, S>
{
    static void write(S* __os, const ::Yk::settingInfo& v)
    {
        __os->write(v.no);
        __os->write(v.name);
        __os->write(v.val);
        __os->write(v.dw);
        __os->write(v.type);
        __os->write(v.val1);
        __os->write(v.val2);
        __os->write(v.val3);
        __os->write(v.val4);
    }
};

template<class S>
struct StreamReader< ::Yk::settingInfo, S>
{
    static void read(S* __is, ::Yk::settingInfo& v)
    {
        __is->read(v.no);
        __is->read(v.name);
        __is->read(v.val);
        __is->read(v.dw);
        __is->read(v.type);
        __is->read(v.val1);
        __is->read(v.val2);
        __is->read(v.val3);
        __is->read(v.val4);
    }
};

template<>
struct StreamableTraits< ::Yk::SettingMsg>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 12;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::Yk::SettingMsg, S>
{
    static void write(S* __os, const ::Yk::SettingMsg& v)
    {
        __os->write(v.requestId);
        __os->write(v.unitName);
        __os->write(v.selectFun);
        __os->write(v.funType);
        __os->write(v.devFactory);
        __os->write(v.proectType);
        __os->write(v.settingType);
        __os->write(v.setInfoVect);
        __os->write(v.isAgree);
    }
};

template<class S>
struct StreamReader< ::Yk::SettingMsg, S>
{
    static void read(S* __is, ::Yk::SettingMsg& v)
    {
        __is->read(v.requestId);
        __is->read(v.unitName);
        __is->read(v.selectFun);
        __is->read(v.funType);
        __is->read(v.devFactory);
        __is->read(v.proectType);
        __is->read(v.settingType);
        __is->read(v.setInfoVect);
        __is->read(v.isAgree);
    }
};

}

namespace Yk
{

class Callback_YkMmiManager_sendYkRequest_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_YkMmiManager_sendYkRequest_Base> Callback_YkMmiManager_sendYkRequestPtr;

class Callback_YkMmiManager_sendValidateRequest_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_YkMmiManager_sendValidateRequest_Base> Callback_YkMmiManager_sendValidateRequestPtr;

class Callback_YkMmiManager_sendYtRequest_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_YkMmiManager_sendYtRequest_Base> Callback_YkMmiManager_sendYtRequestPtr;

class Callback_YkMmiManager_sendValidateYtRequest_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_YkMmiManager_sendValidateYtRequest_Base> Callback_YkMmiManager_sendValidateYtRequestPtr;

class Callback_YkMmiManager_sendSettingRequest_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_YkMmiManager_sendSettingRequest_Base> Callback_YkMmiManager_sendSettingRequestPtr;

class Callback_YkMmiManager_sendValidateSettingRequest_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_YkMmiManager_sendValidateSettingRequest_Base> Callback_YkMmiManager_sendValidateSettingRequestPtr;

class Callback_YkFepManager_select_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_YkFepManager_select_Base> Callback_YkFepManager_selectPtr;

class Callback_YkFepManager_execute_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_YkFepManager_execute_Base> Callback_YkFepManager_executePtr;

class Callback_YkFepManager_cancel_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_YkFepManager_cancel_Base> Callback_YkFepManager_cancelPtr;

class Callback_YkAppManager_selectEcho_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_YkAppManager_selectEcho_Base> Callback_YkAppManager_selectEchoPtr;

class Callback_YkAppManager_selectReturn_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_YkAppManager_selectReturn_Base> Callback_YkAppManager_selectReturnPtr;

class Callback_YkAppManager_executeEcho_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_YkAppManager_executeEcho_Base> Callback_YkAppManager_executeEchoPtr;

class Callback_YkAppManager_executeReturn_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_YkAppManager_executeReturn_Base> Callback_YkAppManager_executeReturnPtr;

class Callback_YkAppManager_cancelEcho_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_YkAppManager_cancelEcho_Base> Callback_YkAppManager_cancelEchoPtr;

class Callback_YkAppManager_cancelReturn_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_YkAppManager_cancelReturn_Base> Callback_YkAppManager_cancelReturnPtr;

}

namespace IceProxy
{

namespace Yk
{

class YkMmiManager : virtual public ::IceProxy::Ice::Object
{
public:

    void sendYkRequest(const ::Yk::YkRequestMsg& __p_msg)
    {
        sendYkRequest(__p_msg, 0);
    }
    void sendYkRequest(const ::Yk::YkRequestMsg& __p_msg, const ::Ice::Context& __ctx)
    {
        sendYkRequest(__p_msg, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_sendYkRequest(const ::Yk::YkRequestMsg& __p_msg, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_sendYkRequest(__p_msg, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_sendYkRequest(const ::Yk::YkRequestMsg& __p_msg, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_sendYkRequest(__p_msg, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_sendYkRequest(const ::Yk::YkRequestMsg& __p_msg, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_sendYkRequest(__p_msg, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_sendYkRequest(const ::Yk::YkRequestMsg& __p_msg, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_sendYkRequest(__p_msg, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_sendYkRequest(const ::Yk::YkRequestMsg& __p_msg)
    {
        return begin_sendYkRequest(__p_msg, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sendYkRequest(const ::Yk::YkRequestMsg& __p_msg, const ::Ice::Context& __ctx)
    {
        return begin_sendYkRequest(__p_msg, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sendYkRequest(const ::Yk::YkRequestMsg& __p_msg, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendYkRequest(__p_msg, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sendYkRequest(const ::Yk::YkRequestMsg& __p_msg, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendYkRequest(__p_msg, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sendYkRequest(const ::Yk::YkRequestMsg& __p_msg, const ::Yk::Callback_YkMmiManager_sendYkRequestPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendYkRequest(__p_msg, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sendYkRequest(const ::Yk::YkRequestMsg& __p_msg, const ::Ice::Context& __ctx, const ::Yk::Callback_YkMmiManager_sendYkRequestPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendYkRequest(__p_msg, &__ctx, __del, __cookie);
    }

    void end_sendYkRequest(const ::Ice::AsyncResultPtr&);
    
private:

    void sendYkRequest(const ::Yk::YkRequestMsg&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_sendYkRequest(const ::Yk::YkRequestMsg&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void sendValidateRequest(const ::Yk::YkRequestMsg& __p_msg)
    {
        sendValidateRequest(__p_msg, 0);
    }
    void sendValidateRequest(const ::Yk::YkRequestMsg& __p_msg, const ::Ice::Context& __ctx)
    {
        sendValidateRequest(__p_msg, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_sendValidateRequest(const ::Yk::YkRequestMsg& __p_msg, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_sendValidateRequest(__p_msg, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_sendValidateRequest(const ::Yk::YkRequestMsg& __p_msg, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_sendValidateRequest(__p_msg, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_sendValidateRequest(const ::Yk::YkRequestMsg& __p_msg, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_sendValidateRequest(__p_msg, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_sendValidateRequest(const ::Yk::YkRequestMsg& __p_msg, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_sendValidateRequest(__p_msg, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_sendValidateRequest(const ::Yk::YkRequestMsg& __p_msg)
    {
        return begin_sendValidateRequest(__p_msg, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sendValidateRequest(const ::Yk::YkRequestMsg& __p_msg, const ::Ice::Context& __ctx)
    {
        return begin_sendValidateRequest(__p_msg, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sendValidateRequest(const ::Yk::YkRequestMsg& __p_msg, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendValidateRequest(__p_msg, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sendValidateRequest(const ::Yk::YkRequestMsg& __p_msg, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendValidateRequest(__p_msg, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sendValidateRequest(const ::Yk::YkRequestMsg& __p_msg, const ::Yk::Callback_YkMmiManager_sendValidateRequestPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendValidateRequest(__p_msg, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sendValidateRequest(const ::Yk::YkRequestMsg& __p_msg, const ::Ice::Context& __ctx, const ::Yk::Callback_YkMmiManager_sendValidateRequestPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendValidateRequest(__p_msg, &__ctx, __del, __cookie);
    }

    void end_sendValidateRequest(const ::Ice::AsyncResultPtr&);
    
private:

    void sendValidateRequest(const ::Yk::YkRequestMsg&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_sendValidateRequest(const ::Yk::YkRequestMsg&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void sendYtRequest(const ::Yk::YtRequestMsg& __p_msg)
    {
        sendYtRequest(__p_msg, 0);
    }
    void sendYtRequest(const ::Yk::YtRequestMsg& __p_msg, const ::Ice::Context& __ctx)
    {
        sendYtRequest(__p_msg, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_sendYtRequest(const ::Yk::YtRequestMsg& __p_msg, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_sendYtRequest(__p_msg, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_sendYtRequest(const ::Yk::YtRequestMsg& __p_msg, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_sendYtRequest(__p_msg, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_sendYtRequest(const ::Yk::YtRequestMsg& __p_msg, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_sendYtRequest(__p_msg, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_sendYtRequest(const ::Yk::YtRequestMsg& __p_msg, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_sendYtRequest(__p_msg, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_sendYtRequest(const ::Yk::YtRequestMsg& __p_msg)
    {
        return begin_sendYtRequest(__p_msg, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sendYtRequest(const ::Yk::YtRequestMsg& __p_msg, const ::Ice::Context& __ctx)
    {
        return begin_sendYtRequest(__p_msg, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sendYtRequest(const ::Yk::YtRequestMsg& __p_msg, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendYtRequest(__p_msg, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sendYtRequest(const ::Yk::YtRequestMsg& __p_msg, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendYtRequest(__p_msg, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sendYtRequest(const ::Yk::YtRequestMsg& __p_msg, const ::Yk::Callback_YkMmiManager_sendYtRequestPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendYtRequest(__p_msg, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sendYtRequest(const ::Yk::YtRequestMsg& __p_msg, const ::Ice::Context& __ctx, const ::Yk::Callback_YkMmiManager_sendYtRequestPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendYtRequest(__p_msg, &__ctx, __del, __cookie);
    }

    void end_sendYtRequest(const ::Ice::AsyncResultPtr&);
    
private:

    void sendYtRequest(const ::Yk::YtRequestMsg&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_sendYtRequest(const ::Yk::YtRequestMsg&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void sendValidateYtRequest(const ::Yk::YtRequestMsg& __p_msg)
    {
        sendValidateYtRequest(__p_msg, 0);
    }
    void sendValidateYtRequest(const ::Yk::YtRequestMsg& __p_msg, const ::Ice::Context& __ctx)
    {
        sendValidateYtRequest(__p_msg, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_sendValidateYtRequest(const ::Yk::YtRequestMsg& __p_msg, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_sendValidateYtRequest(__p_msg, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_sendValidateYtRequest(const ::Yk::YtRequestMsg& __p_msg, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_sendValidateYtRequest(__p_msg, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_sendValidateYtRequest(const ::Yk::YtRequestMsg& __p_msg, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_sendValidateYtRequest(__p_msg, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_sendValidateYtRequest(const ::Yk::YtRequestMsg& __p_msg, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_sendValidateYtRequest(__p_msg, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_sendValidateYtRequest(const ::Yk::YtRequestMsg& __p_msg)
    {
        return begin_sendValidateYtRequest(__p_msg, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sendValidateYtRequest(const ::Yk::YtRequestMsg& __p_msg, const ::Ice::Context& __ctx)
    {
        return begin_sendValidateYtRequest(__p_msg, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sendValidateYtRequest(const ::Yk::YtRequestMsg& __p_msg, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendValidateYtRequest(__p_msg, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sendValidateYtRequest(const ::Yk::YtRequestMsg& __p_msg, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendValidateYtRequest(__p_msg, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sendValidateYtRequest(const ::Yk::YtRequestMsg& __p_msg, const ::Yk::Callback_YkMmiManager_sendValidateYtRequestPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendValidateYtRequest(__p_msg, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sendValidateYtRequest(const ::Yk::YtRequestMsg& __p_msg, const ::Ice::Context& __ctx, const ::Yk::Callback_YkMmiManager_sendValidateYtRequestPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendValidateYtRequest(__p_msg, &__ctx, __del, __cookie);
    }

    void end_sendValidateYtRequest(const ::Ice::AsyncResultPtr&);
    
private:

    void sendValidateYtRequest(const ::Yk::YtRequestMsg&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_sendValidateYtRequest(const ::Yk::YtRequestMsg&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void sendSettingRequest(const ::Yk::SettingMsg& __p_msg)
    {
        sendSettingRequest(__p_msg, 0);
    }
    void sendSettingRequest(const ::Yk::SettingMsg& __p_msg, const ::Ice::Context& __ctx)
    {
        sendSettingRequest(__p_msg, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_sendSettingRequest(const ::Yk::SettingMsg& __p_msg, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_sendSettingRequest(__p_msg, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_sendSettingRequest(const ::Yk::SettingMsg& __p_msg, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_sendSettingRequest(__p_msg, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_sendSettingRequest(const ::Yk::SettingMsg& __p_msg, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_sendSettingRequest(__p_msg, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_sendSettingRequest(const ::Yk::SettingMsg& __p_msg, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_sendSettingRequest(__p_msg, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_sendSettingRequest(const ::Yk::SettingMsg& __p_msg)
    {
        return begin_sendSettingRequest(__p_msg, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sendSettingRequest(const ::Yk::SettingMsg& __p_msg, const ::Ice::Context& __ctx)
    {
        return begin_sendSettingRequest(__p_msg, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sendSettingRequest(const ::Yk::SettingMsg& __p_msg, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendSettingRequest(__p_msg, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sendSettingRequest(const ::Yk::SettingMsg& __p_msg, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendSettingRequest(__p_msg, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sendSettingRequest(const ::Yk::SettingMsg& __p_msg, const ::Yk::Callback_YkMmiManager_sendSettingRequestPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendSettingRequest(__p_msg, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sendSettingRequest(const ::Yk::SettingMsg& __p_msg, const ::Ice::Context& __ctx, const ::Yk::Callback_YkMmiManager_sendSettingRequestPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendSettingRequest(__p_msg, &__ctx, __del, __cookie);
    }

    void end_sendSettingRequest(const ::Ice::AsyncResultPtr&);
    
private:

    void sendSettingRequest(const ::Yk::SettingMsg&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_sendSettingRequest(const ::Yk::SettingMsg&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void sendValidateSettingRequest(const ::Yk::SettingMsg& __p_msg)
    {
        sendValidateSettingRequest(__p_msg, 0);
    }
    void sendValidateSettingRequest(const ::Yk::SettingMsg& __p_msg, const ::Ice::Context& __ctx)
    {
        sendValidateSettingRequest(__p_msg, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_sendValidateSettingRequest(const ::Yk::SettingMsg& __p_msg, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_sendValidateSettingRequest(__p_msg, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_sendValidateSettingRequest(const ::Yk::SettingMsg& __p_msg, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_sendValidateSettingRequest(__p_msg, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_sendValidateSettingRequest(const ::Yk::SettingMsg& __p_msg, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_sendValidateSettingRequest(__p_msg, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_sendValidateSettingRequest(const ::Yk::SettingMsg& __p_msg, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_sendValidateSettingRequest(__p_msg, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_sendValidateSettingRequest(const ::Yk::SettingMsg& __p_msg)
    {
        return begin_sendValidateSettingRequest(__p_msg, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sendValidateSettingRequest(const ::Yk::SettingMsg& __p_msg, const ::Ice::Context& __ctx)
    {
        return begin_sendValidateSettingRequest(__p_msg, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sendValidateSettingRequest(const ::Yk::SettingMsg& __p_msg, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendValidateSettingRequest(__p_msg, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sendValidateSettingRequest(const ::Yk::SettingMsg& __p_msg, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendValidateSettingRequest(__p_msg, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sendValidateSettingRequest(const ::Yk::SettingMsg& __p_msg, const ::Yk::Callback_YkMmiManager_sendValidateSettingRequestPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendValidateSettingRequest(__p_msg, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sendValidateSettingRequest(const ::Yk::SettingMsg& __p_msg, const ::Ice::Context& __ctx, const ::Yk::Callback_YkMmiManager_sendValidateSettingRequestPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendValidateSettingRequest(__p_msg, &__ctx, __del, __cookie);
    }

    void end_sendValidateSettingRequest(const ::Ice::AsyncResultPtr&);
    
private:

    void sendValidateSettingRequest(const ::Yk::SettingMsg&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_sendValidateSettingRequest(const ::Yk::SettingMsg&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<YkMmiManager> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<YkMmiManager*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<YkMmiManager> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<YkMmiManager*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<YkMmiManager> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<YkMmiManager*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<YkMmiManager> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<YkMmiManager*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<YkMmiManager> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<YkMmiManager*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<YkMmiManager> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<YkMmiManager*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<YkMmiManager> ice_secure(bool __secure) const
    {
        return dynamic_cast<YkMmiManager*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<YkMmiManager> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<YkMmiManager*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<YkMmiManager> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<YkMmiManager*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<YkMmiManager> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<YkMmiManager*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<YkMmiManager> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<YkMmiManager*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<YkMmiManager> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<YkMmiManager*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<YkMmiManager> ice_twoway() const
    {
        return dynamic_cast<YkMmiManager*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<YkMmiManager> ice_oneway() const
    {
        return dynamic_cast<YkMmiManager*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<YkMmiManager> ice_batchOneway() const
    {
        return dynamic_cast<YkMmiManager*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<YkMmiManager> ice_datagram() const
    {
        return dynamic_cast<YkMmiManager*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<YkMmiManager> ice_batchDatagram() const
    {
        return dynamic_cast<YkMmiManager*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<YkMmiManager> ice_compress(bool __compress) const
    {
        return dynamic_cast<YkMmiManager*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<YkMmiManager> ice_timeout(int __timeout) const
    {
        return dynamic_cast<YkMmiManager*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<YkMmiManager> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<YkMmiManager*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<YkMmiManager> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<YkMmiManager*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class YkFepManager : virtual public ::IceProxy::Ice::Object
{
public:

    void select(const ::Yk::YkCommand& __p_cmd)
    {
        select(__p_cmd, 0);
    }
    void select(const ::Yk::YkCommand& __p_cmd, const ::Ice::Context& __ctx)
    {
        select(__p_cmd, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_select(const ::Yk::YkCommand& __p_cmd, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_select(__p_cmd, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_select(const ::Yk::YkCommand& __p_cmd, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_select(__p_cmd, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_select(const ::Yk::YkCommand& __p_cmd, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_select(__p_cmd, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_select(const ::Yk::YkCommand& __p_cmd, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_select(__p_cmd, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_select(const ::Yk::YkCommand& __p_cmd)
    {
        return begin_select(__p_cmd, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_select(const ::Yk::YkCommand& __p_cmd, const ::Ice::Context& __ctx)
    {
        return begin_select(__p_cmd, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_select(const ::Yk::YkCommand& __p_cmd, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_select(__p_cmd, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_select(const ::Yk::YkCommand& __p_cmd, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_select(__p_cmd, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_select(const ::Yk::YkCommand& __p_cmd, const ::Yk::Callback_YkFepManager_selectPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_select(__p_cmd, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_select(const ::Yk::YkCommand& __p_cmd, const ::Ice::Context& __ctx, const ::Yk::Callback_YkFepManager_selectPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_select(__p_cmd, &__ctx, __del, __cookie);
    }

    void end_select(const ::Ice::AsyncResultPtr&);
    
private:

    void select(const ::Yk::YkCommand&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_select(const ::Yk::YkCommand&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void execute(const ::Yk::YkCommand& __p_cmd)
    {
        execute(__p_cmd, 0);
    }
    void execute(const ::Yk::YkCommand& __p_cmd, const ::Ice::Context& __ctx)
    {
        execute(__p_cmd, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_execute(const ::Yk::YkCommand& __p_cmd, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_execute(__p_cmd, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_execute(const ::Yk::YkCommand& __p_cmd, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_execute(__p_cmd, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_execute(const ::Yk::YkCommand& __p_cmd, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_execute(__p_cmd, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_execute(const ::Yk::YkCommand& __p_cmd, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_execute(__p_cmd, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_execute(const ::Yk::YkCommand& __p_cmd)
    {
        return begin_execute(__p_cmd, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_execute(const ::Yk::YkCommand& __p_cmd, const ::Ice::Context& __ctx)
    {
        return begin_execute(__p_cmd, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_execute(const ::Yk::YkCommand& __p_cmd, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_execute(__p_cmd, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_execute(const ::Yk::YkCommand& __p_cmd, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_execute(__p_cmd, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_execute(const ::Yk::YkCommand& __p_cmd, const ::Yk::Callback_YkFepManager_executePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_execute(__p_cmd, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_execute(const ::Yk::YkCommand& __p_cmd, const ::Ice::Context& __ctx, const ::Yk::Callback_YkFepManager_executePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_execute(__p_cmd, &__ctx, __del, __cookie);
    }

    void end_execute(const ::Ice::AsyncResultPtr&);
    
private:

    void execute(const ::Yk::YkCommand&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_execute(const ::Yk::YkCommand&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void cancel(const ::Yk::YkCommand& __p_cmd)
    {
        cancel(__p_cmd, 0);
    }
    void cancel(const ::Yk::YkCommand& __p_cmd, const ::Ice::Context& __ctx)
    {
        cancel(__p_cmd, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_cancel(const ::Yk::YkCommand& __p_cmd, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_cancel(__p_cmd, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_cancel(const ::Yk::YkCommand& __p_cmd, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_cancel(__p_cmd, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_cancel(const ::Yk::YkCommand& __p_cmd, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_cancel(__p_cmd, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_cancel(const ::Yk::YkCommand& __p_cmd, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_cancel(__p_cmd, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_cancel(const ::Yk::YkCommand& __p_cmd)
    {
        return begin_cancel(__p_cmd, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_cancel(const ::Yk::YkCommand& __p_cmd, const ::Ice::Context& __ctx)
    {
        return begin_cancel(__p_cmd, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_cancel(const ::Yk::YkCommand& __p_cmd, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_cancel(__p_cmd, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_cancel(const ::Yk::YkCommand& __p_cmd, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_cancel(__p_cmd, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_cancel(const ::Yk::YkCommand& __p_cmd, const ::Yk::Callback_YkFepManager_cancelPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_cancel(__p_cmd, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_cancel(const ::Yk::YkCommand& __p_cmd, const ::Ice::Context& __ctx, const ::Yk::Callback_YkFepManager_cancelPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_cancel(__p_cmd, &__ctx, __del, __cookie);
    }

    void end_cancel(const ::Ice::AsyncResultPtr&);
    
private:

    void cancel(const ::Yk::YkCommand&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_cancel(const ::Yk::YkCommand&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<YkFepManager> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<YkFepManager*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<YkFepManager> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<YkFepManager*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<YkFepManager> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<YkFepManager*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<YkFepManager> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<YkFepManager*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<YkFepManager> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<YkFepManager*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<YkFepManager> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<YkFepManager*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<YkFepManager> ice_secure(bool __secure) const
    {
        return dynamic_cast<YkFepManager*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<YkFepManager> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<YkFepManager*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<YkFepManager> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<YkFepManager*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<YkFepManager> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<YkFepManager*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<YkFepManager> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<YkFepManager*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<YkFepManager> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<YkFepManager*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<YkFepManager> ice_twoway() const
    {
        return dynamic_cast<YkFepManager*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<YkFepManager> ice_oneway() const
    {
        return dynamic_cast<YkFepManager*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<YkFepManager> ice_batchOneway() const
    {
        return dynamic_cast<YkFepManager*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<YkFepManager> ice_datagram() const
    {
        return dynamic_cast<YkFepManager*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<YkFepManager> ice_batchDatagram() const
    {
        return dynamic_cast<YkFepManager*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<YkFepManager> ice_compress(bool __compress) const
    {
        return dynamic_cast<YkFepManager*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<YkFepManager> ice_timeout(int __timeout) const
    {
        return dynamic_cast<YkFepManager*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<YkFepManager> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<YkFepManager*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<YkFepManager> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<YkFepManager*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class YkAppManager : virtual public ::IceProxy::Ice::Object
{
public:

    void selectEcho(const ::Yk::YkCommand& __p_cmd, bool __p_flag, const ::std::string& __p_tip)
    {
        selectEcho(__p_cmd, __p_flag, __p_tip, 0);
    }
    void selectEcho(const ::Yk::YkCommand& __p_cmd, bool __p_flag, const ::std::string& __p_tip, const ::Ice::Context& __ctx)
    {
        selectEcho(__p_cmd, __p_flag, __p_tip, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_selectEcho(const ::Yk::YkCommand& __p_cmd, bool __p_flag, const ::std::string& __p_tip, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_selectEcho(__p_cmd, __p_flag, __p_tip, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_selectEcho(const ::Yk::YkCommand& __p_cmd, bool __p_flag, const ::std::string& __p_tip, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_selectEcho(__p_cmd, __p_flag, __p_tip, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_selectEcho(const ::Yk::YkCommand& __p_cmd, bool __p_flag, const ::std::string& __p_tip, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_selectEcho(__p_cmd, __p_flag, __p_tip, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_selectEcho(const ::Yk::YkCommand& __p_cmd, bool __p_flag, const ::std::string& __p_tip, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_selectEcho(__p_cmd, __p_flag, __p_tip, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_selectEcho(const ::Yk::YkCommand& __p_cmd, bool __p_flag, const ::std::string& __p_tip)
    {
        return begin_selectEcho(__p_cmd, __p_flag, __p_tip, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_selectEcho(const ::Yk::YkCommand& __p_cmd, bool __p_flag, const ::std::string& __p_tip, const ::Ice::Context& __ctx)
    {
        return begin_selectEcho(__p_cmd, __p_flag, __p_tip, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_selectEcho(const ::Yk::YkCommand& __p_cmd, bool __p_flag, const ::std::string& __p_tip, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_selectEcho(__p_cmd, __p_flag, __p_tip, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_selectEcho(const ::Yk::YkCommand& __p_cmd, bool __p_flag, const ::std::string& __p_tip, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_selectEcho(__p_cmd, __p_flag, __p_tip, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_selectEcho(const ::Yk::YkCommand& __p_cmd, bool __p_flag, const ::std::string& __p_tip, const ::Yk::Callback_YkAppManager_selectEchoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_selectEcho(__p_cmd, __p_flag, __p_tip, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_selectEcho(const ::Yk::YkCommand& __p_cmd, bool __p_flag, const ::std::string& __p_tip, const ::Ice::Context& __ctx, const ::Yk::Callback_YkAppManager_selectEchoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_selectEcho(__p_cmd, __p_flag, __p_tip, &__ctx, __del, __cookie);
    }

    void end_selectEcho(const ::Ice::AsyncResultPtr&);
    
private:

    void selectEcho(const ::Yk::YkCommand&, bool, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_selectEcho(const ::Yk::YkCommand&, bool, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void selectReturn(const ::Yk::YkCommand& __p_cmd, bool __p_flag, const ::std::string& __p_tip)
    {
        selectReturn(__p_cmd, __p_flag, __p_tip, 0);
    }
    void selectReturn(const ::Yk::YkCommand& __p_cmd, bool __p_flag, const ::std::string& __p_tip, const ::Ice::Context& __ctx)
    {
        selectReturn(__p_cmd, __p_flag, __p_tip, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_selectReturn(const ::Yk::YkCommand& __p_cmd, bool __p_flag, const ::std::string& __p_tip, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_selectReturn(__p_cmd, __p_flag, __p_tip, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_selectReturn(const ::Yk::YkCommand& __p_cmd, bool __p_flag, const ::std::string& __p_tip, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_selectReturn(__p_cmd, __p_flag, __p_tip, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_selectReturn(const ::Yk::YkCommand& __p_cmd, bool __p_flag, const ::std::string& __p_tip, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_selectReturn(__p_cmd, __p_flag, __p_tip, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_selectReturn(const ::Yk::YkCommand& __p_cmd, bool __p_flag, const ::std::string& __p_tip, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_selectReturn(__p_cmd, __p_flag, __p_tip, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_selectReturn(const ::Yk::YkCommand& __p_cmd, bool __p_flag, const ::std::string& __p_tip)
    {
        return begin_selectReturn(__p_cmd, __p_flag, __p_tip, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_selectReturn(const ::Yk::YkCommand& __p_cmd, bool __p_flag, const ::std::string& __p_tip, const ::Ice::Context& __ctx)
    {
        return begin_selectReturn(__p_cmd, __p_flag, __p_tip, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_selectReturn(const ::Yk::YkCommand& __p_cmd, bool __p_flag, const ::std::string& __p_tip, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_selectReturn(__p_cmd, __p_flag, __p_tip, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_selectReturn(const ::Yk::YkCommand& __p_cmd, bool __p_flag, const ::std::string& __p_tip, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_selectReturn(__p_cmd, __p_flag, __p_tip, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_selectReturn(const ::Yk::YkCommand& __p_cmd, bool __p_flag, const ::std::string& __p_tip, const ::Yk::Callback_YkAppManager_selectReturnPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_selectReturn(__p_cmd, __p_flag, __p_tip, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_selectReturn(const ::Yk::YkCommand& __p_cmd, bool __p_flag, const ::std::string& __p_tip, const ::Ice::Context& __ctx, const ::Yk::Callback_YkAppManager_selectReturnPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_selectReturn(__p_cmd, __p_flag, __p_tip, &__ctx, __del, __cookie);
    }

    void end_selectReturn(const ::Ice::AsyncResultPtr&);
    
private:

    void selectReturn(const ::Yk::YkCommand&, bool, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_selectReturn(const ::Yk::YkCommand&, bool, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void executeEcho(const ::Yk::YkCommand& __p_cmd, bool __p_flag, const ::std::string& __p_tip)
    {
        executeEcho(__p_cmd, __p_flag, __p_tip, 0);
    }
    void executeEcho(const ::Yk::YkCommand& __p_cmd, bool __p_flag, const ::std::string& __p_tip, const ::Ice::Context& __ctx)
    {
        executeEcho(__p_cmd, __p_flag, __p_tip, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_executeEcho(const ::Yk::YkCommand& __p_cmd, bool __p_flag, const ::std::string& __p_tip, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_executeEcho(__p_cmd, __p_flag, __p_tip, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_executeEcho(const ::Yk::YkCommand& __p_cmd, bool __p_flag, const ::std::string& __p_tip, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_executeEcho(__p_cmd, __p_flag, __p_tip, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_executeEcho(const ::Yk::YkCommand& __p_cmd, bool __p_flag, const ::std::string& __p_tip, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_executeEcho(__p_cmd, __p_flag, __p_tip, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_executeEcho(const ::Yk::YkCommand& __p_cmd, bool __p_flag, const ::std::string& __p_tip, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_executeEcho(__p_cmd, __p_flag, __p_tip, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_executeEcho(const ::Yk::YkCommand& __p_cmd, bool __p_flag, const ::std::string& __p_tip)
    {
        return begin_executeEcho(__p_cmd, __p_flag, __p_tip, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_executeEcho(const ::Yk::YkCommand& __p_cmd, bool __p_flag, const ::std::string& __p_tip, const ::Ice::Context& __ctx)
    {
        return begin_executeEcho(__p_cmd, __p_flag, __p_tip, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_executeEcho(const ::Yk::YkCommand& __p_cmd, bool __p_flag, const ::std::string& __p_tip, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_executeEcho(__p_cmd, __p_flag, __p_tip, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_executeEcho(const ::Yk::YkCommand& __p_cmd, bool __p_flag, const ::std::string& __p_tip, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_executeEcho(__p_cmd, __p_flag, __p_tip, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_executeEcho(const ::Yk::YkCommand& __p_cmd, bool __p_flag, const ::std::string& __p_tip, const ::Yk::Callback_YkAppManager_executeEchoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_executeEcho(__p_cmd, __p_flag, __p_tip, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_executeEcho(const ::Yk::YkCommand& __p_cmd, bool __p_flag, const ::std::string& __p_tip, const ::Ice::Context& __ctx, const ::Yk::Callback_YkAppManager_executeEchoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_executeEcho(__p_cmd, __p_flag, __p_tip, &__ctx, __del, __cookie);
    }

    void end_executeEcho(const ::Ice::AsyncResultPtr&);
    
private:

    void executeEcho(const ::Yk::YkCommand&, bool, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_executeEcho(const ::Yk::YkCommand&, bool, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void executeReturn(const ::Yk::YkCommand& __p_cmd, bool __p_flag, const ::std::string& __p_tip)
    {
        executeReturn(__p_cmd, __p_flag, __p_tip, 0);
    }
    void executeReturn(const ::Yk::YkCommand& __p_cmd, bool __p_flag, const ::std::string& __p_tip, const ::Ice::Context& __ctx)
    {
        executeReturn(__p_cmd, __p_flag, __p_tip, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_executeReturn(const ::Yk::YkCommand& __p_cmd, bool __p_flag, const ::std::string& __p_tip, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_executeReturn(__p_cmd, __p_flag, __p_tip, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_executeReturn(const ::Yk::YkCommand& __p_cmd, bool __p_flag, const ::std::string& __p_tip, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_executeReturn(__p_cmd, __p_flag, __p_tip, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_executeReturn(const ::Yk::YkCommand& __p_cmd, bool __p_flag, const ::std::string& __p_tip, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_executeReturn(__p_cmd, __p_flag, __p_tip, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_executeReturn(const ::Yk::YkCommand& __p_cmd, bool __p_flag, const ::std::string& __p_tip, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_executeReturn(__p_cmd, __p_flag, __p_tip, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_executeReturn(const ::Yk::YkCommand& __p_cmd, bool __p_flag, const ::std::string& __p_tip)
    {
        return begin_executeReturn(__p_cmd, __p_flag, __p_tip, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_executeReturn(const ::Yk::YkCommand& __p_cmd, bool __p_flag, const ::std::string& __p_tip, const ::Ice::Context& __ctx)
    {
        return begin_executeReturn(__p_cmd, __p_flag, __p_tip, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_executeReturn(const ::Yk::YkCommand& __p_cmd, bool __p_flag, const ::std::string& __p_tip, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_executeReturn(__p_cmd, __p_flag, __p_tip, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_executeReturn(const ::Yk::YkCommand& __p_cmd, bool __p_flag, const ::std::string& __p_tip, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_executeReturn(__p_cmd, __p_flag, __p_tip, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_executeReturn(const ::Yk::YkCommand& __p_cmd, bool __p_flag, const ::std::string& __p_tip, const ::Yk::Callback_YkAppManager_executeReturnPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_executeReturn(__p_cmd, __p_flag, __p_tip, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_executeReturn(const ::Yk::YkCommand& __p_cmd, bool __p_flag, const ::std::string& __p_tip, const ::Ice::Context& __ctx, const ::Yk::Callback_YkAppManager_executeReturnPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_executeReturn(__p_cmd, __p_flag, __p_tip, &__ctx, __del, __cookie);
    }

    void end_executeReturn(const ::Ice::AsyncResultPtr&);
    
private:

    void executeReturn(const ::Yk::YkCommand&, bool, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_executeReturn(const ::Yk::YkCommand&, bool, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void cancelEcho(const ::Yk::YkCommand& __p_cmd, bool __p_flag, const ::std::string& __p_tip)
    {
        cancelEcho(__p_cmd, __p_flag, __p_tip, 0);
    }
    void cancelEcho(const ::Yk::YkCommand& __p_cmd, bool __p_flag, const ::std::string& __p_tip, const ::Ice::Context& __ctx)
    {
        cancelEcho(__p_cmd, __p_flag, __p_tip, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_cancelEcho(const ::Yk::YkCommand& __p_cmd, bool __p_flag, const ::std::string& __p_tip, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_cancelEcho(__p_cmd, __p_flag, __p_tip, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_cancelEcho(const ::Yk::YkCommand& __p_cmd, bool __p_flag, const ::std::string& __p_tip, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_cancelEcho(__p_cmd, __p_flag, __p_tip, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_cancelEcho(const ::Yk::YkCommand& __p_cmd, bool __p_flag, const ::std::string& __p_tip, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_cancelEcho(__p_cmd, __p_flag, __p_tip, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_cancelEcho(const ::Yk::YkCommand& __p_cmd, bool __p_flag, const ::std::string& __p_tip, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_cancelEcho(__p_cmd, __p_flag, __p_tip, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_cancelEcho(const ::Yk::YkCommand& __p_cmd, bool __p_flag, const ::std::string& __p_tip)
    {
        return begin_cancelEcho(__p_cmd, __p_flag, __p_tip, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_cancelEcho(const ::Yk::YkCommand& __p_cmd, bool __p_flag, const ::std::string& __p_tip, const ::Ice::Context& __ctx)
    {
        return begin_cancelEcho(__p_cmd, __p_flag, __p_tip, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_cancelEcho(const ::Yk::YkCommand& __p_cmd, bool __p_flag, const ::std::string& __p_tip, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_cancelEcho(__p_cmd, __p_flag, __p_tip, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_cancelEcho(const ::Yk::YkCommand& __p_cmd, bool __p_flag, const ::std::string& __p_tip, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_cancelEcho(__p_cmd, __p_flag, __p_tip, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_cancelEcho(const ::Yk::YkCommand& __p_cmd, bool __p_flag, const ::std::string& __p_tip, const ::Yk::Callback_YkAppManager_cancelEchoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_cancelEcho(__p_cmd, __p_flag, __p_tip, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_cancelEcho(const ::Yk::YkCommand& __p_cmd, bool __p_flag, const ::std::string& __p_tip, const ::Ice::Context& __ctx, const ::Yk::Callback_YkAppManager_cancelEchoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_cancelEcho(__p_cmd, __p_flag, __p_tip, &__ctx, __del, __cookie);
    }

    void end_cancelEcho(const ::Ice::AsyncResultPtr&);
    
private:

    void cancelEcho(const ::Yk::YkCommand&, bool, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_cancelEcho(const ::Yk::YkCommand&, bool, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void cancelReturn(const ::Yk::YkCommand& __p_cmd, bool __p_flag, const ::std::string& __p_tip)
    {
        cancelReturn(__p_cmd, __p_flag, __p_tip, 0);
    }
    void cancelReturn(const ::Yk::YkCommand& __p_cmd, bool __p_flag, const ::std::string& __p_tip, const ::Ice::Context& __ctx)
    {
        cancelReturn(__p_cmd, __p_flag, __p_tip, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_cancelReturn(const ::Yk::YkCommand& __p_cmd, bool __p_flag, const ::std::string& __p_tip, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_cancelReturn(__p_cmd, __p_flag, __p_tip, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_cancelReturn(const ::Yk::YkCommand& __p_cmd, bool __p_flag, const ::std::string& __p_tip, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_cancelReturn(__p_cmd, __p_flag, __p_tip, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_cancelReturn(const ::Yk::YkCommand& __p_cmd, bool __p_flag, const ::std::string& __p_tip, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_cancelReturn(__p_cmd, __p_flag, __p_tip, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_cancelReturn(const ::Yk::YkCommand& __p_cmd, bool __p_flag, const ::std::string& __p_tip, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_cancelReturn(__p_cmd, __p_flag, __p_tip, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_cancelReturn(const ::Yk::YkCommand& __p_cmd, bool __p_flag, const ::std::string& __p_tip)
    {
        return begin_cancelReturn(__p_cmd, __p_flag, __p_tip, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_cancelReturn(const ::Yk::YkCommand& __p_cmd, bool __p_flag, const ::std::string& __p_tip, const ::Ice::Context& __ctx)
    {
        return begin_cancelReturn(__p_cmd, __p_flag, __p_tip, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_cancelReturn(const ::Yk::YkCommand& __p_cmd, bool __p_flag, const ::std::string& __p_tip, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_cancelReturn(__p_cmd, __p_flag, __p_tip, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_cancelReturn(const ::Yk::YkCommand& __p_cmd, bool __p_flag, const ::std::string& __p_tip, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_cancelReturn(__p_cmd, __p_flag, __p_tip, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_cancelReturn(const ::Yk::YkCommand& __p_cmd, bool __p_flag, const ::std::string& __p_tip, const ::Yk::Callback_YkAppManager_cancelReturnPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_cancelReturn(__p_cmd, __p_flag, __p_tip, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_cancelReturn(const ::Yk::YkCommand& __p_cmd, bool __p_flag, const ::std::string& __p_tip, const ::Ice::Context& __ctx, const ::Yk::Callback_YkAppManager_cancelReturnPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_cancelReturn(__p_cmd, __p_flag, __p_tip, &__ctx, __del, __cookie);
    }

    void end_cancelReturn(const ::Ice::AsyncResultPtr&);
    
private:

    void cancelReturn(const ::Yk::YkCommand&, bool, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_cancelReturn(const ::Yk::YkCommand&, bool, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<YkAppManager> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<YkAppManager*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<YkAppManager> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<YkAppManager*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<YkAppManager> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<YkAppManager*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<YkAppManager> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<YkAppManager*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<YkAppManager> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<YkAppManager*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<YkAppManager> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<YkAppManager*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<YkAppManager> ice_secure(bool __secure) const
    {
        return dynamic_cast<YkAppManager*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<YkAppManager> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<YkAppManager*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<YkAppManager> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<YkAppManager*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<YkAppManager> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<YkAppManager*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<YkAppManager> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<YkAppManager*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<YkAppManager> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<YkAppManager*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<YkAppManager> ice_twoway() const
    {
        return dynamic_cast<YkAppManager*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<YkAppManager> ice_oneway() const
    {
        return dynamic_cast<YkAppManager*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<YkAppManager> ice_batchOneway() const
    {
        return dynamic_cast<YkAppManager*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<YkAppManager> ice_datagram() const
    {
        return dynamic_cast<YkAppManager*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<YkAppManager> ice_batchDatagram() const
    {
        return dynamic_cast<YkAppManager*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<YkAppManager> ice_compress(bool __compress) const
    {
        return dynamic_cast<YkAppManager*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<YkAppManager> ice_timeout(int __timeout) const
    {
        return dynamic_cast<YkAppManager*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<YkAppManager> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<YkAppManager*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<YkAppManager> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<YkAppManager*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace Yk
{

class YkMmiManager : virtual public ::Ice::Object
{
public:

    typedef YkMmiManagerPrx ProxyType;
    typedef YkMmiManagerPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void sendYkRequest(const ::Yk::YkRequestMsg&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___sendYkRequest(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void sendValidateRequest(const ::Yk::YkRequestMsg&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___sendValidateRequest(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void sendYtRequest(const ::Yk::YtRequestMsg&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___sendYtRequest(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void sendValidateYtRequest(const ::Yk::YtRequestMsg&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___sendValidateYtRequest(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void sendSettingRequest(const ::Yk::SettingMsg&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___sendSettingRequest(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void sendValidateSettingRequest(const ::Yk::SettingMsg&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___sendValidateSettingRequest(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
};

inline bool operator==(const YkMmiManager& l, const YkMmiManager& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const YkMmiManager& l, const YkMmiManager& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class YkFepManager : virtual public ::Ice::Object
{
public:

    typedef YkFepManagerPrx ProxyType;
    typedef YkFepManagerPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void select(const ::Yk::YkCommand&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___select(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void execute(const ::Yk::YkCommand&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___execute(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void cancel(const ::Yk::YkCommand&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___cancel(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
};

inline bool operator==(const YkFepManager& l, const YkFepManager& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const YkFepManager& l, const YkFepManager& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class YkAppManager : virtual public ::Ice::Object
{
public:

    typedef YkAppManagerPrx ProxyType;
    typedef YkAppManagerPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void selectEcho(const ::Yk::YkCommand&, bool, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___selectEcho(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void selectReturn(const ::Yk::YkCommand&, bool, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___selectReturn(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void executeEcho(const ::Yk::YkCommand&, bool, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___executeEcho(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void executeReturn(const ::Yk::YkCommand&, bool, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___executeReturn(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void cancelEcho(const ::Yk::YkCommand&, bool, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___cancelEcho(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void cancelReturn(const ::Yk::YkCommand&, bool, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___cancelReturn(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
};

inline bool operator==(const YkAppManager& l, const YkAppManager& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const YkAppManager& l, const YkAppManager& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace Yk
{

template<class T>
class CallbackNC_YkMmiManager_sendYkRequest : public Callback_YkMmiManager_sendYkRequest_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_YkMmiManager_sendYkRequest(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_YkMmiManager_sendYkRequestPtr
newCallback_YkMmiManager_sendYkRequest(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YkMmiManager_sendYkRequest<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_YkMmiManager_sendYkRequestPtr
newCallback_YkMmiManager_sendYkRequest(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YkMmiManager_sendYkRequest<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_YkMmiManager_sendYkRequestPtr
newCallback_YkMmiManager_sendYkRequest(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YkMmiManager_sendYkRequest<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_YkMmiManager_sendYkRequestPtr
newCallback_YkMmiManager_sendYkRequest(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YkMmiManager_sendYkRequest<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_YkMmiManager_sendYkRequest : public Callback_YkMmiManager_sendYkRequest_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_YkMmiManager_sendYkRequest(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_YkMmiManager_sendYkRequestPtr
newCallback_YkMmiManager_sendYkRequest(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YkMmiManager_sendYkRequest<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_YkMmiManager_sendYkRequestPtr
newCallback_YkMmiManager_sendYkRequest(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YkMmiManager_sendYkRequest<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_YkMmiManager_sendYkRequestPtr
newCallback_YkMmiManager_sendYkRequest(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YkMmiManager_sendYkRequest<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_YkMmiManager_sendYkRequestPtr
newCallback_YkMmiManager_sendYkRequest(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YkMmiManager_sendYkRequest<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_YkMmiManager_sendValidateRequest : public Callback_YkMmiManager_sendValidateRequest_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_YkMmiManager_sendValidateRequest(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_YkMmiManager_sendValidateRequestPtr
newCallback_YkMmiManager_sendValidateRequest(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YkMmiManager_sendValidateRequest<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_YkMmiManager_sendValidateRequestPtr
newCallback_YkMmiManager_sendValidateRequest(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YkMmiManager_sendValidateRequest<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_YkMmiManager_sendValidateRequestPtr
newCallback_YkMmiManager_sendValidateRequest(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YkMmiManager_sendValidateRequest<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_YkMmiManager_sendValidateRequestPtr
newCallback_YkMmiManager_sendValidateRequest(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YkMmiManager_sendValidateRequest<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_YkMmiManager_sendValidateRequest : public Callback_YkMmiManager_sendValidateRequest_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_YkMmiManager_sendValidateRequest(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_YkMmiManager_sendValidateRequestPtr
newCallback_YkMmiManager_sendValidateRequest(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YkMmiManager_sendValidateRequest<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_YkMmiManager_sendValidateRequestPtr
newCallback_YkMmiManager_sendValidateRequest(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YkMmiManager_sendValidateRequest<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_YkMmiManager_sendValidateRequestPtr
newCallback_YkMmiManager_sendValidateRequest(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YkMmiManager_sendValidateRequest<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_YkMmiManager_sendValidateRequestPtr
newCallback_YkMmiManager_sendValidateRequest(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YkMmiManager_sendValidateRequest<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_YkMmiManager_sendYtRequest : public Callback_YkMmiManager_sendYtRequest_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_YkMmiManager_sendYtRequest(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_YkMmiManager_sendYtRequestPtr
newCallback_YkMmiManager_sendYtRequest(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YkMmiManager_sendYtRequest<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_YkMmiManager_sendYtRequestPtr
newCallback_YkMmiManager_sendYtRequest(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YkMmiManager_sendYtRequest<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_YkMmiManager_sendYtRequestPtr
newCallback_YkMmiManager_sendYtRequest(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YkMmiManager_sendYtRequest<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_YkMmiManager_sendYtRequestPtr
newCallback_YkMmiManager_sendYtRequest(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YkMmiManager_sendYtRequest<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_YkMmiManager_sendYtRequest : public Callback_YkMmiManager_sendYtRequest_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_YkMmiManager_sendYtRequest(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_YkMmiManager_sendYtRequestPtr
newCallback_YkMmiManager_sendYtRequest(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YkMmiManager_sendYtRequest<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_YkMmiManager_sendYtRequestPtr
newCallback_YkMmiManager_sendYtRequest(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YkMmiManager_sendYtRequest<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_YkMmiManager_sendYtRequestPtr
newCallback_YkMmiManager_sendYtRequest(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YkMmiManager_sendYtRequest<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_YkMmiManager_sendYtRequestPtr
newCallback_YkMmiManager_sendYtRequest(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YkMmiManager_sendYtRequest<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_YkMmiManager_sendValidateYtRequest : public Callback_YkMmiManager_sendValidateYtRequest_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_YkMmiManager_sendValidateYtRequest(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_YkMmiManager_sendValidateYtRequestPtr
newCallback_YkMmiManager_sendValidateYtRequest(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YkMmiManager_sendValidateYtRequest<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_YkMmiManager_sendValidateYtRequestPtr
newCallback_YkMmiManager_sendValidateYtRequest(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YkMmiManager_sendValidateYtRequest<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_YkMmiManager_sendValidateYtRequestPtr
newCallback_YkMmiManager_sendValidateYtRequest(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YkMmiManager_sendValidateYtRequest<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_YkMmiManager_sendValidateYtRequestPtr
newCallback_YkMmiManager_sendValidateYtRequest(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YkMmiManager_sendValidateYtRequest<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_YkMmiManager_sendValidateYtRequest : public Callback_YkMmiManager_sendValidateYtRequest_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_YkMmiManager_sendValidateYtRequest(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_YkMmiManager_sendValidateYtRequestPtr
newCallback_YkMmiManager_sendValidateYtRequest(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YkMmiManager_sendValidateYtRequest<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_YkMmiManager_sendValidateYtRequestPtr
newCallback_YkMmiManager_sendValidateYtRequest(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YkMmiManager_sendValidateYtRequest<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_YkMmiManager_sendValidateYtRequestPtr
newCallback_YkMmiManager_sendValidateYtRequest(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YkMmiManager_sendValidateYtRequest<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_YkMmiManager_sendValidateYtRequestPtr
newCallback_YkMmiManager_sendValidateYtRequest(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YkMmiManager_sendValidateYtRequest<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_YkMmiManager_sendSettingRequest : public Callback_YkMmiManager_sendSettingRequest_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_YkMmiManager_sendSettingRequest(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_YkMmiManager_sendSettingRequestPtr
newCallback_YkMmiManager_sendSettingRequest(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YkMmiManager_sendSettingRequest<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_YkMmiManager_sendSettingRequestPtr
newCallback_YkMmiManager_sendSettingRequest(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YkMmiManager_sendSettingRequest<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_YkMmiManager_sendSettingRequestPtr
newCallback_YkMmiManager_sendSettingRequest(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YkMmiManager_sendSettingRequest<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_YkMmiManager_sendSettingRequestPtr
newCallback_YkMmiManager_sendSettingRequest(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YkMmiManager_sendSettingRequest<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_YkMmiManager_sendSettingRequest : public Callback_YkMmiManager_sendSettingRequest_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_YkMmiManager_sendSettingRequest(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_YkMmiManager_sendSettingRequestPtr
newCallback_YkMmiManager_sendSettingRequest(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YkMmiManager_sendSettingRequest<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_YkMmiManager_sendSettingRequestPtr
newCallback_YkMmiManager_sendSettingRequest(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YkMmiManager_sendSettingRequest<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_YkMmiManager_sendSettingRequestPtr
newCallback_YkMmiManager_sendSettingRequest(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YkMmiManager_sendSettingRequest<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_YkMmiManager_sendSettingRequestPtr
newCallback_YkMmiManager_sendSettingRequest(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YkMmiManager_sendSettingRequest<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_YkMmiManager_sendValidateSettingRequest : public Callback_YkMmiManager_sendValidateSettingRequest_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_YkMmiManager_sendValidateSettingRequest(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_YkMmiManager_sendValidateSettingRequestPtr
newCallback_YkMmiManager_sendValidateSettingRequest(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YkMmiManager_sendValidateSettingRequest<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_YkMmiManager_sendValidateSettingRequestPtr
newCallback_YkMmiManager_sendValidateSettingRequest(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YkMmiManager_sendValidateSettingRequest<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_YkMmiManager_sendValidateSettingRequestPtr
newCallback_YkMmiManager_sendValidateSettingRequest(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YkMmiManager_sendValidateSettingRequest<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_YkMmiManager_sendValidateSettingRequestPtr
newCallback_YkMmiManager_sendValidateSettingRequest(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YkMmiManager_sendValidateSettingRequest<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_YkMmiManager_sendValidateSettingRequest : public Callback_YkMmiManager_sendValidateSettingRequest_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_YkMmiManager_sendValidateSettingRequest(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_YkMmiManager_sendValidateSettingRequestPtr
newCallback_YkMmiManager_sendValidateSettingRequest(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YkMmiManager_sendValidateSettingRequest<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_YkMmiManager_sendValidateSettingRequestPtr
newCallback_YkMmiManager_sendValidateSettingRequest(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YkMmiManager_sendValidateSettingRequest<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_YkMmiManager_sendValidateSettingRequestPtr
newCallback_YkMmiManager_sendValidateSettingRequest(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YkMmiManager_sendValidateSettingRequest<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_YkMmiManager_sendValidateSettingRequestPtr
newCallback_YkMmiManager_sendValidateSettingRequest(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YkMmiManager_sendValidateSettingRequest<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_YkFepManager_select : public Callback_YkFepManager_select_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_YkFepManager_select(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_YkFepManager_selectPtr
newCallback_YkFepManager_select(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YkFepManager_select<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_YkFepManager_selectPtr
newCallback_YkFepManager_select(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YkFepManager_select<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_YkFepManager_selectPtr
newCallback_YkFepManager_select(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YkFepManager_select<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_YkFepManager_selectPtr
newCallback_YkFepManager_select(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YkFepManager_select<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_YkFepManager_select : public Callback_YkFepManager_select_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_YkFepManager_select(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_YkFepManager_selectPtr
newCallback_YkFepManager_select(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YkFepManager_select<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_YkFepManager_selectPtr
newCallback_YkFepManager_select(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YkFepManager_select<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_YkFepManager_selectPtr
newCallback_YkFepManager_select(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YkFepManager_select<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_YkFepManager_selectPtr
newCallback_YkFepManager_select(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YkFepManager_select<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_YkFepManager_execute : public Callback_YkFepManager_execute_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_YkFepManager_execute(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_YkFepManager_executePtr
newCallback_YkFepManager_execute(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YkFepManager_execute<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_YkFepManager_executePtr
newCallback_YkFepManager_execute(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YkFepManager_execute<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_YkFepManager_executePtr
newCallback_YkFepManager_execute(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YkFepManager_execute<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_YkFepManager_executePtr
newCallback_YkFepManager_execute(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YkFepManager_execute<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_YkFepManager_execute : public Callback_YkFepManager_execute_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_YkFepManager_execute(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_YkFepManager_executePtr
newCallback_YkFepManager_execute(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YkFepManager_execute<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_YkFepManager_executePtr
newCallback_YkFepManager_execute(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YkFepManager_execute<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_YkFepManager_executePtr
newCallback_YkFepManager_execute(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YkFepManager_execute<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_YkFepManager_executePtr
newCallback_YkFepManager_execute(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YkFepManager_execute<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_YkFepManager_cancel : public Callback_YkFepManager_cancel_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_YkFepManager_cancel(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_YkFepManager_cancelPtr
newCallback_YkFepManager_cancel(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YkFepManager_cancel<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_YkFepManager_cancelPtr
newCallback_YkFepManager_cancel(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YkFepManager_cancel<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_YkFepManager_cancelPtr
newCallback_YkFepManager_cancel(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YkFepManager_cancel<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_YkFepManager_cancelPtr
newCallback_YkFepManager_cancel(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YkFepManager_cancel<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_YkFepManager_cancel : public Callback_YkFepManager_cancel_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_YkFepManager_cancel(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_YkFepManager_cancelPtr
newCallback_YkFepManager_cancel(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YkFepManager_cancel<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_YkFepManager_cancelPtr
newCallback_YkFepManager_cancel(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YkFepManager_cancel<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_YkFepManager_cancelPtr
newCallback_YkFepManager_cancel(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YkFepManager_cancel<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_YkFepManager_cancelPtr
newCallback_YkFepManager_cancel(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YkFepManager_cancel<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_YkAppManager_selectEcho : public Callback_YkAppManager_selectEcho_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_YkAppManager_selectEcho(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_YkAppManager_selectEchoPtr
newCallback_YkAppManager_selectEcho(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YkAppManager_selectEcho<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_YkAppManager_selectEchoPtr
newCallback_YkAppManager_selectEcho(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YkAppManager_selectEcho<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_YkAppManager_selectEchoPtr
newCallback_YkAppManager_selectEcho(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YkAppManager_selectEcho<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_YkAppManager_selectEchoPtr
newCallback_YkAppManager_selectEcho(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YkAppManager_selectEcho<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_YkAppManager_selectEcho : public Callback_YkAppManager_selectEcho_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_YkAppManager_selectEcho(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_YkAppManager_selectEchoPtr
newCallback_YkAppManager_selectEcho(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YkAppManager_selectEcho<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_YkAppManager_selectEchoPtr
newCallback_YkAppManager_selectEcho(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YkAppManager_selectEcho<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_YkAppManager_selectEchoPtr
newCallback_YkAppManager_selectEcho(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YkAppManager_selectEcho<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_YkAppManager_selectEchoPtr
newCallback_YkAppManager_selectEcho(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YkAppManager_selectEcho<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_YkAppManager_selectReturn : public Callback_YkAppManager_selectReturn_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_YkAppManager_selectReturn(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_YkAppManager_selectReturnPtr
newCallback_YkAppManager_selectReturn(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YkAppManager_selectReturn<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_YkAppManager_selectReturnPtr
newCallback_YkAppManager_selectReturn(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YkAppManager_selectReturn<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_YkAppManager_selectReturnPtr
newCallback_YkAppManager_selectReturn(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YkAppManager_selectReturn<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_YkAppManager_selectReturnPtr
newCallback_YkAppManager_selectReturn(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YkAppManager_selectReturn<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_YkAppManager_selectReturn : public Callback_YkAppManager_selectReturn_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_YkAppManager_selectReturn(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_YkAppManager_selectReturnPtr
newCallback_YkAppManager_selectReturn(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YkAppManager_selectReturn<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_YkAppManager_selectReturnPtr
newCallback_YkAppManager_selectReturn(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YkAppManager_selectReturn<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_YkAppManager_selectReturnPtr
newCallback_YkAppManager_selectReturn(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YkAppManager_selectReturn<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_YkAppManager_selectReturnPtr
newCallback_YkAppManager_selectReturn(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YkAppManager_selectReturn<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_YkAppManager_executeEcho : public Callback_YkAppManager_executeEcho_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_YkAppManager_executeEcho(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_YkAppManager_executeEchoPtr
newCallback_YkAppManager_executeEcho(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YkAppManager_executeEcho<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_YkAppManager_executeEchoPtr
newCallback_YkAppManager_executeEcho(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YkAppManager_executeEcho<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_YkAppManager_executeEchoPtr
newCallback_YkAppManager_executeEcho(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YkAppManager_executeEcho<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_YkAppManager_executeEchoPtr
newCallback_YkAppManager_executeEcho(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YkAppManager_executeEcho<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_YkAppManager_executeEcho : public Callback_YkAppManager_executeEcho_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_YkAppManager_executeEcho(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_YkAppManager_executeEchoPtr
newCallback_YkAppManager_executeEcho(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YkAppManager_executeEcho<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_YkAppManager_executeEchoPtr
newCallback_YkAppManager_executeEcho(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YkAppManager_executeEcho<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_YkAppManager_executeEchoPtr
newCallback_YkAppManager_executeEcho(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YkAppManager_executeEcho<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_YkAppManager_executeEchoPtr
newCallback_YkAppManager_executeEcho(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YkAppManager_executeEcho<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_YkAppManager_executeReturn : public Callback_YkAppManager_executeReturn_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_YkAppManager_executeReturn(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_YkAppManager_executeReturnPtr
newCallback_YkAppManager_executeReturn(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YkAppManager_executeReturn<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_YkAppManager_executeReturnPtr
newCallback_YkAppManager_executeReturn(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YkAppManager_executeReturn<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_YkAppManager_executeReturnPtr
newCallback_YkAppManager_executeReturn(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YkAppManager_executeReturn<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_YkAppManager_executeReturnPtr
newCallback_YkAppManager_executeReturn(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YkAppManager_executeReturn<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_YkAppManager_executeReturn : public Callback_YkAppManager_executeReturn_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_YkAppManager_executeReturn(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_YkAppManager_executeReturnPtr
newCallback_YkAppManager_executeReturn(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YkAppManager_executeReturn<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_YkAppManager_executeReturnPtr
newCallback_YkAppManager_executeReturn(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YkAppManager_executeReturn<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_YkAppManager_executeReturnPtr
newCallback_YkAppManager_executeReturn(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YkAppManager_executeReturn<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_YkAppManager_executeReturnPtr
newCallback_YkAppManager_executeReturn(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YkAppManager_executeReturn<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_YkAppManager_cancelEcho : public Callback_YkAppManager_cancelEcho_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_YkAppManager_cancelEcho(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_YkAppManager_cancelEchoPtr
newCallback_YkAppManager_cancelEcho(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YkAppManager_cancelEcho<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_YkAppManager_cancelEchoPtr
newCallback_YkAppManager_cancelEcho(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YkAppManager_cancelEcho<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_YkAppManager_cancelEchoPtr
newCallback_YkAppManager_cancelEcho(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YkAppManager_cancelEcho<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_YkAppManager_cancelEchoPtr
newCallback_YkAppManager_cancelEcho(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YkAppManager_cancelEcho<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_YkAppManager_cancelEcho : public Callback_YkAppManager_cancelEcho_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_YkAppManager_cancelEcho(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_YkAppManager_cancelEchoPtr
newCallback_YkAppManager_cancelEcho(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YkAppManager_cancelEcho<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_YkAppManager_cancelEchoPtr
newCallback_YkAppManager_cancelEcho(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YkAppManager_cancelEcho<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_YkAppManager_cancelEchoPtr
newCallback_YkAppManager_cancelEcho(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YkAppManager_cancelEcho<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_YkAppManager_cancelEchoPtr
newCallback_YkAppManager_cancelEcho(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YkAppManager_cancelEcho<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_YkAppManager_cancelReturn : public Callback_YkAppManager_cancelReturn_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_YkAppManager_cancelReturn(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_YkAppManager_cancelReturnPtr
newCallback_YkAppManager_cancelReturn(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YkAppManager_cancelReturn<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_YkAppManager_cancelReturnPtr
newCallback_YkAppManager_cancelReturn(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YkAppManager_cancelReturn<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_YkAppManager_cancelReturnPtr
newCallback_YkAppManager_cancelReturn(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YkAppManager_cancelReturn<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_YkAppManager_cancelReturnPtr
newCallback_YkAppManager_cancelReturn(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YkAppManager_cancelReturn<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_YkAppManager_cancelReturn : public Callback_YkAppManager_cancelReturn_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_YkAppManager_cancelReturn(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_YkAppManager_cancelReturnPtr
newCallback_YkAppManager_cancelReturn(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YkAppManager_cancelReturn<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_YkAppManager_cancelReturnPtr
newCallback_YkAppManager_cancelReturn(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YkAppManager_cancelReturn<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_YkAppManager_cancelReturnPtr
newCallback_YkAppManager_cancelReturn(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YkAppManager_cancelReturn<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_YkAppManager_cancelReturnPtr
newCallback_YkAppManager_cancelReturn(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YkAppManager_cancelReturn<T, CT>(instance, 0, excb, sentcb);
}

}

#include <IceUtil/PopDisableWarnings.h>
#endif
