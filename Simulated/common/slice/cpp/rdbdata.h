// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.4
//
// <auto-generated>
//
// Generated from file `rdbdata.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __rdbdata_h__
#define __rdbdata_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/GCObject.h>
#include <Ice/AsyncResult.h>
#include <Ice/Incoming.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 306
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 4
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace RdbRealData
{

class RdbRealDataRequest;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::RdbRealData::RdbRealDataRequest>&);
::IceProxy::Ice::Object* upCast(::IceProxy::RdbRealData::RdbRealDataRequest*);

class RdbRealDataRespond;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::RdbRealData::RdbRealDataRespond>&);
::IceProxy::Ice::Object* upCast(::IceProxy::RdbRealData::RdbRealDataRespond*);

class RdbDataOpt;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::RdbRealData::RdbDataOpt>&);
::IceProxy::Ice::Object* upCast(::IceProxy::RdbRealData::RdbDataOpt*);

}

namespace RdbWarningData
{

class RdbAlarmData;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::RdbWarningData::RdbAlarmData>&);
::IceProxy::Ice::Object* upCast(::IceProxy::RdbWarningData::RdbAlarmData*);

class RdbAllAlarmData;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::RdbWarningData::RdbAllAlarmData>&);
::IceProxy::Ice::Object* upCast(::IceProxy::RdbWarningData::RdbAllAlarmData*);

class RdbWarningBuf;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::RdbWarningData::RdbWarningBuf>&);
::IceProxy::Ice::Object* upCast(::IceProxy::RdbWarningData::RdbWarningBuf*);

}

}

namespace RdbRealData
{

class RdbRealDataRequest;
::Ice::Object* upCast(::RdbRealData::RdbRealDataRequest*);
typedef ::IceInternal::Handle< ::RdbRealData::RdbRealDataRequest> RdbRealDataRequestPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::RdbRealData::RdbRealDataRequest> RdbRealDataRequestPrx;
void __patch(RdbRealDataRequestPtr&, const ::Ice::ObjectPtr&);

class RdbRealDataRespond;
::Ice::Object* upCast(::RdbRealData::RdbRealDataRespond*);
typedef ::IceInternal::Handle< ::RdbRealData::RdbRealDataRespond> RdbRealDataRespondPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::RdbRealData::RdbRealDataRespond> RdbRealDataRespondPrx;
void __patch(RdbRealDataRespondPtr&, const ::Ice::ObjectPtr&);

class RdbDataOpt;
::Ice::Object* upCast(::RdbRealData::RdbDataOpt*);
typedef ::IceInternal::Handle< ::RdbRealData::RdbDataOpt> RdbDataOptPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::RdbRealData::RdbDataOpt> RdbDataOptPrx;
void __patch(RdbDataOptPtr&, const ::Ice::ObjectPtr&);

}

namespace RdbWarningData
{

class RdbAlarmData;
::Ice::Object* upCast(::RdbWarningData::RdbAlarmData*);
typedef ::IceInternal::Handle< ::RdbWarningData::RdbAlarmData> RdbAlarmDataPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::RdbWarningData::RdbAlarmData> RdbAlarmDataPrx;
void __patch(RdbAlarmDataPtr&, const ::Ice::ObjectPtr&);

class RdbAllAlarmData;
::Ice::Object* upCast(::RdbWarningData::RdbAllAlarmData*);
typedef ::IceInternal::Handle< ::RdbWarningData::RdbAllAlarmData> RdbAllAlarmDataPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::RdbWarningData::RdbAllAlarmData> RdbAllAlarmDataPrx;
void __patch(RdbAllAlarmDataPtr&, const ::Ice::ObjectPtr&);

class RdbWarningBuf;
::Ice::Object* upCast(::RdbWarningData::RdbWarningBuf*);
typedef ::IceInternal::Handle< ::RdbWarningData::RdbWarningBuf> RdbWarningBufPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::RdbWarningData::RdbWarningBuf> RdbWarningBufPrx;
void __patch(RdbWarningBufPtr&, const ::Ice::ObjectPtr&);

}

namespace RdbRealData
{

typedef ::std::vector< ::std::string> Strings;

struct RequestDefaultData
{
    ::std::string tableName;
    ::std::string fieldName;
    ::std::string fieldValue;

    bool operator==(const RequestDefaultData& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(tableName != __rhs.tableName)
        {
            return false;
        }
        if(fieldName != __rhs.fieldName)
        {
            return false;
        }
        if(fieldValue != __rhs.fieldValue)
        {
            return false;
        }
        return true;
    }

    bool operator<(const RequestDefaultData& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(tableName < __rhs.tableName)
        {
            return true;
        }
        else if(__rhs.tableName < tableName)
        {
            return false;
        }
        if(fieldName < __rhs.fieldName)
        {
            return true;
        }
        else if(__rhs.fieldName < fieldName)
        {
            return false;
        }
        if(fieldValue < __rhs.fieldValue)
        {
            return true;
        }
        else if(__rhs.fieldValue < fieldValue)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const RequestDefaultData& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const RequestDefaultData& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const RequestDefaultData& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const RequestDefaultData& __rhs) const
    {
        return !operator<(__rhs);
    }
};

typedef ::std::vector< ::RdbRealData::RequestDefaultData> RequestDefaultDataSequence;

struct RequestDefaultDataSeq
{
    ::Ice::Long id;
    ::Ice::Long requestId;
    ::std::string requestNode;
    bool isStop;
    ::Ice::Int refreshFreq;
    ::Ice::Long dataCount;
    ::RdbRealData::RequestDefaultDataSequence seq;
};

struct RequestSpecficData
{
    ::std::string tableName;
    ::RdbRealData::Strings fieldSeq;
    ::std::string fieldName;
    ::std::string fieldValue;
};

typedef ::std::vector< ::RdbRealData::RequestSpecficData> RequestSpecficDataSequence;

struct RequestSpecficDataSeq
{
    ::Ice::Long id;
    ::Ice::Long requestId;
    ::std::string requestNode;
    bool isStop;
    ::Ice::Int refreshFreq;
    ::Ice::Long dataCount;
    ::RdbRealData::RequestSpecficDataSequence seq;
};

struct RequestCompleteData
{
    ::std::string tableName;
    ::std::string fieldName;
    ::std::string fieldValue;
    ::RdbRealData::Strings fieldValues;
};

typedef ::std::vector< ::RdbRealData::RequestCompleteData> RequestCompleteDataSequence;

struct BatchRequestCompleteData
{
    ::std::string tableName;
    ::std::string fieldName;
    ::RdbRealData::Strings fieldValues;
};

typedef ::std::vector< ::RdbRealData::BatchRequestCompleteData> BatchRequestCompleteDataSequence;

struct RequestCompleteDataSeq
{
    ::Ice::Long id;
    ::Ice::Long requestId;
    ::std::string requestNode;
    bool isStop;
    ::Ice::Int refreshFreq;
    ::Ice::Long dataCount;
    ::RdbRealData::RequestCompleteDataSequence seq;
};

struct BatchRequestCompleteDataSeq
{
    ::Ice::Long id;
    ::Ice::Long requestId;
    ::std::string requestNode;
    bool isStop;
    ::Ice::Int refreshFreq;
    ::Ice::Long dataCount;
    ::RdbRealData::BatchRequestCompleteDataSequence seq;
};

struct RespondDefaultData
{
    ::std::string tableName;
    ::std::string dataRid;
    ::std::string dataValue;

    bool operator==(const RespondDefaultData& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(tableName != __rhs.tableName)
        {
            return false;
        }
        if(dataRid != __rhs.dataRid)
        {
            return false;
        }
        if(dataValue != __rhs.dataValue)
        {
            return false;
        }
        return true;
    }

    bool operator<(const RespondDefaultData& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(tableName < __rhs.tableName)
        {
            return true;
        }
        else if(__rhs.tableName < tableName)
        {
            return false;
        }
        if(dataRid < __rhs.dataRid)
        {
            return true;
        }
        else if(__rhs.dataRid < dataRid)
        {
            return false;
        }
        if(dataValue < __rhs.dataValue)
        {
            return true;
        }
        else if(__rhs.dataValue < dataValue)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const RespondDefaultData& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const RespondDefaultData& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const RespondDefaultData& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const RespondDefaultData& __rhs) const
    {
        return !operator<(__rhs);
    }
};

typedef ::std::vector< ::RdbRealData::RespondDefaultData> RespondDefaultDataSequence;

struct RespondDefaultDataSeq
{
    ::Ice::Long id;
    ::Ice::Long requestId;
    ::std::string requestNode;
    ::Ice::Long dataCount;
    ::RdbRealData::RespondDefaultDataSequence seq;
};

struct RespondSpecficData
{
    ::std::string tableName;
    ::RdbRealData::Strings fieldSeq;
    ::std::string dataRid;
    ::RdbRealData::Strings dataValues;
};

typedef ::std::vector< ::RdbRealData::RespondSpecficData> RespondSpecficDataSequence;

struct RespondSpecficDataSeq
{
    ::Ice::Long id;
    ::Ice::Long requestId;
    ::std::string requestNode;
    ::Ice::Long dataCount;
    ::RdbRealData::RespondSpecficDataSequence seq;
};

struct RespondCompleteData
{
    ::std::string tableName;
    ::std::string dataRid;
    ::RdbRealData::Strings dataValues;
};

typedef ::std::vector< ::RdbRealData::RespondCompleteData> RespondCompleteDataSequence;

struct RespondCompleteDataSeq
{
    ::Ice::Long id;
    ::Ice::Long requestId;
    ::std::string requestNode;
    ::Ice::Long dataCount;
    ::RdbRealData::RespondCompleteDataSequence seq;
};

struct RespondDataCount
{
    ::std::string tableName;
    ::std::string fieldName;
    ::std::string fieldValue;
    ::Ice::Int dataCount;

    bool operator==(const RespondDataCount& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(tableName != __rhs.tableName)
        {
            return false;
        }
        if(fieldName != __rhs.fieldName)
        {
            return false;
        }
        if(fieldValue != __rhs.fieldValue)
        {
            return false;
        }
        if(dataCount != __rhs.dataCount)
        {
            return false;
        }
        return true;
    }

    bool operator<(const RespondDataCount& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(tableName < __rhs.tableName)
        {
            return true;
        }
        else if(__rhs.tableName < tableName)
        {
            return false;
        }
        if(fieldName < __rhs.fieldName)
        {
            return true;
        }
        else if(__rhs.fieldName < fieldName)
        {
            return false;
        }
        if(fieldValue < __rhs.fieldValue)
        {
            return true;
        }
        else if(__rhs.fieldValue < fieldValue)
        {
            return false;
        }
        if(dataCount < __rhs.dataCount)
        {
            return true;
        }
        else if(__rhs.dataCount < dataCount)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const RespondDataCount& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const RespondDataCount& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const RespondDataCount& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const RespondDataCount& __rhs) const
    {
        return !operator<(__rhs);
    }
};

typedef ::std::vector< ::RdbRealData::RespondDataCount> RespondDataCountSequence;

struct EquipTree
{
    ::std::string parentRid;
    ::std::string parentName;
    ::std::string parentType;
    ::std::string equipRid;
    ::std::string equipName;
    ::std::string equipType;

    bool operator==(const EquipTree& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(parentRid != __rhs.parentRid)
        {
            return false;
        }
        if(parentName != __rhs.parentName)
        {
            return false;
        }
        if(parentType != __rhs.parentType)
        {
            return false;
        }
        if(equipRid != __rhs.equipRid)
        {
            return false;
        }
        if(equipName != __rhs.equipName)
        {
            return false;
        }
        if(equipType != __rhs.equipType)
        {
            return false;
        }
        return true;
    }

    bool operator<(const EquipTree& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(parentRid < __rhs.parentRid)
        {
            return true;
        }
        else if(__rhs.parentRid < parentRid)
        {
            return false;
        }
        if(parentName < __rhs.parentName)
        {
            return true;
        }
        else if(__rhs.parentName < parentName)
        {
            return false;
        }
        if(parentType < __rhs.parentType)
        {
            return true;
        }
        else if(__rhs.parentType < parentType)
        {
            return false;
        }
        if(equipRid < __rhs.equipRid)
        {
            return true;
        }
        else if(__rhs.equipRid < equipRid)
        {
            return false;
        }
        if(equipName < __rhs.equipName)
        {
            return true;
        }
        else if(__rhs.equipName < equipName)
        {
            return false;
        }
        if(equipType < __rhs.equipType)
        {
            return true;
        }
        else if(__rhs.equipType < equipType)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const EquipTree& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const EquipTree& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const EquipTree& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const EquipTree& __rhs) const
    {
        return !operator<(__rhs);
    }
};

typedef ::std::vector< ::RdbRealData::EquipTree> EquipTreeSequence;

struct LineAndStationInfo
{
    ::std::string lineRid;
    ::std::string lineName;
    ::std::string linePath;
    ::std::string stationRid;
    ::std::string stationName;
    ::std::string stationPath;

    bool operator==(const LineAndStationInfo& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(lineRid != __rhs.lineRid)
        {
            return false;
        }
        if(lineName != __rhs.lineName)
        {
            return false;
        }
        if(linePath != __rhs.linePath)
        {
            return false;
        }
        if(stationRid != __rhs.stationRid)
        {
            return false;
        }
        if(stationName != __rhs.stationName)
        {
            return false;
        }
        if(stationPath != __rhs.stationPath)
        {
            return false;
        }
        return true;
    }

    bool operator<(const LineAndStationInfo& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(lineRid < __rhs.lineRid)
        {
            return true;
        }
        else if(__rhs.lineRid < lineRid)
        {
            return false;
        }
        if(lineName < __rhs.lineName)
        {
            return true;
        }
        else if(__rhs.lineName < lineName)
        {
            return false;
        }
        if(linePath < __rhs.linePath)
        {
            return true;
        }
        else if(__rhs.linePath < linePath)
        {
            return false;
        }
        if(stationRid < __rhs.stationRid)
        {
            return true;
        }
        else if(__rhs.stationRid < stationRid)
        {
            return false;
        }
        if(stationName < __rhs.stationName)
        {
            return true;
        }
        else if(__rhs.stationName < stationName)
        {
            return false;
        }
        if(stationPath < __rhs.stationPath)
        {
            return true;
        }
        else if(__rhs.stationPath < stationPath)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const LineAndStationInfo& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const LineAndStationInfo& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const LineAndStationInfo& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const LineAndStationInfo& __rhs) const
    {
        return !operator<(__rhs);
    }
};

struct RequestTopoDataSeq
{
    ::Ice::Long id;
    ::Ice::Long requestId;
    ::std::string requestNode;
    bool isStop;
    ::Ice::Int refreshFreq;
    ::RdbRealData::Strings ridSeq;
};

enum RelationValue
{
    Equal,
    NonEqual,
    Less,
    LessEqual,
    Greater,
    GreaterEqual
};

enum LogicalValue
{
    And,
    Or
};

struct FieldDetail
{
    ::std::string fieldName;
    ::std::string fieldValue;
    ::RdbRealData::RelationValue relation;
    ::RdbRealData::LogicalValue logical;

    bool operator==(const FieldDetail& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(fieldName != __rhs.fieldName)
        {
            return false;
        }
        if(fieldValue != __rhs.fieldValue)
        {
            return false;
        }
        if(relation != __rhs.relation)
        {
            return false;
        }
        if(logical != __rhs.logical)
        {
            return false;
        }
        return true;
    }

    bool operator<(const FieldDetail& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(fieldName < __rhs.fieldName)
        {
            return true;
        }
        else if(__rhs.fieldName < fieldName)
        {
            return false;
        }
        if(fieldValue < __rhs.fieldValue)
        {
            return true;
        }
        else if(__rhs.fieldValue < fieldValue)
        {
            return false;
        }
        if(relation < __rhs.relation)
        {
            return true;
        }
        else if(__rhs.relation < relation)
        {
            return false;
        }
        if(logical < __rhs.logical)
        {
            return true;
        }
        else if(__rhs.logical < logical)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const FieldDetail& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const FieldDetail& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const FieldDetail& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const FieldDetail& __rhs) const
    {
        return !operator<(__rhs);
    }
};

typedef ::std::vector< ::RdbRealData::FieldDetail> FieldDetailSequence;

struct RequestCondition
{
    ::std::string tableName;
    ::RdbRealData::FieldDetailSequence fieldDetailList;
};

typedef ::std::vector< ::RdbRealData::RequestCondition> RequestConditionSequence;

struct ConNodeState
{
    ::std::string rid;
    ::Ice::Byte state;

    bool operator==(const ConNodeState& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(rid != __rhs.rid)
        {
            return false;
        }
        if(state != __rhs.state)
        {
            return false;
        }
        return true;
    }

    bool operator<(const ConNodeState& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(rid < __rhs.rid)
        {
            return true;
        }
        else if(__rhs.rid < rid)
        {
            return false;
        }
        if(state < __rhs.state)
        {
            return true;
        }
        else if(__rhs.state < state)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const ConNodeState& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const ConNodeState& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const ConNodeState& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const ConNodeState& __rhs) const
    {
        return !operator<(__rhs);
    }
};

typedef ::std::vector< ::RdbRealData::ConNodeState> ConNodeStateSeq;

struct ReceiveTopoDataSeq
{
    ::Ice::Long id;
    ::Ice::Long requestId;
    ::std::string requestNode;
    ::RdbRealData::ConNodeStateSeq cnStateSeq;
};

struct PowerAnalogInfo
{
    ::std::string analogRID;
    ::std::string analogName;
    ::Ice::Double analogValue;
};

typedef ::std::vector< ::RdbRealData::PowerAnalogInfo> PowerAnalogInfoSeq;

struct PowerInfo
{
    ::std::string powerType;
    ::std::string powerRID;
    ::std::string powerName;
    ::RdbRealData::PowerAnalogInfoSeq analogInfoes;
};

typedef ::std::vector< ::RdbRealData::PowerInfo> PowerInfoSeq;

struct TerminalInfo
{
    ::std::string termRID;
    ::std::string deviceType;
    ::std::string deviceRID;
    ::std::string deviceName;

    bool operator==(const TerminalInfo& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(termRID != __rhs.termRID)
        {
            return false;
        }
        if(deviceType != __rhs.deviceType)
        {
            return false;
        }
        if(deviceRID != __rhs.deviceRID)
        {
            return false;
        }
        if(deviceName != __rhs.deviceName)
        {
            return false;
        }
        return true;
    }

    bool operator<(const TerminalInfo& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(termRID < __rhs.termRID)
        {
            return true;
        }
        else if(__rhs.termRID < termRID)
        {
            return false;
        }
        if(deviceType < __rhs.deviceType)
        {
            return true;
        }
        else if(__rhs.deviceType < deviceType)
        {
            return false;
        }
        if(deviceRID < __rhs.deviceRID)
        {
            return true;
        }
        else if(__rhs.deviceRID < deviceRID)
        {
            return false;
        }
        if(deviceName < __rhs.deviceName)
        {
            return true;
        }
        else if(__rhs.deviceName < deviceName)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const TerminalInfo& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const TerminalInfo& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const TerminalInfo& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const TerminalInfo& __rhs) const
    {
        return !operator<(__rhs);
    }
};

typedef ::std::vector< ::RdbRealData::TerminalInfo> TerminalInfoSeq;

struct ConnectivityNodeInfo
{
    ::std::string nodeRID;
    ::RdbRealData::TerminalInfoSeq terminalInfoes;
};

typedef ::std::vector< ::RdbRealData::ConnectivityNodeInfo> ConnectivityNodeInfoSeq;

struct TopoIslandInfo
{
    ::Ice::Int islandID;
    ::RdbRealData::ConnectivityNodeInfoSeq nodeInfoes;
    ::RdbRealData::PowerInfoSeq powerInfoes;
    bool powerStatus;
};

typedef ::std::vector< ::RdbRealData::TopoIslandInfo> TopoIslandInfoSeq;

const ::std::string strRealRequestTopic = "rdb_real_request";

const ::std::string strRealRespondTopic = "rdb_real_respond";

typedef ::std::vector< ::Ice::Double> DoubleSeq;

typedef ::std::vector< ::Ice::Int> IntegerSeq;

typedef ::std::map< ::std::string, ::std::string> FieldMap;

struct CurvePointData
{
    ::std::string analog;
    ::RdbRealData::Strings values;
};

typedef ::std::vector< ::RdbRealData::CurvePointData> CurvePointDataSeq;

struct SectionValue
{
    ::std::string measurmentType;
    ::std::string measurmentId;
    ::RdbRealData::DoubleSeq values;
};

typedef ::std::vector< ::RdbRealData::SectionValue> SectionValueSeq;

}

namespace RdbWarningData
{

enum RdbWarningLevel
{
    Critical,
    Major,
    Minor,
    Info
};

enum RdbWarningType
{
    LimitEvent,
    SoeEvent,
    YxEvent,
    UnitEvent,
    SysEvent,
    OperEvent,
    RelayEvent,
    FaultEvent,
    FaEvent,
    WaveEvent,
    GraphEvent,
    RfwEvent,
    AllEvent
};

typedef ::std::vector< ::std::string> Strings;

struct WarningInfo
{
    ::std::string id;
    ::Ice::Int isConfirm;
    ::std::string confirmId;
    ::RdbWarningData::RdbWarningType warnType;
    ::Ice::Long timeStamp;
    ::RdbWarningData::RdbWarningLevel warningLevel;
    ::std::string warnSource;
    ::std::string voltage;
    ::Ice::Int columnNum;
    ::RdbWarningData::Strings contents;
};

typedef ::std::vector< ::RdbWarningData::WarningInfo> WarningInfoSeq;

const ::std::string strAlarmDataTopic = "rdb_warning_data";

const ::std::string strAllAlarmDataTopic = "rdb_all_warning_data";

struct OutAnalogWarningBuf
{
    ::Ice::Long timeStamp;
    ::std::string name;
    ::std::string psrRid;
    ::std::string psrType;
    ::Ice::Int outStatus;
    ::Ice::Double limitVl;
    ::Ice::Double currentVl;
    ::Ice::Int holdFlag;
    ::Ice::Int unitId;
    ::Ice::Int unitSymbol;
    ::Ice::Int ycType;
    ::std::string rid;
};

typedef ::std::vector< ::RdbWarningData::OutAnalogWarningBuf> OutAnalogWarningBufSeq;

struct ChangedUnitWarningBuf
{
    ::Ice::Long timeStamp;
    ::std::string fepNode;
    ::Ice::Int unitId;
    ::std::string name;
    bool fromDataSrv;
    ::Ice::Int currentStatus;

    bool operator==(const ChangedUnitWarningBuf& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(timeStamp != __rhs.timeStamp)
        {
            return false;
        }
        if(fepNode != __rhs.fepNode)
        {
            return false;
        }
        if(unitId != __rhs.unitId)
        {
            return false;
        }
        if(name != __rhs.name)
        {
            return false;
        }
        if(fromDataSrv != __rhs.fromDataSrv)
        {
            return false;
        }
        if(currentStatus != __rhs.currentStatus)
        {
            return false;
        }
        return true;
    }

    bool operator<(const ChangedUnitWarningBuf& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(timeStamp < __rhs.timeStamp)
        {
            return true;
        }
        else if(__rhs.timeStamp < timeStamp)
        {
            return false;
        }
        if(fepNode < __rhs.fepNode)
        {
            return true;
        }
        else if(__rhs.fepNode < fepNode)
        {
            return false;
        }
        if(unitId < __rhs.unitId)
        {
            return true;
        }
        else if(__rhs.unitId < unitId)
        {
            return false;
        }
        if(name < __rhs.name)
        {
            return true;
        }
        else if(__rhs.name < name)
        {
            return false;
        }
        if(fromDataSrv < __rhs.fromDataSrv)
        {
            return true;
        }
        else if(__rhs.fromDataSrv < fromDataSrv)
        {
            return false;
        }
        if(currentStatus < __rhs.currentStatus)
        {
            return true;
        }
        else if(__rhs.currentStatus < currentStatus)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const ChangedUnitWarningBuf& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const ChangedUnitWarningBuf& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const ChangedUnitWarningBuf& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const ChangedUnitWarningBuf& __rhs) const
    {
        return !operator<(__rhs);
    }
};

typedef ::std::vector< ::RdbWarningData::ChangedUnitWarningBuf> ChangedUnitWarningBufSeq;

struct ChangedChannelWarningBuf
{
    ::Ice::Long timeStamp;
    ::std::string fepNode;
    ::Ice::Int unitId;
    ::std::string name;
    ::Ice::Int currentStatus;

    bool operator==(const ChangedChannelWarningBuf& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(timeStamp != __rhs.timeStamp)
        {
            return false;
        }
        if(fepNode != __rhs.fepNode)
        {
            return false;
        }
        if(unitId != __rhs.unitId)
        {
            return false;
        }
        if(name != __rhs.name)
        {
            return false;
        }
        if(currentStatus != __rhs.currentStatus)
        {
            return false;
        }
        return true;
    }

    bool operator<(const ChangedChannelWarningBuf& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(timeStamp < __rhs.timeStamp)
        {
            return true;
        }
        else if(__rhs.timeStamp < timeStamp)
        {
            return false;
        }
        if(fepNode < __rhs.fepNode)
        {
            return true;
        }
        else if(__rhs.fepNode < fepNode)
        {
            return false;
        }
        if(unitId < __rhs.unitId)
        {
            return true;
        }
        else if(__rhs.unitId < unitId)
        {
            return false;
        }
        if(name < __rhs.name)
        {
            return true;
        }
        else if(__rhs.name < name)
        {
            return false;
        }
        if(currentStatus < __rhs.currentStatus)
        {
            return true;
        }
        else if(__rhs.currentStatus < currentStatus)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const ChangedChannelWarningBuf& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const ChangedChannelWarningBuf& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const ChangedChannelWarningBuf& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const ChangedChannelWarningBuf& __rhs) const
    {
        return !operator<(__rhs);
    }
};

typedef ::std::vector< ::RdbWarningData::ChangedChannelWarningBuf> ChangedChannelWarningBufSeq;

const ::std::string strRdbWarningBufTopic = "rdb_warning_buf_data";

}

namespace Ice
{
template<>
struct StreamableTraits< ::RdbRealData::RequestDefaultData>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 3;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::RdbRealData::RequestDefaultData, S>
{
    static void write(S* __os, const ::RdbRealData::RequestDefaultData& v)
    {
        __os->write(v.tableName);
        __os->write(v.fieldName);
        __os->write(v.fieldValue);
    }
};

template<class S>
struct StreamReader< ::RdbRealData::RequestDefaultData, S>
{
    static void read(S* __is, ::RdbRealData::RequestDefaultData& v)
    {
        __is->read(v.tableName);
        __is->read(v.fieldName);
        __is->read(v.fieldValue);
    }
};

template<>
struct StreamableTraits< ::RdbRealData::RequestDefaultDataSeq>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 31;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::RdbRealData::RequestDefaultDataSeq, S>
{
    static void write(S* __os, const ::RdbRealData::RequestDefaultDataSeq& v)
    {
        __os->write(v.id);
        __os->write(v.requestId);
        __os->write(v.requestNode);
        __os->write(v.isStop);
        __os->write(v.refreshFreq);
        __os->write(v.dataCount);
        __os->write(v.seq);
    }
};

template<class S>
struct StreamReader< ::RdbRealData::RequestDefaultDataSeq, S>
{
    static void read(S* __is, ::RdbRealData::RequestDefaultDataSeq& v)
    {
        __is->read(v.id);
        __is->read(v.requestId);
        __is->read(v.requestNode);
        __is->read(v.isStop);
        __is->read(v.refreshFreq);
        __is->read(v.dataCount);
        __is->read(v.seq);
    }
};

template<>
struct StreamableTraits< ::RdbRealData::RequestSpecficData>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 4;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::RdbRealData::RequestSpecficData, S>
{
    static void write(S* __os, const ::RdbRealData::RequestSpecficData& v)
    {
        __os->write(v.tableName);
        __os->write(v.fieldSeq);
        __os->write(v.fieldName);
        __os->write(v.fieldValue);
    }
};

template<class S>
struct StreamReader< ::RdbRealData::RequestSpecficData, S>
{
    static void read(S* __is, ::RdbRealData::RequestSpecficData& v)
    {
        __is->read(v.tableName);
        __is->read(v.fieldSeq);
        __is->read(v.fieldName);
        __is->read(v.fieldValue);
    }
};

template<>
struct StreamableTraits< ::RdbRealData::RequestSpecficDataSeq>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 31;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::RdbRealData::RequestSpecficDataSeq, S>
{
    static void write(S* __os, const ::RdbRealData::RequestSpecficDataSeq& v)
    {
        __os->write(v.id);
        __os->write(v.requestId);
        __os->write(v.requestNode);
        __os->write(v.isStop);
        __os->write(v.refreshFreq);
        __os->write(v.dataCount);
        __os->write(v.seq);
    }
};

template<class S>
struct StreamReader< ::RdbRealData::RequestSpecficDataSeq, S>
{
    static void read(S* __is, ::RdbRealData::RequestSpecficDataSeq& v)
    {
        __is->read(v.id);
        __is->read(v.requestId);
        __is->read(v.requestNode);
        __is->read(v.isStop);
        __is->read(v.refreshFreq);
        __is->read(v.dataCount);
        __is->read(v.seq);
    }
};

template<>
struct StreamableTraits< ::RdbRealData::RequestCompleteData>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 4;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::RdbRealData::RequestCompleteData, S>
{
    static void write(S* __os, const ::RdbRealData::RequestCompleteData& v)
    {
        __os->write(v.tableName);
        __os->write(v.fieldName);
        __os->write(v.fieldValue);
        __os->write(v.fieldValues);
    }
};

template<class S>
struct StreamReader< ::RdbRealData::RequestCompleteData, S>
{
    static void read(S* __is, ::RdbRealData::RequestCompleteData& v)
    {
        __is->read(v.tableName);
        __is->read(v.fieldName);
        __is->read(v.fieldValue);
        __is->read(v.fieldValues);
    }
};

template<>
struct StreamableTraits< ::RdbRealData::BatchRequestCompleteData>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 3;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::RdbRealData::BatchRequestCompleteData, S>
{
    static void write(S* __os, const ::RdbRealData::BatchRequestCompleteData& v)
    {
        __os->write(v.tableName);
        __os->write(v.fieldName);
        __os->write(v.fieldValues);
    }
};

template<class S>
struct StreamReader< ::RdbRealData::BatchRequestCompleteData, S>
{
    static void read(S* __is, ::RdbRealData::BatchRequestCompleteData& v)
    {
        __is->read(v.tableName);
        __is->read(v.fieldName);
        __is->read(v.fieldValues);
    }
};

template<>
struct StreamableTraits< ::RdbRealData::RequestCompleteDataSeq>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 31;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::RdbRealData::RequestCompleteDataSeq, S>
{
    static void write(S* __os, const ::RdbRealData::RequestCompleteDataSeq& v)
    {
        __os->write(v.id);
        __os->write(v.requestId);
        __os->write(v.requestNode);
        __os->write(v.isStop);
        __os->write(v.refreshFreq);
        __os->write(v.dataCount);
        __os->write(v.seq);
    }
};

template<class S>
struct StreamReader< ::RdbRealData::RequestCompleteDataSeq, S>
{
    static void read(S* __is, ::RdbRealData::RequestCompleteDataSeq& v)
    {
        __is->read(v.id);
        __is->read(v.requestId);
        __is->read(v.requestNode);
        __is->read(v.isStop);
        __is->read(v.refreshFreq);
        __is->read(v.dataCount);
        __is->read(v.seq);
    }
};

template<>
struct StreamableTraits< ::RdbRealData::BatchRequestCompleteDataSeq>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 31;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::RdbRealData::BatchRequestCompleteDataSeq, S>
{
    static void write(S* __os, const ::RdbRealData::BatchRequestCompleteDataSeq& v)
    {
        __os->write(v.id);
        __os->write(v.requestId);
        __os->write(v.requestNode);
        __os->write(v.isStop);
        __os->write(v.refreshFreq);
        __os->write(v.dataCount);
        __os->write(v.seq);
    }
};

template<class S>
struct StreamReader< ::RdbRealData::BatchRequestCompleteDataSeq, S>
{
    static void read(S* __is, ::RdbRealData::BatchRequestCompleteDataSeq& v)
    {
        __is->read(v.id);
        __is->read(v.requestId);
        __is->read(v.requestNode);
        __is->read(v.isStop);
        __is->read(v.refreshFreq);
        __is->read(v.dataCount);
        __is->read(v.seq);
    }
};

template<>
struct StreamableTraits< ::RdbRealData::RespondDefaultData>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 3;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::RdbRealData::RespondDefaultData, S>
{
    static void write(S* __os, const ::RdbRealData::RespondDefaultData& v)
    {
        __os->write(v.tableName);
        __os->write(v.dataRid);
        __os->write(v.dataValue);
    }
};

template<class S>
struct StreamReader< ::RdbRealData::RespondDefaultData, S>
{
    static void read(S* __is, ::RdbRealData::RespondDefaultData& v)
    {
        __is->read(v.tableName);
        __is->read(v.dataRid);
        __is->read(v.dataValue);
    }
};

template<>
struct StreamableTraits< ::RdbRealData::RespondDefaultDataSeq>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 26;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::RdbRealData::RespondDefaultDataSeq, S>
{
    static void write(S* __os, const ::RdbRealData::RespondDefaultDataSeq& v)
    {
        __os->write(v.id);
        __os->write(v.requestId);
        __os->write(v.requestNode);
        __os->write(v.dataCount);
        __os->write(v.seq);
    }
};

template<class S>
struct StreamReader< ::RdbRealData::RespondDefaultDataSeq, S>
{
    static void read(S* __is, ::RdbRealData::RespondDefaultDataSeq& v)
    {
        __is->read(v.id);
        __is->read(v.requestId);
        __is->read(v.requestNode);
        __is->read(v.dataCount);
        __is->read(v.seq);
    }
};

template<>
struct StreamableTraits< ::RdbRealData::RespondSpecficData>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 4;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::RdbRealData::RespondSpecficData, S>
{
    static void write(S* __os, const ::RdbRealData::RespondSpecficData& v)
    {
        __os->write(v.tableName);
        __os->write(v.fieldSeq);
        __os->write(v.dataRid);
        __os->write(v.dataValues);
    }
};

template<class S>
struct StreamReader< ::RdbRealData::RespondSpecficData, S>
{
    static void read(S* __is, ::RdbRealData::RespondSpecficData& v)
    {
        __is->read(v.tableName);
        __is->read(v.fieldSeq);
        __is->read(v.dataRid);
        __is->read(v.dataValues);
    }
};

template<>
struct StreamableTraits< ::RdbRealData::RespondSpecficDataSeq>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 26;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::RdbRealData::RespondSpecficDataSeq, S>
{
    static void write(S* __os, const ::RdbRealData::RespondSpecficDataSeq& v)
    {
        __os->write(v.id);
        __os->write(v.requestId);
        __os->write(v.requestNode);
        __os->write(v.dataCount);
        __os->write(v.seq);
    }
};

template<class S>
struct StreamReader< ::RdbRealData::RespondSpecficDataSeq, S>
{
    static void read(S* __is, ::RdbRealData::RespondSpecficDataSeq& v)
    {
        __is->read(v.id);
        __is->read(v.requestId);
        __is->read(v.requestNode);
        __is->read(v.dataCount);
        __is->read(v.seq);
    }
};

template<>
struct StreamableTraits< ::RdbRealData::RespondCompleteData>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 3;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::RdbRealData::RespondCompleteData, S>
{
    static void write(S* __os, const ::RdbRealData::RespondCompleteData& v)
    {
        __os->write(v.tableName);
        __os->write(v.dataRid);
        __os->write(v.dataValues);
    }
};

template<class S>
struct StreamReader< ::RdbRealData::RespondCompleteData, S>
{
    static void read(S* __is, ::RdbRealData::RespondCompleteData& v)
    {
        __is->read(v.tableName);
        __is->read(v.dataRid);
        __is->read(v.dataValues);
    }
};

template<>
struct StreamableTraits< ::RdbRealData::RespondCompleteDataSeq>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 26;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::RdbRealData::RespondCompleteDataSeq, S>
{
    static void write(S* __os, const ::RdbRealData::RespondCompleteDataSeq& v)
    {
        __os->write(v.id);
        __os->write(v.requestId);
        __os->write(v.requestNode);
        __os->write(v.dataCount);
        __os->write(v.seq);
    }
};

template<class S>
struct StreamReader< ::RdbRealData::RespondCompleteDataSeq, S>
{
    static void read(S* __is, ::RdbRealData::RespondCompleteDataSeq& v)
    {
        __is->read(v.id);
        __is->read(v.requestId);
        __is->read(v.requestNode);
        __is->read(v.dataCount);
        __is->read(v.seq);
    }
};

template<>
struct StreamableTraits< ::RdbRealData::RespondDataCount>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 7;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::RdbRealData::RespondDataCount, S>
{
    static void write(S* __os, const ::RdbRealData::RespondDataCount& v)
    {
        __os->write(v.tableName);
        __os->write(v.fieldName);
        __os->write(v.fieldValue);
        __os->write(v.dataCount);
    }
};

template<class S>
struct StreamReader< ::RdbRealData::RespondDataCount, S>
{
    static void read(S* __is, ::RdbRealData::RespondDataCount& v)
    {
        __is->read(v.tableName);
        __is->read(v.fieldName);
        __is->read(v.fieldValue);
        __is->read(v.dataCount);
    }
};

template<>
struct StreamableTraits< ::RdbRealData::EquipTree>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 6;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::RdbRealData::EquipTree, S>
{
    static void write(S* __os, const ::RdbRealData::EquipTree& v)
    {
        __os->write(v.parentRid);
        __os->write(v.parentName);
        __os->write(v.parentType);
        __os->write(v.equipRid);
        __os->write(v.equipName);
        __os->write(v.equipType);
    }
};

template<class S>
struct StreamReader< ::RdbRealData::EquipTree, S>
{
    static void read(S* __is, ::RdbRealData::EquipTree& v)
    {
        __is->read(v.parentRid);
        __is->read(v.parentName);
        __is->read(v.parentType);
        __is->read(v.equipRid);
        __is->read(v.equipName);
        __is->read(v.equipType);
    }
};

template<>
struct StreamableTraits< ::RdbRealData::LineAndStationInfo>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 6;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::RdbRealData::LineAndStationInfo, S>
{
    static void write(S* __os, const ::RdbRealData::LineAndStationInfo& v)
    {
        __os->write(v.lineRid);
        __os->write(v.lineName);
        __os->write(v.linePath);
        __os->write(v.stationRid);
        __os->write(v.stationName);
        __os->write(v.stationPath);
    }
};

template<class S>
struct StreamReader< ::RdbRealData::LineAndStationInfo, S>
{
    static void read(S* __is, ::RdbRealData::LineAndStationInfo& v)
    {
        __is->read(v.lineRid);
        __is->read(v.lineName);
        __is->read(v.linePath);
        __is->read(v.stationRid);
        __is->read(v.stationName);
        __is->read(v.stationPath);
    }
};

template<>
struct StreamableTraits< ::RdbRealData::RequestTopoDataSeq>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 23;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::RdbRealData::RequestTopoDataSeq, S>
{
    static void write(S* __os, const ::RdbRealData::RequestTopoDataSeq& v)
    {
        __os->write(v.id);
        __os->write(v.requestId);
        __os->write(v.requestNode);
        __os->write(v.isStop);
        __os->write(v.refreshFreq);
        __os->write(v.ridSeq);
    }
};

template<class S>
struct StreamReader< ::RdbRealData::RequestTopoDataSeq, S>
{
    static void read(S* __is, ::RdbRealData::RequestTopoDataSeq& v)
    {
        __is->read(v.id);
        __is->read(v.requestId);
        __is->read(v.requestNode);
        __is->read(v.isStop);
        __is->read(v.refreshFreq);
        __is->read(v.ridSeq);
    }
};

template<>
struct StreamableTraits< ::RdbRealData::RelationValue>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 5;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::RdbRealData::LogicalValue>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 1;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::RdbRealData::FieldDetail>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 4;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::RdbRealData::FieldDetail, S>
{
    static void write(S* __os, const ::RdbRealData::FieldDetail& v)
    {
        __os->write(v.fieldName);
        __os->write(v.fieldValue);
        __os->write(v.relation);
        __os->write(v.logical);
    }
};

template<class S>
struct StreamReader< ::RdbRealData::FieldDetail, S>
{
    static void read(S* __is, ::RdbRealData::FieldDetail& v)
    {
        __is->read(v.fieldName);
        __is->read(v.fieldValue);
        __is->read(v.relation);
        __is->read(v.logical);
    }
};

template<>
struct StreamableTraits< ::RdbRealData::RequestCondition>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 2;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::RdbRealData::RequestCondition, S>
{
    static void write(S* __os, const ::RdbRealData::RequestCondition& v)
    {
        __os->write(v.tableName);
        __os->write(v.fieldDetailList);
    }
};

template<class S>
struct StreamReader< ::RdbRealData::RequestCondition, S>
{
    static void read(S* __is, ::RdbRealData::RequestCondition& v)
    {
        __is->read(v.tableName);
        __is->read(v.fieldDetailList);
    }
};

template<>
struct StreamableTraits< ::RdbRealData::ConNodeState>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 2;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::RdbRealData::ConNodeState, S>
{
    static void write(S* __os, const ::RdbRealData::ConNodeState& v)
    {
        __os->write(v.rid);
        __os->write(v.state);
    }
};

template<class S>
struct StreamReader< ::RdbRealData::ConNodeState, S>
{
    static void read(S* __is, ::RdbRealData::ConNodeState& v)
    {
        __is->read(v.rid);
        __is->read(v.state);
    }
};

template<>
struct StreamableTraits< ::RdbRealData::ReceiveTopoDataSeq>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 18;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::RdbRealData::ReceiveTopoDataSeq, S>
{
    static void write(S* __os, const ::RdbRealData::ReceiveTopoDataSeq& v)
    {
        __os->write(v.id);
        __os->write(v.requestId);
        __os->write(v.requestNode);
        __os->write(v.cnStateSeq);
    }
};

template<class S>
struct StreamReader< ::RdbRealData::ReceiveTopoDataSeq, S>
{
    static void read(S* __is, ::RdbRealData::ReceiveTopoDataSeq& v)
    {
        __is->read(v.id);
        __is->read(v.requestId);
        __is->read(v.requestNode);
        __is->read(v.cnStateSeq);
    }
};

template<>
struct StreamableTraits< ::RdbRealData::PowerAnalogInfo>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 10;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::RdbRealData::PowerAnalogInfo, S>
{
    static void write(S* __os, const ::RdbRealData::PowerAnalogInfo& v)
    {
        __os->write(v.analogRID);
        __os->write(v.analogName);
        __os->write(v.analogValue);
    }
};

template<class S>
struct StreamReader< ::RdbRealData::PowerAnalogInfo, S>
{
    static void read(S* __is, ::RdbRealData::PowerAnalogInfo& v)
    {
        __is->read(v.analogRID);
        __is->read(v.analogName);
        __is->read(v.analogValue);
    }
};

template<>
struct StreamableTraits< ::RdbRealData::PowerInfo>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 4;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::RdbRealData::PowerInfo, S>
{
    static void write(S* __os, const ::RdbRealData::PowerInfo& v)
    {
        __os->write(v.powerType);
        __os->write(v.powerRID);
        __os->write(v.powerName);
        __os->write(v.analogInfoes);
    }
};

template<class S>
struct StreamReader< ::RdbRealData::PowerInfo, S>
{
    static void read(S* __is, ::RdbRealData::PowerInfo& v)
    {
        __is->read(v.powerType);
        __is->read(v.powerRID);
        __is->read(v.powerName);
        __is->read(v.analogInfoes);
    }
};

template<>
struct StreamableTraits< ::RdbRealData::TerminalInfo>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 4;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::RdbRealData::TerminalInfo, S>
{
    static void write(S* __os, const ::RdbRealData::TerminalInfo& v)
    {
        __os->write(v.termRID);
        __os->write(v.deviceType);
        __os->write(v.deviceRID);
        __os->write(v.deviceName);
    }
};

template<class S>
struct StreamReader< ::RdbRealData::TerminalInfo, S>
{
    static void read(S* __is, ::RdbRealData::TerminalInfo& v)
    {
        __is->read(v.termRID);
        __is->read(v.deviceType);
        __is->read(v.deviceRID);
        __is->read(v.deviceName);
    }
};

template<>
struct StreamableTraits< ::RdbRealData::ConnectivityNodeInfo>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 2;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::RdbRealData::ConnectivityNodeInfo, S>
{
    static void write(S* __os, const ::RdbRealData::ConnectivityNodeInfo& v)
    {
        __os->write(v.nodeRID);
        __os->write(v.terminalInfoes);
    }
};

template<class S>
struct StreamReader< ::RdbRealData::ConnectivityNodeInfo, S>
{
    static void read(S* __is, ::RdbRealData::ConnectivityNodeInfo& v)
    {
        __is->read(v.nodeRID);
        __is->read(v.terminalInfoes);
    }
};

template<>
struct StreamableTraits< ::RdbRealData::TopoIslandInfo>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 7;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::RdbRealData::TopoIslandInfo, S>
{
    static void write(S* __os, const ::RdbRealData::TopoIslandInfo& v)
    {
        __os->write(v.islandID);
        __os->write(v.nodeInfoes);
        __os->write(v.powerInfoes);
        __os->write(v.powerStatus);
    }
};

template<class S>
struct StreamReader< ::RdbRealData::TopoIslandInfo, S>
{
    static void read(S* __is, ::RdbRealData::TopoIslandInfo& v)
    {
        __is->read(v.islandID);
        __is->read(v.nodeInfoes);
        __is->read(v.powerInfoes);
        __is->read(v.powerStatus);
    }
};

template<>
struct StreamableTraits< ::RdbRealData::CurvePointData>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 2;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::RdbRealData::CurvePointData, S>
{
    static void write(S* __os, const ::RdbRealData::CurvePointData& v)
    {
        __os->write(v.analog);
        __os->write(v.values);
    }
};

template<class S>
struct StreamReader< ::RdbRealData::CurvePointData, S>
{
    static void read(S* __is, ::RdbRealData::CurvePointData& v)
    {
        __is->read(v.analog);
        __is->read(v.values);
    }
};

template<>
struct StreamableTraits< ::RdbRealData::SectionValue>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 3;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::RdbRealData::SectionValue, S>
{
    static void write(S* __os, const ::RdbRealData::SectionValue& v)
    {
        __os->write(v.measurmentType);
        __os->write(v.measurmentId);
        __os->write(v.values);
    }
};

template<class S>
struct StreamReader< ::RdbRealData::SectionValue, S>
{
    static void read(S* __is, ::RdbRealData::SectionValue& v)
    {
        __is->read(v.measurmentType);
        __is->read(v.measurmentId);
        __is->read(v.values);
    }
};

}

namespace Ice
{
template<>
struct StreamableTraits< ::RdbWarningData::RdbWarningLevel>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 3;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::RdbWarningData::RdbWarningType>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 12;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::RdbWarningData::WarningInfo>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 23;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::RdbWarningData::WarningInfo, S>
{
    static void write(S* __os, const ::RdbWarningData::WarningInfo& v)
    {
        __os->write(v.id);
        __os->write(v.isConfirm);
        __os->write(v.confirmId);
        __os->write(v.warnType);
        __os->write(v.timeStamp);
        __os->write(v.warningLevel);
        __os->write(v.warnSource);
        __os->write(v.voltage);
        __os->write(v.columnNum);
        __os->write(v.contents);
    }
};

template<class S>
struct StreamReader< ::RdbWarningData::WarningInfo, S>
{
    static void read(S* __is, ::RdbWarningData::WarningInfo& v)
    {
        __is->read(v.id);
        __is->read(v.isConfirm);
        __is->read(v.confirmId);
        __is->read(v.warnType);
        __is->read(v.timeStamp);
        __is->read(v.warningLevel);
        __is->read(v.warnSource);
        __is->read(v.voltage);
        __is->read(v.columnNum);
        __is->read(v.contents);
    }
};

template<>
struct StreamableTraits< ::RdbWarningData::OutAnalogWarningBuf>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 48;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::RdbWarningData::OutAnalogWarningBuf, S>
{
    static void write(S* __os, const ::RdbWarningData::OutAnalogWarningBuf& v)
    {
        __os->write(v.timeStamp);
        __os->write(v.name);
        __os->write(v.psrRid);
        __os->write(v.psrType);
        __os->write(v.outStatus);
        __os->write(v.limitVl);
        __os->write(v.currentVl);
        __os->write(v.holdFlag);
        __os->write(v.unitId);
        __os->write(v.unitSymbol);
        __os->write(v.ycType);
        __os->write(v.rid);
    }
};

template<class S>
struct StreamReader< ::RdbWarningData::OutAnalogWarningBuf, S>
{
    static void read(S* __is, ::RdbWarningData::OutAnalogWarningBuf& v)
    {
        __is->read(v.timeStamp);
        __is->read(v.name);
        __is->read(v.psrRid);
        __is->read(v.psrType);
        __is->read(v.outStatus);
        __is->read(v.limitVl);
        __is->read(v.currentVl);
        __is->read(v.holdFlag);
        __is->read(v.unitId);
        __is->read(v.unitSymbol);
        __is->read(v.ycType);
        __is->read(v.rid);
    }
};

template<>
struct StreamableTraits< ::RdbWarningData::ChangedUnitWarningBuf>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 19;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::RdbWarningData::ChangedUnitWarningBuf, S>
{
    static void write(S* __os, const ::RdbWarningData::ChangedUnitWarningBuf& v)
    {
        __os->write(v.timeStamp);
        __os->write(v.fepNode);
        __os->write(v.unitId);
        __os->write(v.name);
        __os->write(v.fromDataSrv);
        __os->write(v.currentStatus);
    }
};

template<class S>
struct StreamReader< ::RdbWarningData::ChangedUnitWarningBuf, S>
{
    static void read(S* __is, ::RdbWarningData::ChangedUnitWarningBuf& v)
    {
        __is->read(v.timeStamp);
        __is->read(v.fepNode);
        __is->read(v.unitId);
        __is->read(v.name);
        __is->read(v.fromDataSrv);
        __is->read(v.currentStatus);
    }
};

template<>
struct StreamableTraits< ::RdbWarningData::ChangedChannelWarningBuf>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 18;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::RdbWarningData::ChangedChannelWarningBuf, S>
{
    static void write(S* __os, const ::RdbWarningData::ChangedChannelWarningBuf& v)
    {
        __os->write(v.timeStamp);
        __os->write(v.fepNode);
        __os->write(v.unitId);
        __os->write(v.name);
        __os->write(v.currentStatus);
    }
};

template<class S>
struct StreamReader< ::RdbWarningData::ChangedChannelWarningBuf, S>
{
    static void read(S* __is, ::RdbWarningData::ChangedChannelWarningBuf& v)
    {
        __is->read(v.timeStamp);
        __is->read(v.fepNode);
        __is->read(v.unitId);
        __is->read(v.name);
        __is->read(v.currentStatus);
    }
};

}

namespace RdbRealData
{

class Callback_RdbRealDataRequest_RequestDefaultData_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RdbRealDataRequest_RequestDefaultData_Base> Callback_RdbRealDataRequest_RequestDefaultDataPtr;

class Callback_RdbRealDataRequest_RequestSpecificData_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RdbRealDataRequest_RequestSpecificData_Base> Callback_RdbRealDataRequest_RequestSpecificDataPtr;

class Callback_RdbRealDataRequest_RequestCompleteData_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RdbRealDataRequest_RequestCompleteData_Base> Callback_RdbRealDataRequest_RequestCompleteDataPtr;

class Callback_RdbRealDataRequest_SendTopoDataRequest_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RdbRealDataRequest_SendTopoDataRequest_Base> Callback_RdbRealDataRequest_SendTopoDataRequestPtr;

class Callback_RdbRealDataRespond_RespondDefaultData_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RdbRealDataRespond_RespondDefaultData_Base> Callback_RdbRealDataRespond_RespondDefaultDataPtr;

class Callback_RdbRealDataRespond_RespondSpecificData_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RdbRealDataRespond_RespondSpecificData_Base> Callback_RdbRealDataRespond_RespondSpecificDataPtr;

class Callback_RdbRealDataRespond_RespondCompleteData_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RdbRealDataRespond_RespondCompleteData_Base> Callback_RdbRealDataRespond_RespondCompleteDataPtr;

class Callback_RdbRealDataRespond_SendTopoDataRespond_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RdbRealDataRespond_SendTopoDataRespond_Base> Callback_RdbRealDataRespond_SendTopoDataRespondPtr;

class Callback_RdbDataOpt_InsertData_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RdbDataOpt_InsertData_Base> Callback_RdbDataOpt_InsertDataPtr;

class Callback_RdbDataOpt_SelectDefaultData_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RdbDataOpt_SelectDefaultData_Base> Callback_RdbDataOpt_SelectDefaultDataPtr;

class Callback_RdbDataOpt_SelectSpecificData_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RdbDataOpt_SelectSpecificData_Base> Callback_RdbDataOpt_SelectSpecificDataPtr;

class Callback_RdbDataOpt_SelectCompleteData_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RdbDataOpt_SelectCompleteData_Base> Callback_RdbDataOpt_SelectCompleteDataPtr;

class Callback_RdbDataOpt_BatchSelectCompleteData_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RdbDataOpt_BatchSelectCompleteData_Base> Callback_RdbDataOpt_BatchSelectCompleteDataPtr;

class Callback_RdbDataOpt_SelectDataWithCondition_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RdbDataOpt_SelectDataWithCondition_Base> Callback_RdbDataOpt_SelectDataWithConditionPtr;

class Callback_RdbDataOpt_SelectDataCount_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RdbDataOpt_SelectDataCount_Base> Callback_RdbDataOpt_SelectDataCountPtr;

class Callback_RdbDataOpt_UpdateCompleteData_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RdbDataOpt_UpdateCompleteData_Base> Callback_RdbDataOpt_UpdateCompleteDataPtr;

class Callback_RdbDataOpt_DeleteRdbData_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RdbDataOpt_DeleteRdbData_Base> Callback_RdbDataOpt_DeleteRdbDataPtr;

class Callback_RdbDataOpt_GetEquipTree_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RdbDataOpt_GetEquipTree_Base> Callback_RdbDataOpt_GetEquipTreePtr;

class Callback_RdbDataOpt_GetSpecificEquipTree_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RdbDataOpt_GetSpecificEquipTree_Base> Callback_RdbDataOpt_GetSpecificEquipTreePtr;

class Callback_RdbDataOpt_GetEquipLineAndStationInfo_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RdbDataOpt_GetEquipLineAndStationInfo_Base> Callback_RdbDataOpt_GetEquipLineAndStationInfoPtr;

class Callback_RdbDataOpt_isOrphanNode_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RdbDataOpt_isOrphanNode_Base> Callback_RdbDataOpt_isOrphanNodePtr;

class Callback_RdbDataOpt_isEmptyNode_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RdbDataOpt_isEmptyNode_Base> Callback_RdbDataOpt_isEmptyNodePtr;

class Callback_RdbDataOpt_IsInvalidDbData_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RdbDataOpt_IsInvalidDbData_Base> Callback_RdbDataOpt_IsInvalidDbDataPtr;

class Callback_RdbDataOpt_GetTopoData_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RdbDataOpt_GetTopoData_Base> Callback_RdbDataOpt_GetTopoDataPtr;

class Callback_RdbDataOpt_GetTopoIslandInfo_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RdbDataOpt_GetTopoIslandInfo_Base> Callback_RdbDataOpt_GetTopoIslandInfoPtr;

class Callback_RdbDataOpt_UpdateTopoData_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RdbDataOpt_UpdateTopoData_Base> Callback_RdbDataOpt_UpdateTopoDataPtr;

class Callback_RdbDataOpt_GetSectionData_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RdbDataOpt_GetSectionData_Base> Callback_RdbDataOpt_GetSectionDataPtr;

class Callback_RdbDataOpt_GetAllSectionData_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RdbDataOpt_GetAllSectionData_Base> Callback_RdbDataOpt_GetAllSectionDataPtr;

class Callback_RdbDataOpt_updateBreaker_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RdbDataOpt_updateBreaker_Base> Callback_RdbDataOpt_updateBreakerPtr;

class Callback_RdbDataOpt_updateDisconnector_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RdbDataOpt_updateDisconnector_Base> Callback_RdbDataOpt_updateDisconnectorPtr;

class Callback_RdbDataOpt_updatePowerTransformer_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RdbDataOpt_updatePowerTransformer_Base> Callback_RdbDataOpt_updatePowerTransformerPtr;

class Callback_RdbDataOpt_updateAnalog_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RdbDataOpt_updateAnalog_Base> Callback_RdbDataOpt_updateAnalogPtr;

class Callback_RdbDataOpt_updateDiscrete_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RdbDataOpt_updateDiscrete_Base> Callback_RdbDataOpt_updateDiscretePtr;

class Callback_RdbDataOpt_updateAccumulator_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RdbDataOpt_updateAccumulator_Base> Callback_RdbDataOpt_updateAccumulatorPtr;

class Callback_RdbDataOpt_updateRemoteUnit_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RdbDataOpt_updateRemoteUnit_Base> Callback_RdbDataOpt_updateRemoteUnitPtr;

class Callback_RdbDataOpt_getCurvePointDataSeq_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RdbDataOpt_getCurvePointDataSeq_Base> Callback_RdbDataOpt_getCurvePointDataSeqPtr;

}

namespace RdbWarningData
{

class Callback_RdbAlarmData_SendAlarmData_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RdbAlarmData_SendAlarmData_Base> Callback_RdbAlarmData_SendAlarmDataPtr;

class Callback_RdbAllAlarmData_SendAllAlarmData_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RdbAllAlarmData_SendAllAlarmData_Base> Callback_RdbAllAlarmData_SendAllAlarmDataPtr;

class Callback_RdbWarningBuf_SendOutAnalogWarningBufs_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RdbWarningBuf_SendOutAnalogWarningBufs_Base> Callback_RdbWarningBuf_SendOutAnalogWarningBufsPtr;

class Callback_RdbWarningBuf_SendChangedUnitWarningBufs_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RdbWarningBuf_SendChangedUnitWarningBufs_Base> Callback_RdbWarningBuf_SendChangedUnitWarningBufsPtr;

class Callback_RdbWarningBuf_SendChangedChannelWarningBufs_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RdbWarningBuf_SendChangedChannelWarningBufs_Base> Callback_RdbWarningBuf_SendChangedChannelWarningBufsPtr;

}

namespace IceProxy
{

namespace RdbRealData
{

class RdbRealDataRequest : virtual public ::IceProxy::Ice::Object
{
public:

    void RequestDefaultData(const ::RdbRealData::RequestDefaultDataSeq& __p_seq)
    {
        RequestDefaultData(__p_seq, 0);
    }
    void RequestDefaultData(const ::RdbRealData::RequestDefaultDataSeq& __p_seq, const ::Ice::Context& __ctx)
    {
        RequestDefaultData(__p_seq, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_RequestDefaultData(const ::RdbRealData::RequestDefaultDataSeq& __p_seq, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_RequestDefaultData(__p_seq, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_RequestDefaultData(const ::RdbRealData::RequestDefaultDataSeq& __p_seq, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_RequestDefaultData(__p_seq, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_RequestDefaultData(const ::RdbRealData::RequestDefaultDataSeq& __p_seq, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_RequestDefaultData(__p_seq, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_RequestDefaultData(const ::RdbRealData::RequestDefaultDataSeq& __p_seq, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_RequestDefaultData(__p_seq, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_RequestDefaultData(const ::RdbRealData::RequestDefaultDataSeq& __p_seq)
    {
        return begin_RequestDefaultData(__p_seq, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_RequestDefaultData(const ::RdbRealData::RequestDefaultDataSeq& __p_seq, const ::Ice::Context& __ctx)
    {
        return begin_RequestDefaultData(__p_seq, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_RequestDefaultData(const ::RdbRealData::RequestDefaultDataSeq& __p_seq, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RequestDefaultData(__p_seq, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_RequestDefaultData(const ::RdbRealData::RequestDefaultDataSeq& __p_seq, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RequestDefaultData(__p_seq, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_RequestDefaultData(const ::RdbRealData::RequestDefaultDataSeq& __p_seq, const ::RdbRealData::Callback_RdbRealDataRequest_RequestDefaultDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RequestDefaultData(__p_seq, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_RequestDefaultData(const ::RdbRealData::RequestDefaultDataSeq& __p_seq, const ::Ice::Context& __ctx, const ::RdbRealData::Callback_RdbRealDataRequest_RequestDefaultDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RequestDefaultData(__p_seq, &__ctx, __del, __cookie);
    }

    void end_RequestDefaultData(const ::Ice::AsyncResultPtr&);
    
private:

    void RequestDefaultData(const ::RdbRealData::RequestDefaultDataSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_RequestDefaultData(const ::RdbRealData::RequestDefaultDataSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void RequestSpecificData(const ::RdbRealData::RequestSpecficDataSeq& __p_seq)
    {
        RequestSpecificData(__p_seq, 0);
    }
    void RequestSpecificData(const ::RdbRealData::RequestSpecficDataSeq& __p_seq, const ::Ice::Context& __ctx)
    {
        RequestSpecificData(__p_seq, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_RequestSpecificData(const ::RdbRealData::RequestSpecficDataSeq& __p_seq, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_RequestSpecificData(__p_seq, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_RequestSpecificData(const ::RdbRealData::RequestSpecficDataSeq& __p_seq, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_RequestSpecificData(__p_seq, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_RequestSpecificData(const ::RdbRealData::RequestSpecficDataSeq& __p_seq, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_RequestSpecificData(__p_seq, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_RequestSpecificData(const ::RdbRealData::RequestSpecficDataSeq& __p_seq, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_RequestSpecificData(__p_seq, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_RequestSpecificData(const ::RdbRealData::RequestSpecficDataSeq& __p_seq)
    {
        return begin_RequestSpecificData(__p_seq, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_RequestSpecificData(const ::RdbRealData::RequestSpecficDataSeq& __p_seq, const ::Ice::Context& __ctx)
    {
        return begin_RequestSpecificData(__p_seq, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_RequestSpecificData(const ::RdbRealData::RequestSpecficDataSeq& __p_seq, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RequestSpecificData(__p_seq, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_RequestSpecificData(const ::RdbRealData::RequestSpecficDataSeq& __p_seq, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RequestSpecificData(__p_seq, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_RequestSpecificData(const ::RdbRealData::RequestSpecficDataSeq& __p_seq, const ::RdbRealData::Callback_RdbRealDataRequest_RequestSpecificDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RequestSpecificData(__p_seq, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_RequestSpecificData(const ::RdbRealData::RequestSpecficDataSeq& __p_seq, const ::Ice::Context& __ctx, const ::RdbRealData::Callback_RdbRealDataRequest_RequestSpecificDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RequestSpecificData(__p_seq, &__ctx, __del, __cookie);
    }

    void end_RequestSpecificData(const ::Ice::AsyncResultPtr&);
    
private:

    void RequestSpecificData(const ::RdbRealData::RequestSpecficDataSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_RequestSpecificData(const ::RdbRealData::RequestSpecficDataSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void RequestCompleteData(const ::RdbRealData::RequestCompleteDataSeq& __p_seq)
    {
        RequestCompleteData(__p_seq, 0);
    }
    void RequestCompleteData(const ::RdbRealData::RequestCompleteDataSeq& __p_seq, const ::Ice::Context& __ctx)
    {
        RequestCompleteData(__p_seq, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_RequestCompleteData(const ::RdbRealData::RequestCompleteDataSeq& __p_seq, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_RequestCompleteData(__p_seq, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_RequestCompleteData(const ::RdbRealData::RequestCompleteDataSeq& __p_seq, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_RequestCompleteData(__p_seq, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_RequestCompleteData(const ::RdbRealData::RequestCompleteDataSeq& __p_seq, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_RequestCompleteData(__p_seq, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_RequestCompleteData(const ::RdbRealData::RequestCompleteDataSeq& __p_seq, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_RequestCompleteData(__p_seq, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_RequestCompleteData(const ::RdbRealData::RequestCompleteDataSeq& __p_seq)
    {
        return begin_RequestCompleteData(__p_seq, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_RequestCompleteData(const ::RdbRealData::RequestCompleteDataSeq& __p_seq, const ::Ice::Context& __ctx)
    {
        return begin_RequestCompleteData(__p_seq, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_RequestCompleteData(const ::RdbRealData::RequestCompleteDataSeq& __p_seq, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RequestCompleteData(__p_seq, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_RequestCompleteData(const ::RdbRealData::RequestCompleteDataSeq& __p_seq, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RequestCompleteData(__p_seq, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_RequestCompleteData(const ::RdbRealData::RequestCompleteDataSeq& __p_seq, const ::RdbRealData::Callback_RdbRealDataRequest_RequestCompleteDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RequestCompleteData(__p_seq, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_RequestCompleteData(const ::RdbRealData::RequestCompleteDataSeq& __p_seq, const ::Ice::Context& __ctx, const ::RdbRealData::Callback_RdbRealDataRequest_RequestCompleteDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RequestCompleteData(__p_seq, &__ctx, __del, __cookie);
    }

    void end_RequestCompleteData(const ::Ice::AsyncResultPtr&);
    
private:

    void RequestCompleteData(const ::RdbRealData::RequestCompleteDataSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_RequestCompleteData(const ::RdbRealData::RequestCompleteDataSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void SendTopoDataRequest(const ::RdbRealData::RequestTopoDataSeq& __p_seq)
    {
        SendTopoDataRequest(__p_seq, 0);
    }
    void SendTopoDataRequest(const ::RdbRealData::RequestTopoDataSeq& __p_seq, const ::Ice::Context& __ctx)
    {
        SendTopoDataRequest(__p_seq, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_SendTopoDataRequest(const ::RdbRealData::RequestTopoDataSeq& __p_seq, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_SendTopoDataRequest(__p_seq, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_SendTopoDataRequest(const ::RdbRealData::RequestTopoDataSeq& __p_seq, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_SendTopoDataRequest(__p_seq, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_SendTopoDataRequest(const ::RdbRealData::RequestTopoDataSeq& __p_seq, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_SendTopoDataRequest(__p_seq, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_SendTopoDataRequest(const ::RdbRealData::RequestTopoDataSeq& __p_seq, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_SendTopoDataRequest(__p_seq, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_SendTopoDataRequest(const ::RdbRealData::RequestTopoDataSeq& __p_seq)
    {
        return begin_SendTopoDataRequest(__p_seq, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_SendTopoDataRequest(const ::RdbRealData::RequestTopoDataSeq& __p_seq, const ::Ice::Context& __ctx)
    {
        return begin_SendTopoDataRequest(__p_seq, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_SendTopoDataRequest(const ::RdbRealData::RequestTopoDataSeq& __p_seq, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SendTopoDataRequest(__p_seq, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SendTopoDataRequest(const ::RdbRealData::RequestTopoDataSeq& __p_seq, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SendTopoDataRequest(__p_seq, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SendTopoDataRequest(const ::RdbRealData::RequestTopoDataSeq& __p_seq, const ::RdbRealData::Callback_RdbRealDataRequest_SendTopoDataRequestPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SendTopoDataRequest(__p_seq, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SendTopoDataRequest(const ::RdbRealData::RequestTopoDataSeq& __p_seq, const ::Ice::Context& __ctx, const ::RdbRealData::Callback_RdbRealDataRequest_SendTopoDataRequestPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SendTopoDataRequest(__p_seq, &__ctx, __del, __cookie);
    }

    void end_SendTopoDataRequest(const ::Ice::AsyncResultPtr&);
    
private:

    void SendTopoDataRequest(const ::RdbRealData::RequestTopoDataSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_SendTopoDataRequest(const ::RdbRealData::RequestTopoDataSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<RdbRealDataRequest> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<RdbRealDataRequest*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<RdbRealDataRequest> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<RdbRealDataRequest*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<RdbRealDataRequest> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<RdbRealDataRequest*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<RdbRealDataRequest> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<RdbRealDataRequest*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<RdbRealDataRequest> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<RdbRealDataRequest*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<RdbRealDataRequest> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<RdbRealDataRequest*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<RdbRealDataRequest> ice_secure(bool __secure) const
    {
        return dynamic_cast<RdbRealDataRequest*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<RdbRealDataRequest> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<RdbRealDataRequest*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<RdbRealDataRequest> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<RdbRealDataRequest*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<RdbRealDataRequest> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<RdbRealDataRequest*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<RdbRealDataRequest> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<RdbRealDataRequest*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<RdbRealDataRequest> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<RdbRealDataRequest*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<RdbRealDataRequest> ice_twoway() const
    {
        return dynamic_cast<RdbRealDataRequest*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<RdbRealDataRequest> ice_oneway() const
    {
        return dynamic_cast<RdbRealDataRequest*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<RdbRealDataRequest> ice_batchOneway() const
    {
        return dynamic_cast<RdbRealDataRequest*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<RdbRealDataRequest> ice_datagram() const
    {
        return dynamic_cast<RdbRealDataRequest*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<RdbRealDataRequest> ice_batchDatagram() const
    {
        return dynamic_cast<RdbRealDataRequest*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<RdbRealDataRequest> ice_compress(bool __compress) const
    {
        return dynamic_cast<RdbRealDataRequest*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<RdbRealDataRequest> ice_timeout(int __timeout) const
    {
        return dynamic_cast<RdbRealDataRequest*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<RdbRealDataRequest> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<RdbRealDataRequest*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<RdbRealDataRequest> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<RdbRealDataRequest*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class RdbRealDataRespond : virtual public ::IceProxy::Ice::Object
{
public:

    void RespondDefaultData(const ::RdbRealData::RespondDefaultDataSeq& __p_seq)
    {
        RespondDefaultData(__p_seq, 0);
    }
    void RespondDefaultData(const ::RdbRealData::RespondDefaultDataSeq& __p_seq, const ::Ice::Context& __ctx)
    {
        RespondDefaultData(__p_seq, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_RespondDefaultData(const ::RdbRealData::RespondDefaultDataSeq& __p_seq, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_RespondDefaultData(__p_seq, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_RespondDefaultData(const ::RdbRealData::RespondDefaultDataSeq& __p_seq, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_RespondDefaultData(__p_seq, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_RespondDefaultData(const ::RdbRealData::RespondDefaultDataSeq& __p_seq, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_RespondDefaultData(__p_seq, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_RespondDefaultData(const ::RdbRealData::RespondDefaultDataSeq& __p_seq, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_RespondDefaultData(__p_seq, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_RespondDefaultData(const ::RdbRealData::RespondDefaultDataSeq& __p_seq)
    {
        return begin_RespondDefaultData(__p_seq, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_RespondDefaultData(const ::RdbRealData::RespondDefaultDataSeq& __p_seq, const ::Ice::Context& __ctx)
    {
        return begin_RespondDefaultData(__p_seq, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_RespondDefaultData(const ::RdbRealData::RespondDefaultDataSeq& __p_seq, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RespondDefaultData(__p_seq, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_RespondDefaultData(const ::RdbRealData::RespondDefaultDataSeq& __p_seq, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RespondDefaultData(__p_seq, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_RespondDefaultData(const ::RdbRealData::RespondDefaultDataSeq& __p_seq, const ::RdbRealData::Callback_RdbRealDataRespond_RespondDefaultDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RespondDefaultData(__p_seq, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_RespondDefaultData(const ::RdbRealData::RespondDefaultDataSeq& __p_seq, const ::Ice::Context& __ctx, const ::RdbRealData::Callback_RdbRealDataRespond_RespondDefaultDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RespondDefaultData(__p_seq, &__ctx, __del, __cookie);
    }

    void end_RespondDefaultData(const ::Ice::AsyncResultPtr&);
    
private:

    void RespondDefaultData(const ::RdbRealData::RespondDefaultDataSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_RespondDefaultData(const ::RdbRealData::RespondDefaultDataSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void RespondSpecificData(const ::RdbRealData::RespondSpecficDataSeq& __p_seq)
    {
        RespondSpecificData(__p_seq, 0);
    }
    void RespondSpecificData(const ::RdbRealData::RespondSpecficDataSeq& __p_seq, const ::Ice::Context& __ctx)
    {
        RespondSpecificData(__p_seq, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_RespondSpecificData(const ::RdbRealData::RespondSpecficDataSeq& __p_seq, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_RespondSpecificData(__p_seq, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_RespondSpecificData(const ::RdbRealData::RespondSpecficDataSeq& __p_seq, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_RespondSpecificData(__p_seq, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_RespondSpecificData(const ::RdbRealData::RespondSpecficDataSeq& __p_seq, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_RespondSpecificData(__p_seq, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_RespondSpecificData(const ::RdbRealData::RespondSpecficDataSeq& __p_seq, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_RespondSpecificData(__p_seq, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_RespondSpecificData(const ::RdbRealData::RespondSpecficDataSeq& __p_seq)
    {
        return begin_RespondSpecificData(__p_seq, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_RespondSpecificData(const ::RdbRealData::RespondSpecficDataSeq& __p_seq, const ::Ice::Context& __ctx)
    {
        return begin_RespondSpecificData(__p_seq, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_RespondSpecificData(const ::RdbRealData::RespondSpecficDataSeq& __p_seq, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RespondSpecificData(__p_seq, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_RespondSpecificData(const ::RdbRealData::RespondSpecficDataSeq& __p_seq, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RespondSpecificData(__p_seq, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_RespondSpecificData(const ::RdbRealData::RespondSpecficDataSeq& __p_seq, const ::RdbRealData::Callback_RdbRealDataRespond_RespondSpecificDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RespondSpecificData(__p_seq, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_RespondSpecificData(const ::RdbRealData::RespondSpecficDataSeq& __p_seq, const ::Ice::Context& __ctx, const ::RdbRealData::Callback_RdbRealDataRespond_RespondSpecificDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RespondSpecificData(__p_seq, &__ctx, __del, __cookie);
    }

    void end_RespondSpecificData(const ::Ice::AsyncResultPtr&);
    
private:

    void RespondSpecificData(const ::RdbRealData::RespondSpecficDataSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_RespondSpecificData(const ::RdbRealData::RespondSpecficDataSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void RespondCompleteData(const ::RdbRealData::RespondCompleteDataSeq& __p_seq)
    {
        RespondCompleteData(__p_seq, 0);
    }
    void RespondCompleteData(const ::RdbRealData::RespondCompleteDataSeq& __p_seq, const ::Ice::Context& __ctx)
    {
        RespondCompleteData(__p_seq, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_RespondCompleteData(const ::RdbRealData::RespondCompleteDataSeq& __p_seq, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_RespondCompleteData(__p_seq, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_RespondCompleteData(const ::RdbRealData::RespondCompleteDataSeq& __p_seq, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_RespondCompleteData(__p_seq, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_RespondCompleteData(const ::RdbRealData::RespondCompleteDataSeq& __p_seq, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_RespondCompleteData(__p_seq, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_RespondCompleteData(const ::RdbRealData::RespondCompleteDataSeq& __p_seq, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_RespondCompleteData(__p_seq, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_RespondCompleteData(const ::RdbRealData::RespondCompleteDataSeq& __p_seq)
    {
        return begin_RespondCompleteData(__p_seq, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_RespondCompleteData(const ::RdbRealData::RespondCompleteDataSeq& __p_seq, const ::Ice::Context& __ctx)
    {
        return begin_RespondCompleteData(__p_seq, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_RespondCompleteData(const ::RdbRealData::RespondCompleteDataSeq& __p_seq, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RespondCompleteData(__p_seq, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_RespondCompleteData(const ::RdbRealData::RespondCompleteDataSeq& __p_seq, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RespondCompleteData(__p_seq, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_RespondCompleteData(const ::RdbRealData::RespondCompleteDataSeq& __p_seq, const ::RdbRealData::Callback_RdbRealDataRespond_RespondCompleteDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RespondCompleteData(__p_seq, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_RespondCompleteData(const ::RdbRealData::RespondCompleteDataSeq& __p_seq, const ::Ice::Context& __ctx, const ::RdbRealData::Callback_RdbRealDataRespond_RespondCompleteDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RespondCompleteData(__p_seq, &__ctx, __del, __cookie);
    }

    void end_RespondCompleteData(const ::Ice::AsyncResultPtr&);
    
private:

    void RespondCompleteData(const ::RdbRealData::RespondCompleteDataSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_RespondCompleteData(const ::RdbRealData::RespondCompleteDataSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void SendTopoDataRespond(const ::RdbRealData::ReceiveTopoDataSeq& __p_seq)
    {
        SendTopoDataRespond(__p_seq, 0);
    }
    void SendTopoDataRespond(const ::RdbRealData::ReceiveTopoDataSeq& __p_seq, const ::Ice::Context& __ctx)
    {
        SendTopoDataRespond(__p_seq, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_SendTopoDataRespond(const ::RdbRealData::ReceiveTopoDataSeq& __p_seq, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_SendTopoDataRespond(__p_seq, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_SendTopoDataRespond(const ::RdbRealData::ReceiveTopoDataSeq& __p_seq, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_SendTopoDataRespond(__p_seq, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_SendTopoDataRespond(const ::RdbRealData::ReceiveTopoDataSeq& __p_seq, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_SendTopoDataRespond(__p_seq, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_SendTopoDataRespond(const ::RdbRealData::ReceiveTopoDataSeq& __p_seq, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_SendTopoDataRespond(__p_seq, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_SendTopoDataRespond(const ::RdbRealData::ReceiveTopoDataSeq& __p_seq)
    {
        return begin_SendTopoDataRespond(__p_seq, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_SendTopoDataRespond(const ::RdbRealData::ReceiveTopoDataSeq& __p_seq, const ::Ice::Context& __ctx)
    {
        return begin_SendTopoDataRespond(__p_seq, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_SendTopoDataRespond(const ::RdbRealData::ReceiveTopoDataSeq& __p_seq, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SendTopoDataRespond(__p_seq, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SendTopoDataRespond(const ::RdbRealData::ReceiveTopoDataSeq& __p_seq, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SendTopoDataRespond(__p_seq, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SendTopoDataRespond(const ::RdbRealData::ReceiveTopoDataSeq& __p_seq, const ::RdbRealData::Callback_RdbRealDataRespond_SendTopoDataRespondPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SendTopoDataRespond(__p_seq, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SendTopoDataRespond(const ::RdbRealData::ReceiveTopoDataSeq& __p_seq, const ::Ice::Context& __ctx, const ::RdbRealData::Callback_RdbRealDataRespond_SendTopoDataRespondPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SendTopoDataRespond(__p_seq, &__ctx, __del, __cookie);
    }

    void end_SendTopoDataRespond(const ::Ice::AsyncResultPtr&);
    
private:

    void SendTopoDataRespond(const ::RdbRealData::ReceiveTopoDataSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_SendTopoDataRespond(const ::RdbRealData::ReceiveTopoDataSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<RdbRealDataRespond> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<RdbRealDataRespond*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<RdbRealDataRespond> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<RdbRealDataRespond*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<RdbRealDataRespond> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<RdbRealDataRespond*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<RdbRealDataRespond> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<RdbRealDataRespond*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<RdbRealDataRespond> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<RdbRealDataRespond*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<RdbRealDataRespond> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<RdbRealDataRespond*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<RdbRealDataRespond> ice_secure(bool __secure) const
    {
        return dynamic_cast<RdbRealDataRespond*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<RdbRealDataRespond> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<RdbRealDataRespond*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<RdbRealDataRespond> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<RdbRealDataRespond*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<RdbRealDataRespond> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<RdbRealDataRespond*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<RdbRealDataRespond> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<RdbRealDataRespond*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<RdbRealDataRespond> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<RdbRealDataRespond*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<RdbRealDataRespond> ice_twoway() const
    {
        return dynamic_cast<RdbRealDataRespond*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<RdbRealDataRespond> ice_oneway() const
    {
        return dynamic_cast<RdbRealDataRespond*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<RdbRealDataRespond> ice_batchOneway() const
    {
        return dynamic_cast<RdbRealDataRespond*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<RdbRealDataRespond> ice_datagram() const
    {
        return dynamic_cast<RdbRealDataRespond*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<RdbRealDataRespond> ice_batchDatagram() const
    {
        return dynamic_cast<RdbRealDataRespond*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<RdbRealDataRespond> ice_compress(bool __compress) const
    {
        return dynamic_cast<RdbRealDataRespond*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<RdbRealDataRespond> ice_timeout(int __timeout) const
    {
        return dynamic_cast<RdbRealDataRespond*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<RdbRealDataRespond> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<RdbRealDataRespond*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<RdbRealDataRespond> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<RdbRealDataRespond*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class RdbDataOpt : virtual public ::IceProxy::Ice::Object
{
public:

    bool InsertData(const ::RdbRealData::RespondCompleteDataSeq& __p_dataSeq, ::RdbRealData::RespondCompleteDataSequence& __p_errorSeq)
    {
        return InsertData(__p_dataSeq, __p_errorSeq, 0);
    }
    bool InsertData(const ::RdbRealData::RespondCompleteDataSeq& __p_dataSeq, ::RdbRealData::RespondCompleteDataSequence& __p_errorSeq, const ::Ice::Context& __ctx)
    {
        return InsertData(__p_dataSeq, __p_errorSeq, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_InsertData(const ::RdbRealData::RespondCompleteDataSeq& __p_dataSeq, const ::IceInternal::Function<void (bool, const ::RdbRealData::RespondCompleteDataSequence&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_InsertData(__p_dataSeq, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_InsertData(const ::RdbRealData::RespondCompleteDataSeq& __p_dataSeq, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_InsertData(__p_dataSeq, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_InsertData(const ::RdbRealData::RespondCompleteDataSeq& __p_dataSeq, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool, const ::RdbRealData::RespondCompleteDataSequence&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_InsertData(__p_dataSeq, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_InsertData(const ::RdbRealData::RespondCompleteDataSeq& __p_dataSeq, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_InsertData(__p_dataSeq, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_InsertData(const ::RdbRealData::RespondCompleteDataSeq& __p_dataSeq, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool, const ::RdbRealData::RespondCompleteDataSequence&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_InsertData(const ::RdbRealData::RespondCompleteDataSeq& __p_dataSeq)
    {
        return begin_InsertData(__p_dataSeq, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_InsertData(const ::RdbRealData::RespondCompleteDataSeq& __p_dataSeq, const ::Ice::Context& __ctx)
    {
        return begin_InsertData(__p_dataSeq, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_InsertData(const ::RdbRealData::RespondCompleteDataSeq& __p_dataSeq, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_InsertData(__p_dataSeq, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_InsertData(const ::RdbRealData::RespondCompleteDataSeq& __p_dataSeq, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_InsertData(__p_dataSeq, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_InsertData(const ::RdbRealData::RespondCompleteDataSeq& __p_dataSeq, const ::RdbRealData::Callback_RdbDataOpt_InsertDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_InsertData(__p_dataSeq, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_InsertData(const ::RdbRealData::RespondCompleteDataSeq& __p_dataSeq, const ::Ice::Context& __ctx, const ::RdbRealData::Callback_RdbDataOpt_InsertDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_InsertData(__p_dataSeq, &__ctx, __del, __cookie);
    }

    bool end_InsertData(::RdbRealData::RespondCompleteDataSequence& __p_errorSeq, const ::Ice::AsyncResultPtr&);
    
private:

    bool InsertData(const ::RdbRealData::RespondCompleteDataSeq&, ::RdbRealData::RespondCompleteDataSequence&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_InsertData(const ::RdbRealData::RespondCompleteDataSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool SelectDefaultData(const ::RdbRealData::RequestDefaultDataSeq& __p_reqSeq, ::RdbRealData::RespondDefaultDataSeq& __p_repSeq)
    {
        return SelectDefaultData(__p_reqSeq, __p_repSeq, 0);
    }
    bool SelectDefaultData(const ::RdbRealData::RequestDefaultDataSeq& __p_reqSeq, ::RdbRealData::RespondDefaultDataSeq& __p_repSeq, const ::Ice::Context& __ctx)
    {
        return SelectDefaultData(__p_reqSeq, __p_repSeq, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_SelectDefaultData(const ::RdbRealData::RequestDefaultDataSeq& __p_reqSeq, const ::IceInternal::Function<void (bool, const ::RdbRealData::RespondDefaultDataSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_SelectDefaultData(__p_reqSeq, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_SelectDefaultData(const ::RdbRealData::RequestDefaultDataSeq& __p_reqSeq, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_SelectDefaultData(__p_reqSeq, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_SelectDefaultData(const ::RdbRealData::RequestDefaultDataSeq& __p_reqSeq, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool, const ::RdbRealData::RespondDefaultDataSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_SelectDefaultData(__p_reqSeq, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_SelectDefaultData(const ::RdbRealData::RequestDefaultDataSeq& __p_reqSeq, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_SelectDefaultData(__p_reqSeq, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_SelectDefaultData(const ::RdbRealData::RequestDefaultDataSeq& __p_reqSeq, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool, const ::RdbRealData::RespondDefaultDataSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_SelectDefaultData(const ::RdbRealData::RequestDefaultDataSeq& __p_reqSeq)
    {
        return begin_SelectDefaultData(__p_reqSeq, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_SelectDefaultData(const ::RdbRealData::RequestDefaultDataSeq& __p_reqSeq, const ::Ice::Context& __ctx)
    {
        return begin_SelectDefaultData(__p_reqSeq, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_SelectDefaultData(const ::RdbRealData::RequestDefaultDataSeq& __p_reqSeq, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SelectDefaultData(__p_reqSeq, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SelectDefaultData(const ::RdbRealData::RequestDefaultDataSeq& __p_reqSeq, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SelectDefaultData(__p_reqSeq, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SelectDefaultData(const ::RdbRealData::RequestDefaultDataSeq& __p_reqSeq, const ::RdbRealData::Callback_RdbDataOpt_SelectDefaultDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SelectDefaultData(__p_reqSeq, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SelectDefaultData(const ::RdbRealData::RequestDefaultDataSeq& __p_reqSeq, const ::Ice::Context& __ctx, const ::RdbRealData::Callback_RdbDataOpt_SelectDefaultDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SelectDefaultData(__p_reqSeq, &__ctx, __del, __cookie);
    }

    bool end_SelectDefaultData(::RdbRealData::RespondDefaultDataSeq& __p_repSeq, const ::Ice::AsyncResultPtr&);
    
private:

    bool SelectDefaultData(const ::RdbRealData::RequestDefaultDataSeq&, ::RdbRealData::RespondDefaultDataSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_SelectDefaultData(const ::RdbRealData::RequestDefaultDataSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool SelectSpecificData(const ::RdbRealData::RequestSpecficDataSeq& __p_reqSeq, ::RdbRealData::RespondSpecficDataSeq& __p_repSeq)
    {
        return SelectSpecificData(__p_reqSeq, __p_repSeq, 0);
    }
    bool SelectSpecificData(const ::RdbRealData::RequestSpecficDataSeq& __p_reqSeq, ::RdbRealData::RespondSpecficDataSeq& __p_repSeq, const ::Ice::Context& __ctx)
    {
        return SelectSpecificData(__p_reqSeq, __p_repSeq, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_SelectSpecificData(const ::RdbRealData::RequestSpecficDataSeq& __p_reqSeq, const ::IceInternal::Function<void (bool, const ::RdbRealData::RespondSpecficDataSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_SelectSpecificData(__p_reqSeq, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_SelectSpecificData(const ::RdbRealData::RequestSpecficDataSeq& __p_reqSeq, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_SelectSpecificData(__p_reqSeq, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_SelectSpecificData(const ::RdbRealData::RequestSpecficDataSeq& __p_reqSeq, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool, const ::RdbRealData::RespondSpecficDataSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_SelectSpecificData(__p_reqSeq, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_SelectSpecificData(const ::RdbRealData::RequestSpecficDataSeq& __p_reqSeq, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_SelectSpecificData(__p_reqSeq, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_SelectSpecificData(const ::RdbRealData::RequestSpecficDataSeq& __p_reqSeq, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool, const ::RdbRealData::RespondSpecficDataSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_SelectSpecificData(const ::RdbRealData::RequestSpecficDataSeq& __p_reqSeq)
    {
        return begin_SelectSpecificData(__p_reqSeq, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_SelectSpecificData(const ::RdbRealData::RequestSpecficDataSeq& __p_reqSeq, const ::Ice::Context& __ctx)
    {
        return begin_SelectSpecificData(__p_reqSeq, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_SelectSpecificData(const ::RdbRealData::RequestSpecficDataSeq& __p_reqSeq, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SelectSpecificData(__p_reqSeq, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SelectSpecificData(const ::RdbRealData::RequestSpecficDataSeq& __p_reqSeq, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SelectSpecificData(__p_reqSeq, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SelectSpecificData(const ::RdbRealData::RequestSpecficDataSeq& __p_reqSeq, const ::RdbRealData::Callback_RdbDataOpt_SelectSpecificDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SelectSpecificData(__p_reqSeq, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SelectSpecificData(const ::RdbRealData::RequestSpecficDataSeq& __p_reqSeq, const ::Ice::Context& __ctx, const ::RdbRealData::Callback_RdbDataOpt_SelectSpecificDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SelectSpecificData(__p_reqSeq, &__ctx, __del, __cookie);
    }

    bool end_SelectSpecificData(::RdbRealData::RespondSpecficDataSeq& __p_repSeq, const ::Ice::AsyncResultPtr&);
    
private:

    bool SelectSpecificData(const ::RdbRealData::RequestSpecficDataSeq&, ::RdbRealData::RespondSpecficDataSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_SelectSpecificData(const ::RdbRealData::RequestSpecficDataSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool SelectCompleteData(const ::RdbRealData::RequestCompleteDataSeq& __p_reqSeq, ::RdbRealData::RespondCompleteDataSeq& __p_repSeq)
    {
        return SelectCompleteData(__p_reqSeq, __p_repSeq, 0);
    }
    bool SelectCompleteData(const ::RdbRealData::RequestCompleteDataSeq& __p_reqSeq, ::RdbRealData::RespondCompleteDataSeq& __p_repSeq, const ::Ice::Context& __ctx)
    {
        return SelectCompleteData(__p_reqSeq, __p_repSeq, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_SelectCompleteData(const ::RdbRealData::RequestCompleteDataSeq& __p_reqSeq, const ::IceInternal::Function<void (bool, const ::RdbRealData::RespondCompleteDataSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_SelectCompleteData(__p_reqSeq, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_SelectCompleteData(const ::RdbRealData::RequestCompleteDataSeq& __p_reqSeq, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_SelectCompleteData(__p_reqSeq, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_SelectCompleteData(const ::RdbRealData::RequestCompleteDataSeq& __p_reqSeq, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool, const ::RdbRealData::RespondCompleteDataSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_SelectCompleteData(__p_reqSeq, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_SelectCompleteData(const ::RdbRealData::RequestCompleteDataSeq& __p_reqSeq, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_SelectCompleteData(__p_reqSeq, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_SelectCompleteData(const ::RdbRealData::RequestCompleteDataSeq& __p_reqSeq, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool, const ::RdbRealData::RespondCompleteDataSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_SelectCompleteData(const ::RdbRealData::RequestCompleteDataSeq& __p_reqSeq)
    {
        return begin_SelectCompleteData(__p_reqSeq, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_SelectCompleteData(const ::RdbRealData::RequestCompleteDataSeq& __p_reqSeq, const ::Ice::Context& __ctx)
    {
        return begin_SelectCompleteData(__p_reqSeq, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_SelectCompleteData(const ::RdbRealData::RequestCompleteDataSeq& __p_reqSeq, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SelectCompleteData(__p_reqSeq, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SelectCompleteData(const ::RdbRealData::RequestCompleteDataSeq& __p_reqSeq, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SelectCompleteData(__p_reqSeq, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SelectCompleteData(const ::RdbRealData::RequestCompleteDataSeq& __p_reqSeq, const ::RdbRealData::Callback_RdbDataOpt_SelectCompleteDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SelectCompleteData(__p_reqSeq, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SelectCompleteData(const ::RdbRealData::RequestCompleteDataSeq& __p_reqSeq, const ::Ice::Context& __ctx, const ::RdbRealData::Callback_RdbDataOpt_SelectCompleteDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SelectCompleteData(__p_reqSeq, &__ctx, __del, __cookie);
    }

    bool end_SelectCompleteData(::RdbRealData::RespondCompleteDataSeq& __p_repSeq, const ::Ice::AsyncResultPtr&);
    
private:

    bool SelectCompleteData(const ::RdbRealData::RequestCompleteDataSeq&, ::RdbRealData::RespondCompleteDataSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_SelectCompleteData(const ::RdbRealData::RequestCompleteDataSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool BatchSelectCompleteData(const ::RdbRealData::BatchRequestCompleteDataSeq& __p_reqSeq, ::RdbRealData::RespondCompleteDataSeq& __p_repSeq)
    {
        return BatchSelectCompleteData(__p_reqSeq, __p_repSeq, 0);
    }
    bool BatchSelectCompleteData(const ::RdbRealData::BatchRequestCompleteDataSeq& __p_reqSeq, ::RdbRealData::RespondCompleteDataSeq& __p_repSeq, const ::Ice::Context& __ctx)
    {
        return BatchSelectCompleteData(__p_reqSeq, __p_repSeq, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_BatchSelectCompleteData(const ::RdbRealData::BatchRequestCompleteDataSeq& __p_reqSeq, const ::IceInternal::Function<void (bool, const ::RdbRealData::RespondCompleteDataSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_BatchSelectCompleteData(__p_reqSeq, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_BatchSelectCompleteData(const ::RdbRealData::BatchRequestCompleteDataSeq& __p_reqSeq, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_BatchSelectCompleteData(__p_reqSeq, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_BatchSelectCompleteData(const ::RdbRealData::BatchRequestCompleteDataSeq& __p_reqSeq, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool, const ::RdbRealData::RespondCompleteDataSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_BatchSelectCompleteData(__p_reqSeq, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_BatchSelectCompleteData(const ::RdbRealData::BatchRequestCompleteDataSeq& __p_reqSeq, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_BatchSelectCompleteData(__p_reqSeq, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_BatchSelectCompleteData(const ::RdbRealData::BatchRequestCompleteDataSeq& __p_reqSeq, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool, const ::RdbRealData::RespondCompleteDataSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_BatchSelectCompleteData(const ::RdbRealData::BatchRequestCompleteDataSeq& __p_reqSeq)
    {
        return begin_BatchSelectCompleteData(__p_reqSeq, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_BatchSelectCompleteData(const ::RdbRealData::BatchRequestCompleteDataSeq& __p_reqSeq, const ::Ice::Context& __ctx)
    {
        return begin_BatchSelectCompleteData(__p_reqSeq, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_BatchSelectCompleteData(const ::RdbRealData::BatchRequestCompleteDataSeq& __p_reqSeq, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_BatchSelectCompleteData(__p_reqSeq, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_BatchSelectCompleteData(const ::RdbRealData::BatchRequestCompleteDataSeq& __p_reqSeq, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_BatchSelectCompleteData(__p_reqSeq, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_BatchSelectCompleteData(const ::RdbRealData::BatchRequestCompleteDataSeq& __p_reqSeq, const ::RdbRealData::Callback_RdbDataOpt_BatchSelectCompleteDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_BatchSelectCompleteData(__p_reqSeq, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_BatchSelectCompleteData(const ::RdbRealData::BatchRequestCompleteDataSeq& __p_reqSeq, const ::Ice::Context& __ctx, const ::RdbRealData::Callback_RdbDataOpt_BatchSelectCompleteDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_BatchSelectCompleteData(__p_reqSeq, &__ctx, __del, __cookie);
    }

    bool end_BatchSelectCompleteData(::RdbRealData::RespondCompleteDataSeq& __p_repSeq, const ::Ice::AsyncResultPtr&);
    
private:

    bool BatchSelectCompleteData(const ::RdbRealData::BatchRequestCompleteDataSeq&, ::RdbRealData::RespondCompleteDataSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_BatchSelectCompleteData(const ::RdbRealData::BatchRequestCompleteDataSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool SelectDataWithCondition(const ::RdbRealData::RequestConditionSequence& __p_reqSeq, ::RdbRealData::RespondCompleteDataSeq& __p_repSeq)
    {
        return SelectDataWithCondition(__p_reqSeq, __p_repSeq, 0);
    }
    bool SelectDataWithCondition(const ::RdbRealData::RequestConditionSequence& __p_reqSeq, ::RdbRealData::RespondCompleteDataSeq& __p_repSeq, const ::Ice::Context& __ctx)
    {
        return SelectDataWithCondition(__p_reqSeq, __p_repSeq, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_SelectDataWithCondition(const ::RdbRealData::RequestConditionSequence& __p_reqSeq, const ::IceInternal::Function<void (bool, const ::RdbRealData::RespondCompleteDataSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_SelectDataWithCondition(__p_reqSeq, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_SelectDataWithCondition(const ::RdbRealData::RequestConditionSequence& __p_reqSeq, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_SelectDataWithCondition(__p_reqSeq, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_SelectDataWithCondition(const ::RdbRealData::RequestConditionSequence& __p_reqSeq, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool, const ::RdbRealData::RespondCompleteDataSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_SelectDataWithCondition(__p_reqSeq, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_SelectDataWithCondition(const ::RdbRealData::RequestConditionSequence& __p_reqSeq, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_SelectDataWithCondition(__p_reqSeq, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_SelectDataWithCondition(const ::RdbRealData::RequestConditionSequence& __p_reqSeq, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool, const ::RdbRealData::RespondCompleteDataSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_SelectDataWithCondition(const ::RdbRealData::RequestConditionSequence& __p_reqSeq)
    {
        return begin_SelectDataWithCondition(__p_reqSeq, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_SelectDataWithCondition(const ::RdbRealData::RequestConditionSequence& __p_reqSeq, const ::Ice::Context& __ctx)
    {
        return begin_SelectDataWithCondition(__p_reqSeq, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_SelectDataWithCondition(const ::RdbRealData::RequestConditionSequence& __p_reqSeq, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SelectDataWithCondition(__p_reqSeq, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SelectDataWithCondition(const ::RdbRealData::RequestConditionSequence& __p_reqSeq, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SelectDataWithCondition(__p_reqSeq, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SelectDataWithCondition(const ::RdbRealData::RequestConditionSequence& __p_reqSeq, const ::RdbRealData::Callback_RdbDataOpt_SelectDataWithConditionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SelectDataWithCondition(__p_reqSeq, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SelectDataWithCondition(const ::RdbRealData::RequestConditionSequence& __p_reqSeq, const ::Ice::Context& __ctx, const ::RdbRealData::Callback_RdbDataOpt_SelectDataWithConditionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SelectDataWithCondition(__p_reqSeq, &__ctx, __del, __cookie);
    }

    bool end_SelectDataWithCondition(::RdbRealData::RespondCompleteDataSeq& __p_repSeq, const ::Ice::AsyncResultPtr&);
    
private:

    bool SelectDataWithCondition(const ::RdbRealData::RequestConditionSequence&, ::RdbRealData::RespondCompleteDataSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_SelectDataWithCondition(const ::RdbRealData::RequestConditionSequence&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool SelectDataCount(const ::RdbRealData::RequestDefaultDataSeq& __p_reqSeq, ::RdbRealData::RespondDataCountSequence& __p_repSeq)
    {
        return SelectDataCount(__p_reqSeq, __p_repSeq, 0);
    }
    bool SelectDataCount(const ::RdbRealData::RequestDefaultDataSeq& __p_reqSeq, ::RdbRealData::RespondDataCountSequence& __p_repSeq, const ::Ice::Context& __ctx)
    {
        return SelectDataCount(__p_reqSeq, __p_repSeq, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_SelectDataCount(const ::RdbRealData::RequestDefaultDataSeq& __p_reqSeq, const ::IceInternal::Function<void (bool, const ::RdbRealData::RespondDataCountSequence&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_SelectDataCount(__p_reqSeq, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_SelectDataCount(const ::RdbRealData::RequestDefaultDataSeq& __p_reqSeq, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_SelectDataCount(__p_reqSeq, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_SelectDataCount(const ::RdbRealData::RequestDefaultDataSeq& __p_reqSeq, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool, const ::RdbRealData::RespondDataCountSequence&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_SelectDataCount(__p_reqSeq, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_SelectDataCount(const ::RdbRealData::RequestDefaultDataSeq& __p_reqSeq, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_SelectDataCount(__p_reqSeq, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_SelectDataCount(const ::RdbRealData::RequestDefaultDataSeq& __p_reqSeq, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool, const ::RdbRealData::RespondDataCountSequence&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_SelectDataCount(const ::RdbRealData::RequestDefaultDataSeq& __p_reqSeq)
    {
        return begin_SelectDataCount(__p_reqSeq, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_SelectDataCount(const ::RdbRealData::RequestDefaultDataSeq& __p_reqSeq, const ::Ice::Context& __ctx)
    {
        return begin_SelectDataCount(__p_reqSeq, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_SelectDataCount(const ::RdbRealData::RequestDefaultDataSeq& __p_reqSeq, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SelectDataCount(__p_reqSeq, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SelectDataCount(const ::RdbRealData::RequestDefaultDataSeq& __p_reqSeq, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SelectDataCount(__p_reqSeq, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SelectDataCount(const ::RdbRealData::RequestDefaultDataSeq& __p_reqSeq, const ::RdbRealData::Callback_RdbDataOpt_SelectDataCountPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SelectDataCount(__p_reqSeq, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SelectDataCount(const ::RdbRealData::RequestDefaultDataSeq& __p_reqSeq, const ::Ice::Context& __ctx, const ::RdbRealData::Callback_RdbDataOpt_SelectDataCountPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SelectDataCount(__p_reqSeq, &__ctx, __del, __cookie);
    }

    bool end_SelectDataCount(::RdbRealData::RespondDataCountSequence& __p_repSeq, const ::Ice::AsyncResultPtr&);
    
private:

    bool SelectDataCount(const ::RdbRealData::RequestDefaultDataSeq&, ::RdbRealData::RespondDataCountSequence&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_SelectDataCount(const ::RdbRealData::RequestDefaultDataSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool UpdateCompleteData(const ::RdbRealData::RespondCompleteDataSeq& __p_reqSeq, ::RdbRealData::RespondCompleteDataSequence& __p_repSeq)
    {
        return UpdateCompleteData(__p_reqSeq, __p_repSeq, 0);
    }
    bool UpdateCompleteData(const ::RdbRealData::RespondCompleteDataSeq& __p_reqSeq, ::RdbRealData::RespondCompleteDataSequence& __p_repSeq, const ::Ice::Context& __ctx)
    {
        return UpdateCompleteData(__p_reqSeq, __p_repSeq, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_UpdateCompleteData(const ::RdbRealData::RespondCompleteDataSeq& __p_reqSeq, const ::IceInternal::Function<void (bool, const ::RdbRealData::RespondCompleteDataSequence&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_UpdateCompleteData(__p_reqSeq, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_UpdateCompleteData(const ::RdbRealData::RespondCompleteDataSeq& __p_reqSeq, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_UpdateCompleteData(__p_reqSeq, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_UpdateCompleteData(const ::RdbRealData::RespondCompleteDataSeq& __p_reqSeq, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool, const ::RdbRealData::RespondCompleteDataSequence&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_UpdateCompleteData(__p_reqSeq, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_UpdateCompleteData(const ::RdbRealData::RespondCompleteDataSeq& __p_reqSeq, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_UpdateCompleteData(__p_reqSeq, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_UpdateCompleteData(const ::RdbRealData::RespondCompleteDataSeq& __p_reqSeq, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool, const ::RdbRealData::RespondCompleteDataSequence&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_UpdateCompleteData(const ::RdbRealData::RespondCompleteDataSeq& __p_reqSeq)
    {
        return begin_UpdateCompleteData(__p_reqSeq, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_UpdateCompleteData(const ::RdbRealData::RespondCompleteDataSeq& __p_reqSeq, const ::Ice::Context& __ctx)
    {
        return begin_UpdateCompleteData(__p_reqSeq, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_UpdateCompleteData(const ::RdbRealData::RespondCompleteDataSeq& __p_reqSeq, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_UpdateCompleteData(__p_reqSeq, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_UpdateCompleteData(const ::RdbRealData::RespondCompleteDataSeq& __p_reqSeq, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_UpdateCompleteData(__p_reqSeq, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_UpdateCompleteData(const ::RdbRealData::RespondCompleteDataSeq& __p_reqSeq, const ::RdbRealData::Callback_RdbDataOpt_UpdateCompleteDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_UpdateCompleteData(__p_reqSeq, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_UpdateCompleteData(const ::RdbRealData::RespondCompleteDataSeq& __p_reqSeq, const ::Ice::Context& __ctx, const ::RdbRealData::Callback_RdbDataOpt_UpdateCompleteDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_UpdateCompleteData(__p_reqSeq, &__ctx, __del, __cookie);
    }

    bool end_UpdateCompleteData(::RdbRealData::RespondCompleteDataSequence& __p_repSeq, const ::Ice::AsyncResultPtr&);
    
private:

    bool UpdateCompleteData(const ::RdbRealData::RespondCompleteDataSeq&, ::RdbRealData::RespondCompleteDataSequence&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_UpdateCompleteData(const ::RdbRealData::RespondCompleteDataSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool DeleteRdbData(const ::RdbRealData::RequestDefaultDataSeq& __p_dataSeq, ::RdbRealData::RequestDefaultDataSequence& __p_errorSeq)
    {
        return DeleteRdbData(__p_dataSeq, __p_errorSeq, 0);
    }
    bool DeleteRdbData(const ::RdbRealData::RequestDefaultDataSeq& __p_dataSeq, ::RdbRealData::RequestDefaultDataSequence& __p_errorSeq, const ::Ice::Context& __ctx)
    {
        return DeleteRdbData(__p_dataSeq, __p_errorSeq, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_DeleteRdbData(const ::RdbRealData::RequestDefaultDataSeq& __p_dataSeq, const ::IceInternal::Function<void (bool, const ::RdbRealData::RequestDefaultDataSequence&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_DeleteRdbData(__p_dataSeq, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_DeleteRdbData(const ::RdbRealData::RequestDefaultDataSeq& __p_dataSeq, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_DeleteRdbData(__p_dataSeq, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_DeleteRdbData(const ::RdbRealData::RequestDefaultDataSeq& __p_dataSeq, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool, const ::RdbRealData::RequestDefaultDataSequence&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_DeleteRdbData(__p_dataSeq, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_DeleteRdbData(const ::RdbRealData::RequestDefaultDataSeq& __p_dataSeq, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_DeleteRdbData(__p_dataSeq, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_DeleteRdbData(const ::RdbRealData::RequestDefaultDataSeq& __p_dataSeq, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool, const ::RdbRealData::RequestDefaultDataSequence&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_DeleteRdbData(const ::RdbRealData::RequestDefaultDataSeq& __p_dataSeq)
    {
        return begin_DeleteRdbData(__p_dataSeq, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_DeleteRdbData(const ::RdbRealData::RequestDefaultDataSeq& __p_dataSeq, const ::Ice::Context& __ctx)
    {
        return begin_DeleteRdbData(__p_dataSeq, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_DeleteRdbData(const ::RdbRealData::RequestDefaultDataSeq& __p_dataSeq, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_DeleteRdbData(__p_dataSeq, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_DeleteRdbData(const ::RdbRealData::RequestDefaultDataSeq& __p_dataSeq, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_DeleteRdbData(__p_dataSeq, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_DeleteRdbData(const ::RdbRealData::RequestDefaultDataSeq& __p_dataSeq, const ::RdbRealData::Callback_RdbDataOpt_DeleteRdbDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_DeleteRdbData(__p_dataSeq, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_DeleteRdbData(const ::RdbRealData::RequestDefaultDataSeq& __p_dataSeq, const ::Ice::Context& __ctx, const ::RdbRealData::Callback_RdbDataOpt_DeleteRdbDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_DeleteRdbData(__p_dataSeq, &__ctx, __del, __cookie);
    }

    bool end_DeleteRdbData(::RdbRealData::RequestDefaultDataSequence& __p_errorSeq, const ::Ice::AsyncResultPtr&);
    
private:

    bool DeleteRdbData(const ::RdbRealData::RequestDefaultDataSeq&, ::RdbRealData::RequestDefaultDataSequence&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_DeleteRdbData(const ::RdbRealData::RequestDefaultDataSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool GetEquipTree(const ::std::string& __p_deviceType, const ::std::string& __p_deviceRid, ::RdbRealData::EquipTreeSequence& __p_treeSeq)
    {
        return GetEquipTree(__p_deviceType, __p_deviceRid, __p_treeSeq, 0);
    }
    bool GetEquipTree(const ::std::string& __p_deviceType, const ::std::string& __p_deviceRid, ::RdbRealData::EquipTreeSequence& __p_treeSeq, const ::Ice::Context& __ctx)
    {
        return GetEquipTree(__p_deviceType, __p_deviceRid, __p_treeSeq, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_GetEquipTree(const ::std::string& __p_deviceType, const ::std::string& __p_deviceRid, const ::IceInternal::Function<void (bool, const ::RdbRealData::EquipTreeSequence&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetEquipTree(__p_deviceType, __p_deviceRid, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetEquipTree(const ::std::string& __p_deviceType, const ::std::string& __p_deviceRid, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetEquipTree(__p_deviceType, __p_deviceRid, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_GetEquipTree(const ::std::string& __p_deviceType, const ::std::string& __p_deviceRid, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool, const ::RdbRealData::EquipTreeSequence&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetEquipTree(__p_deviceType, __p_deviceRid, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetEquipTree(const ::std::string& __p_deviceType, const ::std::string& __p_deviceRid, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetEquipTree(__p_deviceType, __p_deviceRid, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_GetEquipTree(const ::std::string& __p_deviceType, const ::std::string& __p_deviceRid, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool, const ::RdbRealData::EquipTreeSequence&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_GetEquipTree(const ::std::string& __p_deviceType, const ::std::string& __p_deviceRid)
    {
        return begin_GetEquipTree(__p_deviceType, __p_deviceRid, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetEquipTree(const ::std::string& __p_deviceType, const ::std::string& __p_deviceRid, const ::Ice::Context& __ctx)
    {
        return begin_GetEquipTree(__p_deviceType, __p_deviceRid, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetEquipTree(const ::std::string& __p_deviceType, const ::std::string& __p_deviceRid, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetEquipTree(__p_deviceType, __p_deviceRid, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetEquipTree(const ::std::string& __p_deviceType, const ::std::string& __p_deviceRid, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetEquipTree(__p_deviceType, __p_deviceRid, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetEquipTree(const ::std::string& __p_deviceType, const ::std::string& __p_deviceRid, const ::RdbRealData::Callback_RdbDataOpt_GetEquipTreePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetEquipTree(__p_deviceType, __p_deviceRid, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetEquipTree(const ::std::string& __p_deviceType, const ::std::string& __p_deviceRid, const ::Ice::Context& __ctx, const ::RdbRealData::Callback_RdbDataOpt_GetEquipTreePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetEquipTree(__p_deviceType, __p_deviceRid, &__ctx, __del, __cookie);
    }

    bool end_GetEquipTree(::RdbRealData::EquipTreeSequence& __p_treeSeq, const ::Ice::AsyncResultPtr&);
    
private:

    bool GetEquipTree(const ::std::string&, const ::std::string&, ::RdbRealData::EquipTreeSequence&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_GetEquipTree(const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool GetSpecificEquipTree(const ::std::string& __p_deviceType, const ::std::string& __p_deviceRid, const ::std::string& __p_specDeviceType, ::RdbRealData::EquipTreeSequence& __p_treeSeq)
    {
        return GetSpecificEquipTree(__p_deviceType, __p_deviceRid, __p_specDeviceType, __p_treeSeq, 0);
    }
    bool GetSpecificEquipTree(const ::std::string& __p_deviceType, const ::std::string& __p_deviceRid, const ::std::string& __p_specDeviceType, ::RdbRealData::EquipTreeSequence& __p_treeSeq, const ::Ice::Context& __ctx)
    {
        return GetSpecificEquipTree(__p_deviceType, __p_deviceRid, __p_specDeviceType, __p_treeSeq, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_GetSpecificEquipTree(const ::std::string& __p_deviceType, const ::std::string& __p_deviceRid, const ::std::string& __p_specDeviceType, const ::IceInternal::Function<void (bool, const ::RdbRealData::EquipTreeSequence&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetSpecificEquipTree(__p_deviceType, __p_deviceRid, __p_specDeviceType, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetSpecificEquipTree(const ::std::string& __p_deviceType, const ::std::string& __p_deviceRid, const ::std::string& __p_specDeviceType, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetSpecificEquipTree(__p_deviceType, __p_deviceRid, __p_specDeviceType, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_GetSpecificEquipTree(const ::std::string& __p_deviceType, const ::std::string& __p_deviceRid, const ::std::string& __p_specDeviceType, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool, const ::RdbRealData::EquipTreeSequence&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetSpecificEquipTree(__p_deviceType, __p_deviceRid, __p_specDeviceType, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetSpecificEquipTree(const ::std::string& __p_deviceType, const ::std::string& __p_deviceRid, const ::std::string& __p_specDeviceType, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetSpecificEquipTree(__p_deviceType, __p_deviceRid, __p_specDeviceType, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_GetSpecificEquipTree(const ::std::string& __p_deviceType, const ::std::string& __p_deviceRid, const ::std::string& __p_specDeviceType, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool, const ::RdbRealData::EquipTreeSequence&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_GetSpecificEquipTree(const ::std::string& __p_deviceType, const ::std::string& __p_deviceRid, const ::std::string& __p_specDeviceType)
    {
        return begin_GetSpecificEquipTree(__p_deviceType, __p_deviceRid, __p_specDeviceType, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetSpecificEquipTree(const ::std::string& __p_deviceType, const ::std::string& __p_deviceRid, const ::std::string& __p_specDeviceType, const ::Ice::Context& __ctx)
    {
        return begin_GetSpecificEquipTree(__p_deviceType, __p_deviceRid, __p_specDeviceType, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetSpecificEquipTree(const ::std::string& __p_deviceType, const ::std::string& __p_deviceRid, const ::std::string& __p_specDeviceType, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetSpecificEquipTree(__p_deviceType, __p_deviceRid, __p_specDeviceType, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetSpecificEquipTree(const ::std::string& __p_deviceType, const ::std::string& __p_deviceRid, const ::std::string& __p_specDeviceType, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetSpecificEquipTree(__p_deviceType, __p_deviceRid, __p_specDeviceType, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetSpecificEquipTree(const ::std::string& __p_deviceType, const ::std::string& __p_deviceRid, const ::std::string& __p_specDeviceType, const ::RdbRealData::Callback_RdbDataOpt_GetSpecificEquipTreePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetSpecificEquipTree(__p_deviceType, __p_deviceRid, __p_specDeviceType, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetSpecificEquipTree(const ::std::string& __p_deviceType, const ::std::string& __p_deviceRid, const ::std::string& __p_specDeviceType, const ::Ice::Context& __ctx, const ::RdbRealData::Callback_RdbDataOpt_GetSpecificEquipTreePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetSpecificEquipTree(__p_deviceType, __p_deviceRid, __p_specDeviceType, &__ctx, __del, __cookie);
    }

    bool end_GetSpecificEquipTree(::RdbRealData::EquipTreeSequence& __p_treeSeq, const ::Ice::AsyncResultPtr&);
    
private:

    bool GetSpecificEquipTree(const ::std::string&, const ::std::string&, const ::std::string&, ::RdbRealData::EquipTreeSequence&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_GetSpecificEquipTree(const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool GetEquipLineAndStationInfo(const ::std::string& __p_deviceType, const ::std::string& __p_deviceRid, ::RdbRealData::LineAndStationInfo& __p_info)
    {
        return GetEquipLineAndStationInfo(__p_deviceType, __p_deviceRid, __p_info, 0);
    }
    bool GetEquipLineAndStationInfo(const ::std::string& __p_deviceType, const ::std::string& __p_deviceRid, ::RdbRealData::LineAndStationInfo& __p_info, const ::Ice::Context& __ctx)
    {
        return GetEquipLineAndStationInfo(__p_deviceType, __p_deviceRid, __p_info, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_GetEquipLineAndStationInfo(const ::std::string& __p_deviceType, const ::std::string& __p_deviceRid, const ::IceInternal::Function<void (bool, const ::RdbRealData::LineAndStationInfo&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetEquipLineAndStationInfo(__p_deviceType, __p_deviceRid, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetEquipLineAndStationInfo(const ::std::string& __p_deviceType, const ::std::string& __p_deviceRid, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetEquipLineAndStationInfo(__p_deviceType, __p_deviceRid, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_GetEquipLineAndStationInfo(const ::std::string& __p_deviceType, const ::std::string& __p_deviceRid, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool, const ::RdbRealData::LineAndStationInfo&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetEquipLineAndStationInfo(__p_deviceType, __p_deviceRid, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetEquipLineAndStationInfo(const ::std::string& __p_deviceType, const ::std::string& __p_deviceRid, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetEquipLineAndStationInfo(__p_deviceType, __p_deviceRid, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_GetEquipLineAndStationInfo(const ::std::string& __p_deviceType, const ::std::string& __p_deviceRid, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool, const ::RdbRealData::LineAndStationInfo&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_GetEquipLineAndStationInfo(const ::std::string& __p_deviceType, const ::std::string& __p_deviceRid)
    {
        return begin_GetEquipLineAndStationInfo(__p_deviceType, __p_deviceRid, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetEquipLineAndStationInfo(const ::std::string& __p_deviceType, const ::std::string& __p_deviceRid, const ::Ice::Context& __ctx)
    {
        return begin_GetEquipLineAndStationInfo(__p_deviceType, __p_deviceRid, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetEquipLineAndStationInfo(const ::std::string& __p_deviceType, const ::std::string& __p_deviceRid, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetEquipLineAndStationInfo(__p_deviceType, __p_deviceRid, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetEquipLineAndStationInfo(const ::std::string& __p_deviceType, const ::std::string& __p_deviceRid, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetEquipLineAndStationInfo(__p_deviceType, __p_deviceRid, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetEquipLineAndStationInfo(const ::std::string& __p_deviceType, const ::std::string& __p_deviceRid, const ::RdbRealData::Callback_RdbDataOpt_GetEquipLineAndStationInfoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetEquipLineAndStationInfo(__p_deviceType, __p_deviceRid, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetEquipLineAndStationInfo(const ::std::string& __p_deviceType, const ::std::string& __p_deviceRid, const ::Ice::Context& __ctx, const ::RdbRealData::Callback_RdbDataOpt_GetEquipLineAndStationInfoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetEquipLineAndStationInfo(__p_deviceType, __p_deviceRid, &__ctx, __del, __cookie);
    }

    bool end_GetEquipLineAndStationInfo(::RdbRealData::LineAndStationInfo& __p_info, const ::Ice::AsyncResultPtr&);
    
private:

    bool GetEquipLineAndStationInfo(const ::std::string&, const ::std::string&, ::RdbRealData::LineAndStationInfo&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_GetEquipLineAndStationInfo(const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool isOrphanNode(const ::std::string& __p_dataType, const ::std::string& __p_dataRid)
    {
        return isOrphanNode(__p_dataType, __p_dataRid, 0);
    }
    bool isOrphanNode(const ::std::string& __p_dataType, const ::std::string& __p_dataRid, const ::Ice::Context& __ctx)
    {
        return isOrphanNode(__p_dataType, __p_dataRid, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_isOrphanNode(const ::std::string& __p_dataType, const ::std::string& __p_dataRid, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_isOrphanNode(__p_dataType, __p_dataRid, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_isOrphanNode(const ::std::string& __p_dataType, const ::std::string& __p_dataRid, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_isOrphanNode(__p_dataType, __p_dataRid, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_isOrphanNode(const ::std::string& __p_dataType, const ::std::string& __p_dataRid, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_isOrphanNode(__p_dataType, __p_dataRid, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_isOrphanNode(const ::std::string& __p_dataType, const ::std::string& __p_dataRid, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_isOrphanNode(__p_dataType, __p_dataRid, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_isOrphanNode(const ::std::string& __p_dataType, const ::std::string& __p_dataRid, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_isOrphanNode(const ::std::string& __p_dataType, const ::std::string& __p_dataRid)
    {
        return begin_isOrphanNode(__p_dataType, __p_dataRid, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_isOrphanNode(const ::std::string& __p_dataType, const ::std::string& __p_dataRid, const ::Ice::Context& __ctx)
    {
        return begin_isOrphanNode(__p_dataType, __p_dataRid, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_isOrphanNode(const ::std::string& __p_dataType, const ::std::string& __p_dataRid, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_isOrphanNode(__p_dataType, __p_dataRid, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_isOrphanNode(const ::std::string& __p_dataType, const ::std::string& __p_dataRid, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_isOrphanNode(__p_dataType, __p_dataRid, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_isOrphanNode(const ::std::string& __p_dataType, const ::std::string& __p_dataRid, const ::RdbRealData::Callback_RdbDataOpt_isOrphanNodePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_isOrphanNode(__p_dataType, __p_dataRid, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_isOrphanNode(const ::std::string& __p_dataType, const ::std::string& __p_dataRid, const ::Ice::Context& __ctx, const ::RdbRealData::Callback_RdbDataOpt_isOrphanNodePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_isOrphanNode(__p_dataType, __p_dataRid, &__ctx, __del, __cookie);
    }

    bool end_isOrphanNode(const ::Ice::AsyncResultPtr&);
    
private:

    bool isOrphanNode(const ::std::string&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_isOrphanNode(const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool isEmptyNode(const ::std::string& __p_dataType, const ::std::string& __p_dataRid)
    {
        return isEmptyNode(__p_dataType, __p_dataRid, 0);
    }
    bool isEmptyNode(const ::std::string& __p_dataType, const ::std::string& __p_dataRid, const ::Ice::Context& __ctx)
    {
        return isEmptyNode(__p_dataType, __p_dataRid, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_isEmptyNode(const ::std::string& __p_dataType, const ::std::string& __p_dataRid, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_isEmptyNode(__p_dataType, __p_dataRid, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_isEmptyNode(const ::std::string& __p_dataType, const ::std::string& __p_dataRid, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_isEmptyNode(__p_dataType, __p_dataRid, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_isEmptyNode(const ::std::string& __p_dataType, const ::std::string& __p_dataRid, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_isEmptyNode(__p_dataType, __p_dataRid, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_isEmptyNode(const ::std::string& __p_dataType, const ::std::string& __p_dataRid, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_isEmptyNode(__p_dataType, __p_dataRid, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_isEmptyNode(const ::std::string& __p_dataType, const ::std::string& __p_dataRid, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_isEmptyNode(const ::std::string& __p_dataType, const ::std::string& __p_dataRid)
    {
        return begin_isEmptyNode(__p_dataType, __p_dataRid, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_isEmptyNode(const ::std::string& __p_dataType, const ::std::string& __p_dataRid, const ::Ice::Context& __ctx)
    {
        return begin_isEmptyNode(__p_dataType, __p_dataRid, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_isEmptyNode(const ::std::string& __p_dataType, const ::std::string& __p_dataRid, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_isEmptyNode(__p_dataType, __p_dataRid, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_isEmptyNode(const ::std::string& __p_dataType, const ::std::string& __p_dataRid, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_isEmptyNode(__p_dataType, __p_dataRid, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_isEmptyNode(const ::std::string& __p_dataType, const ::std::string& __p_dataRid, const ::RdbRealData::Callback_RdbDataOpt_isEmptyNodePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_isEmptyNode(__p_dataType, __p_dataRid, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_isEmptyNode(const ::std::string& __p_dataType, const ::std::string& __p_dataRid, const ::Ice::Context& __ctx, const ::RdbRealData::Callback_RdbDataOpt_isEmptyNodePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_isEmptyNode(__p_dataType, __p_dataRid, &__ctx, __del, __cookie);
    }

    bool end_isEmptyNode(const ::Ice::AsyncResultPtr&);
    
private:

    bool isEmptyNode(const ::std::string&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_isEmptyNode(const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool IsInvalidDbData(const ::std::string& __p_tableName, const ::std::string& __p_dataRID)
    {
        return IsInvalidDbData(__p_tableName, __p_dataRID, 0);
    }
    bool IsInvalidDbData(const ::std::string& __p_tableName, const ::std::string& __p_dataRID, const ::Ice::Context& __ctx)
    {
        return IsInvalidDbData(__p_tableName, __p_dataRID, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_IsInvalidDbData(const ::std::string& __p_tableName, const ::std::string& __p_dataRID, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_IsInvalidDbData(__p_tableName, __p_dataRID, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_IsInvalidDbData(const ::std::string& __p_tableName, const ::std::string& __p_dataRID, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_IsInvalidDbData(__p_tableName, __p_dataRID, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_IsInvalidDbData(const ::std::string& __p_tableName, const ::std::string& __p_dataRID, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_IsInvalidDbData(__p_tableName, __p_dataRID, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_IsInvalidDbData(const ::std::string& __p_tableName, const ::std::string& __p_dataRID, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_IsInvalidDbData(__p_tableName, __p_dataRID, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_IsInvalidDbData(const ::std::string& __p_tableName, const ::std::string& __p_dataRID, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_IsInvalidDbData(const ::std::string& __p_tableName, const ::std::string& __p_dataRID)
    {
        return begin_IsInvalidDbData(__p_tableName, __p_dataRID, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_IsInvalidDbData(const ::std::string& __p_tableName, const ::std::string& __p_dataRID, const ::Ice::Context& __ctx)
    {
        return begin_IsInvalidDbData(__p_tableName, __p_dataRID, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_IsInvalidDbData(const ::std::string& __p_tableName, const ::std::string& __p_dataRID, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_IsInvalidDbData(__p_tableName, __p_dataRID, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_IsInvalidDbData(const ::std::string& __p_tableName, const ::std::string& __p_dataRID, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_IsInvalidDbData(__p_tableName, __p_dataRID, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_IsInvalidDbData(const ::std::string& __p_tableName, const ::std::string& __p_dataRID, const ::RdbRealData::Callback_RdbDataOpt_IsInvalidDbDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_IsInvalidDbData(__p_tableName, __p_dataRID, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_IsInvalidDbData(const ::std::string& __p_tableName, const ::std::string& __p_dataRID, const ::Ice::Context& __ctx, const ::RdbRealData::Callback_RdbDataOpt_IsInvalidDbDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_IsInvalidDbData(__p_tableName, __p_dataRID, &__ctx, __del, __cookie);
    }

    bool end_IsInvalidDbData(const ::Ice::AsyncResultPtr&);
    
private:

    bool IsInvalidDbData(const ::std::string&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_IsInvalidDbData(const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool GetTopoData(const ::RdbRealData::RequestTopoDataSeq& __p_inDataSeq, ::RdbRealData::ReceiveTopoDataSeq& __p_outDataSeq)
    {
        return GetTopoData(__p_inDataSeq, __p_outDataSeq, 0);
    }
    bool GetTopoData(const ::RdbRealData::RequestTopoDataSeq& __p_inDataSeq, ::RdbRealData::ReceiveTopoDataSeq& __p_outDataSeq, const ::Ice::Context& __ctx)
    {
        return GetTopoData(__p_inDataSeq, __p_outDataSeq, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_GetTopoData(const ::RdbRealData::RequestTopoDataSeq& __p_inDataSeq, const ::IceInternal::Function<void (bool, const ::RdbRealData::ReceiveTopoDataSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetTopoData(__p_inDataSeq, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetTopoData(const ::RdbRealData::RequestTopoDataSeq& __p_inDataSeq, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetTopoData(__p_inDataSeq, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_GetTopoData(const ::RdbRealData::RequestTopoDataSeq& __p_inDataSeq, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool, const ::RdbRealData::ReceiveTopoDataSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetTopoData(__p_inDataSeq, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetTopoData(const ::RdbRealData::RequestTopoDataSeq& __p_inDataSeq, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetTopoData(__p_inDataSeq, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_GetTopoData(const ::RdbRealData::RequestTopoDataSeq& __p_inDataSeq, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool, const ::RdbRealData::ReceiveTopoDataSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_GetTopoData(const ::RdbRealData::RequestTopoDataSeq& __p_inDataSeq)
    {
        return begin_GetTopoData(__p_inDataSeq, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetTopoData(const ::RdbRealData::RequestTopoDataSeq& __p_inDataSeq, const ::Ice::Context& __ctx)
    {
        return begin_GetTopoData(__p_inDataSeq, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetTopoData(const ::RdbRealData::RequestTopoDataSeq& __p_inDataSeq, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetTopoData(__p_inDataSeq, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetTopoData(const ::RdbRealData::RequestTopoDataSeq& __p_inDataSeq, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetTopoData(__p_inDataSeq, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetTopoData(const ::RdbRealData::RequestTopoDataSeq& __p_inDataSeq, const ::RdbRealData::Callback_RdbDataOpt_GetTopoDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetTopoData(__p_inDataSeq, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetTopoData(const ::RdbRealData::RequestTopoDataSeq& __p_inDataSeq, const ::Ice::Context& __ctx, const ::RdbRealData::Callback_RdbDataOpt_GetTopoDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetTopoData(__p_inDataSeq, &__ctx, __del, __cookie);
    }

    bool end_GetTopoData(::RdbRealData::ReceiveTopoDataSeq& __p_outDataSeq, const ::Ice::AsyncResultPtr&);
    
private:

    bool GetTopoData(const ::RdbRealData::RequestTopoDataSeq&, ::RdbRealData::ReceiveTopoDataSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_GetTopoData(const ::RdbRealData::RequestTopoDataSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void GetTopoIslandInfo(::RdbRealData::TopoIslandInfoSeq& __p_islandInfoes)
    {
        GetTopoIslandInfo(__p_islandInfoes, 0);
    }
    void GetTopoIslandInfo(::RdbRealData::TopoIslandInfoSeq& __p_islandInfoes, const ::Ice::Context& __ctx)
    {
        GetTopoIslandInfo(__p_islandInfoes, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_GetTopoIslandInfo(const ::IceInternal::Function<void (const ::RdbRealData::TopoIslandInfoSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetTopoIslandInfo(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetTopoIslandInfo(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetTopoIslandInfo(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_GetTopoIslandInfo(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::RdbRealData::TopoIslandInfoSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetTopoIslandInfo(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetTopoIslandInfo(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetTopoIslandInfo(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_GetTopoIslandInfo(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::RdbRealData::TopoIslandInfoSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_GetTopoIslandInfo()
    {
        return begin_GetTopoIslandInfo(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetTopoIslandInfo(const ::Ice::Context& __ctx)
    {
        return begin_GetTopoIslandInfo(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetTopoIslandInfo(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetTopoIslandInfo(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetTopoIslandInfo(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetTopoIslandInfo(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetTopoIslandInfo(const ::RdbRealData::Callback_RdbDataOpt_GetTopoIslandInfoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetTopoIslandInfo(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetTopoIslandInfo(const ::Ice::Context& __ctx, const ::RdbRealData::Callback_RdbDataOpt_GetTopoIslandInfoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetTopoIslandInfo(&__ctx, __del, __cookie);
    }

    void end_GetTopoIslandInfo(::RdbRealData::TopoIslandInfoSeq& __p_islandInfoes, const ::Ice::AsyncResultPtr&);
    
private:

    void GetTopoIslandInfo(::RdbRealData::TopoIslandInfoSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_GetTopoIslandInfo(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void UpdateTopoData()
    {
        UpdateTopoData(0);
    }
    void UpdateTopoData(const ::Ice::Context& __ctx)
    {
        UpdateTopoData(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_UpdateTopoData(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_UpdateTopoData(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_UpdateTopoData(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_UpdateTopoData(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_UpdateTopoData(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_UpdateTopoData(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_UpdateTopoData(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_UpdateTopoData(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_UpdateTopoData()
    {
        return begin_UpdateTopoData(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_UpdateTopoData(const ::Ice::Context& __ctx)
    {
        return begin_UpdateTopoData(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_UpdateTopoData(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_UpdateTopoData(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_UpdateTopoData(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_UpdateTopoData(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_UpdateTopoData(const ::RdbRealData::Callback_RdbDataOpt_UpdateTopoDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_UpdateTopoData(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_UpdateTopoData(const ::Ice::Context& __ctx, const ::RdbRealData::Callback_RdbDataOpt_UpdateTopoDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_UpdateTopoData(&__ctx, __del, __cookie);
    }

    void end_UpdateTopoData(const ::Ice::AsyncResultPtr&);
    
private:

    void UpdateTopoData(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_UpdateTopoData(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool GetSectionData(const ::std::string& __p_deviceRid, ::RdbRealData::DoubleSeq& __p_analogValues, ::RdbRealData::IntegerSeq& __p_discreteValues)
    {
        return GetSectionData(__p_deviceRid, __p_analogValues, __p_discreteValues, 0);
    }
    bool GetSectionData(const ::std::string& __p_deviceRid, ::RdbRealData::DoubleSeq& __p_analogValues, ::RdbRealData::IntegerSeq& __p_discreteValues, const ::Ice::Context& __ctx)
    {
        return GetSectionData(__p_deviceRid, __p_analogValues, __p_discreteValues, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_GetSectionData(const ::std::string& __p_deviceRid, const ::IceInternal::Function<void (bool, const ::RdbRealData::DoubleSeq&, const ::RdbRealData::IntegerSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetSectionData(__p_deviceRid, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetSectionData(const ::std::string& __p_deviceRid, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetSectionData(__p_deviceRid, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_GetSectionData(const ::std::string& __p_deviceRid, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool, const ::RdbRealData::DoubleSeq&, const ::RdbRealData::IntegerSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetSectionData(__p_deviceRid, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetSectionData(const ::std::string& __p_deviceRid, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetSectionData(__p_deviceRid, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_GetSectionData(const ::std::string& __p_deviceRid, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool, const ::RdbRealData::DoubleSeq&, const ::RdbRealData::IntegerSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_GetSectionData(const ::std::string& __p_deviceRid)
    {
        return begin_GetSectionData(__p_deviceRid, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetSectionData(const ::std::string& __p_deviceRid, const ::Ice::Context& __ctx)
    {
        return begin_GetSectionData(__p_deviceRid, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetSectionData(const ::std::string& __p_deviceRid, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetSectionData(__p_deviceRid, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetSectionData(const ::std::string& __p_deviceRid, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetSectionData(__p_deviceRid, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetSectionData(const ::std::string& __p_deviceRid, const ::RdbRealData::Callback_RdbDataOpt_GetSectionDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetSectionData(__p_deviceRid, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetSectionData(const ::std::string& __p_deviceRid, const ::Ice::Context& __ctx, const ::RdbRealData::Callback_RdbDataOpt_GetSectionDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetSectionData(__p_deviceRid, &__ctx, __del, __cookie);
    }

    bool end_GetSectionData(::RdbRealData::DoubleSeq& __p_analogValues, ::RdbRealData::IntegerSeq& __p_discreteValues, const ::Ice::AsyncResultPtr&);
    
private:

    bool GetSectionData(const ::std::string&, ::RdbRealData::DoubleSeq&, ::RdbRealData::IntegerSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_GetSectionData(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool GetAllSectionData(const ::std::string& __p_deviceRid, ::RdbRealData::SectionValueSeq& __p_analogValues, ::RdbRealData::IntegerSeq& __p_discreteValues)
    {
        return GetAllSectionData(__p_deviceRid, __p_analogValues, __p_discreteValues, 0);
    }
    bool GetAllSectionData(const ::std::string& __p_deviceRid, ::RdbRealData::SectionValueSeq& __p_analogValues, ::RdbRealData::IntegerSeq& __p_discreteValues, const ::Ice::Context& __ctx)
    {
        return GetAllSectionData(__p_deviceRid, __p_analogValues, __p_discreteValues, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_GetAllSectionData(const ::std::string& __p_deviceRid, const ::IceInternal::Function<void (bool, const ::RdbRealData::SectionValueSeq&, const ::RdbRealData::IntegerSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetAllSectionData(__p_deviceRid, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetAllSectionData(const ::std::string& __p_deviceRid, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetAllSectionData(__p_deviceRid, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_GetAllSectionData(const ::std::string& __p_deviceRid, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool, const ::RdbRealData::SectionValueSeq&, const ::RdbRealData::IntegerSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetAllSectionData(__p_deviceRid, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetAllSectionData(const ::std::string& __p_deviceRid, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetAllSectionData(__p_deviceRid, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_GetAllSectionData(const ::std::string& __p_deviceRid, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool, const ::RdbRealData::SectionValueSeq&, const ::RdbRealData::IntegerSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_GetAllSectionData(const ::std::string& __p_deviceRid)
    {
        return begin_GetAllSectionData(__p_deviceRid, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetAllSectionData(const ::std::string& __p_deviceRid, const ::Ice::Context& __ctx)
    {
        return begin_GetAllSectionData(__p_deviceRid, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetAllSectionData(const ::std::string& __p_deviceRid, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetAllSectionData(__p_deviceRid, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetAllSectionData(const ::std::string& __p_deviceRid, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetAllSectionData(__p_deviceRid, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetAllSectionData(const ::std::string& __p_deviceRid, const ::RdbRealData::Callback_RdbDataOpt_GetAllSectionDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetAllSectionData(__p_deviceRid, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetAllSectionData(const ::std::string& __p_deviceRid, const ::Ice::Context& __ctx, const ::RdbRealData::Callback_RdbDataOpt_GetAllSectionDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetAllSectionData(__p_deviceRid, &__ctx, __del, __cookie);
    }

    bool end_GetAllSectionData(::RdbRealData::SectionValueSeq& __p_analogValues, ::RdbRealData::IntegerSeq& __p_discreteValues, const ::Ice::AsyncResultPtr&);
    
private:

    bool GetAllSectionData(const ::std::string&, ::RdbRealData::SectionValueSeq&, ::RdbRealData::IntegerSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_GetAllSectionData(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool updateBreaker(const ::std::string& __p_mrid, const ::RdbRealData::FieldMap& __p_fieldData)
    {
        return updateBreaker(__p_mrid, __p_fieldData, 0);
    }
    bool updateBreaker(const ::std::string& __p_mrid, const ::RdbRealData::FieldMap& __p_fieldData, const ::Ice::Context& __ctx)
    {
        return updateBreaker(__p_mrid, __p_fieldData, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_updateBreaker(const ::std::string& __p_mrid, const ::RdbRealData::FieldMap& __p_fieldData, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_updateBreaker(__p_mrid, __p_fieldData, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_updateBreaker(const ::std::string& __p_mrid, const ::RdbRealData::FieldMap& __p_fieldData, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_updateBreaker(__p_mrid, __p_fieldData, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_updateBreaker(const ::std::string& __p_mrid, const ::RdbRealData::FieldMap& __p_fieldData, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_updateBreaker(__p_mrid, __p_fieldData, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_updateBreaker(const ::std::string& __p_mrid, const ::RdbRealData::FieldMap& __p_fieldData, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_updateBreaker(__p_mrid, __p_fieldData, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_updateBreaker(const ::std::string& __p_mrid, const ::RdbRealData::FieldMap& __p_fieldData, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_updateBreaker(const ::std::string& __p_mrid, const ::RdbRealData::FieldMap& __p_fieldData)
    {
        return begin_updateBreaker(__p_mrid, __p_fieldData, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_updateBreaker(const ::std::string& __p_mrid, const ::RdbRealData::FieldMap& __p_fieldData, const ::Ice::Context& __ctx)
    {
        return begin_updateBreaker(__p_mrid, __p_fieldData, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_updateBreaker(const ::std::string& __p_mrid, const ::RdbRealData::FieldMap& __p_fieldData, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateBreaker(__p_mrid, __p_fieldData, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_updateBreaker(const ::std::string& __p_mrid, const ::RdbRealData::FieldMap& __p_fieldData, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateBreaker(__p_mrid, __p_fieldData, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_updateBreaker(const ::std::string& __p_mrid, const ::RdbRealData::FieldMap& __p_fieldData, const ::RdbRealData::Callback_RdbDataOpt_updateBreakerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateBreaker(__p_mrid, __p_fieldData, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_updateBreaker(const ::std::string& __p_mrid, const ::RdbRealData::FieldMap& __p_fieldData, const ::Ice::Context& __ctx, const ::RdbRealData::Callback_RdbDataOpt_updateBreakerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateBreaker(__p_mrid, __p_fieldData, &__ctx, __del, __cookie);
    }

    bool end_updateBreaker(const ::Ice::AsyncResultPtr&);
    
private:

    bool updateBreaker(const ::std::string&, const ::RdbRealData::FieldMap&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_updateBreaker(const ::std::string&, const ::RdbRealData::FieldMap&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool updateDisconnector(const ::std::string& __p_mrid, const ::RdbRealData::FieldMap& __p_fieldData)
    {
        return updateDisconnector(__p_mrid, __p_fieldData, 0);
    }
    bool updateDisconnector(const ::std::string& __p_mrid, const ::RdbRealData::FieldMap& __p_fieldData, const ::Ice::Context& __ctx)
    {
        return updateDisconnector(__p_mrid, __p_fieldData, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_updateDisconnector(const ::std::string& __p_mrid, const ::RdbRealData::FieldMap& __p_fieldData, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_updateDisconnector(__p_mrid, __p_fieldData, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_updateDisconnector(const ::std::string& __p_mrid, const ::RdbRealData::FieldMap& __p_fieldData, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_updateDisconnector(__p_mrid, __p_fieldData, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_updateDisconnector(const ::std::string& __p_mrid, const ::RdbRealData::FieldMap& __p_fieldData, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_updateDisconnector(__p_mrid, __p_fieldData, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_updateDisconnector(const ::std::string& __p_mrid, const ::RdbRealData::FieldMap& __p_fieldData, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_updateDisconnector(__p_mrid, __p_fieldData, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_updateDisconnector(const ::std::string& __p_mrid, const ::RdbRealData::FieldMap& __p_fieldData, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_updateDisconnector(const ::std::string& __p_mrid, const ::RdbRealData::FieldMap& __p_fieldData)
    {
        return begin_updateDisconnector(__p_mrid, __p_fieldData, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_updateDisconnector(const ::std::string& __p_mrid, const ::RdbRealData::FieldMap& __p_fieldData, const ::Ice::Context& __ctx)
    {
        return begin_updateDisconnector(__p_mrid, __p_fieldData, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_updateDisconnector(const ::std::string& __p_mrid, const ::RdbRealData::FieldMap& __p_fieldData, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateDisconnector(__p_mrid, __p_fieldData, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_updateDisconnector(const ::std::string& __p_mrid, const ::RdbRealData::FieldMap& __p_fieldData, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateDisconnector(__p_mrid, __p_fieldData, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_updateDisconnector(const ::std::string& __p_mrid, const ::RdbRealData::FieldMap& __p_fieldData, const ::RdbRealData::Callback_RdbDataOpt_updateDisconnectorPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateDisconnector(__p_mrid, __p_fieldData, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_updateDisconnector(const ::std::string& __p_mrid, const ::RdbRealData::FieldMap& __p_fieldData, const ::Ice::Context& __ctx, const ::RdbRealData::Callback_RdbDataOpt_updateDisconnectorPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateDisconnector(__p_mrid, __p_fieldData, &__ctx, __del, __cookie);
    }

    bool end_updateDisconnector(const ::Ice::AsyncResultPtr&);
    
private:

    bool updateDisconnector(const ::std::string&, const ::RdbRealData::FieldMap&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_updateDisconnector(const ::std::string&, const ::RdbRealData::FieldMap&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool updatePowerTransformer(const ::std::string& __p_mrid, const ::RdbRealData::FieldMap& __p_fieldData)
    {
        return updatePowerTransformer(__p_mrid, __p_fieldData, 0);
    }
    bool updatePowerTransformer(const ::std::string& __p_mrid, const ::RdbRealData::FieldMap& __p_fieldData, const ::Ice::Context& __ctx)
    {
        return updatePowerTransformer(__p_mrid, __p_fieldData, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_updatePowerTransformer(const ::std::string& __p_mrid, const ::RdbRealData::FieldMap& __p_fieldData, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_updatePowerTransformer(__p_mrid, __p_fieldData, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_updatePowerTransformer(const ::std::string& __p_mrid, const ::RdbRealData::FieldMap& __p_fieldData, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_updatePowerTransformer(__p_mrid, __p_fieldData, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_updatePowerTransformer(const ::std::string& __p_mrid, const ::RdbRealData::FieldMap& __p_fieldData, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_updatePowerTransformer(__p_mrid, __p_fieldData, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_updatePowerTransformer(const ::std::string& __p_mrid, const ::RdbRealData::FieldMap& __p_fieldData, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_updatePowerTransformer(__p_mrid, __p_fieldData, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_updatePowerTransformer(const ::std::string& __p_mrid, const ::RdbRealData::FieldMap& __p_fieldData, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_updatePowerTransformer(const ::std::string& __p_mrid, const ::RdbRealData::FieldMap& __p_fieldData)
    {
        return begin_updatePowerTransformer(__p_mrid, __p_fieldData, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_updatePowerTransformer(const ::std::string& __p_mrid, const ::RdbRealData::FieldMap& __p_fieldData, const ::Ice::Context& __ctx)
    {
        return begin_updatePowerTransformer(__p_mrid, __p_fieldData, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_updatePowerTransformer(const ::std::string& __p_mrid, const ::RdbRealData::FieldMap& __p_fieldData, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updatePowerTransformer(__p_mrid, __p_fieldData, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_updatePowerTransformer(const ::std::string& __p_mrid, const ::RdbRealData::FieldMap& __p_fieldData, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updatePowerTransformer(__p_mrid, __p_fieldData, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_updatePowerTransformer(const ::std::string& __p_mrid, const ::RdbRealData::FieldMap& __p_fieldData, const ::RdbRealData::Callback_RdbDataOpt_updatePowerTransformerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updatePowerTransformer(__p_mrid, __p_fieldData, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_updatePowerTransformer(const ::std::string& __p_mrid, const ::RdbRealData::FieldMap& __p_fieldData, const ::Ice::Context& __ctx, const ::RdbRealData::Callback_RdbDataOpt_updatePowerTransformerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updatePowerTransformer(__p_mrid, __p_fieldData, &__ctx, __del, __cookie);
    }

    bool end_updatePowerTransformer(const ::Ice::AsyncResultPtr&);
    
private:

    bool updatePowerTransformer(const ::std::string&, const ::RdbRealData::FieldMap&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_updatePowerTransformer(const ::std::string&, const ::RdbRealData::FieldMap&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool updateAnalog(const ::std::string& __p_mrid, const ::RdbRealData::FieldMap& __p_fieldData)
    {
        return updateAnalog(__p_mrid, __p_fieldData, 0);
    }
    bool updateAnalog(const ::std::string& __p_mrid, const ::RdbRealData::FieldMap& __p_fieldData, const ::Ice::Context& __ctx)
    {
        return updateAnalog(__p_mrid, __p_fieldData, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_updateAnalog(const ::std::string& __p_mrid, const ::RdbRealData::FieldMap& __p_fieldData, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_updateAnalog(__p_mrid, __p_fieldData, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_updateAnalog(const ::std::string& __p_mrid, const ::RdbRealData::FieldMap& __p_fieldData, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_updateAnalog(__p_mrid, __p_fieldData, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_updateAnalog(const ::std::string& __p_mrid, const ::RdbRealData::FieldMap& __p_fieldData, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_updateAnalog(__p_mrid, __p_fieldData, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_updateAnalog(const ::std::string& __p_mrid, const ::RdbRealData::FieldMap& __p_fieldData, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_updateAnalog(__p_mrid, __p_fieldData, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_updateAnalog(const ::std::string& __p_mrid, const ::RdbRealData::FieldMap& __p_fieldData, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_updateAnalog(const ::std::string& __p_mrid, const ::RdbRealData::FieldMap& __p_fieldData)
    {
        return begin_updateAnalog(__p_mrid, __p_fieldData, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_updateAnalog(const ::std::string& __p_mrid, const ::RdbRealData::FieldMap& __p_fieldData, const ::Ice::Context& __ctx)
    {
        return begin_updateAnalog(__p_mrid, __p_fieldData, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_updateAnalog(const ::std::string& __p_mrid, const ::RdbRealData::FieldMap& __p_fieldData, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateAnalog(__p_mrid, __p_fieldData, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_updateAnalog(const ::std::string& __p_mrid, const ::RdbRealData::FieldMap& __p_fieldData, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateAnalog(__p_mrid, __p_fieldData, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_updateAnalog(const ::std::string& __p_mrid, const ::RdbRealData::FieldMap& __p_fieldData, const ::RdbRealData::Callback_RdbDataOpt_updateAnalogPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateAnalog(__p_mrid, __p_fieldData, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_updateAnalog(const ::std::string& __p_mrid, const ::RdbRealData::FieldMap& __p_fieldData, const ::Ice::Context& __ctx, const ::RdbRealData::Callback_RdbDataOpt_updateAnalogPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateAnalog(__p_mrid, __p_fieldData, &__ctx, __del, __cookie);
    }

    bool end_updateAnalog(const ::Ice::AsyncResultPtr&);
    
private:

    bool updateAnalog(const ::std::string&, const ::RdbRealData::FieldMap&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_updateAnalog(const ::std::string&, const ::RdbRealData::FieldMap&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool updateDiscrete(const ::std::string& __p_mrid, const ::RdbRealData::FieldMap& __p_fieldData)
    {
        return updateDiscrete(__p_mrid, __p_fieldData, 0);
    }
    bool updateDiscrete(const ::std::string& __p_mrid, const ::RdbRealData::FieldMap& __p_fieldData, const ::Ice::Context& __ctx)
    {
        return updateDiscrete(__p_mrid, __p_fieldData, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_updateDiscrete(const ::std::string& __p_mrid, const ::RdbRealData::FieldMap& __p_fieldData, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_updateDiscrete(__p_mrid, __p_fieldData, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_updateDiscrete(const ::std::string& __p_mrid, const ::RdbRealData::FieldMap& __p_fieldData, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_updateDiscrete(__p_mrid, __p_fieldData, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_updateDiscrete(const ::std::string& __p_mrid, const ::RdbRealData::FieldMap& __p_fieldData, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_updateDiscrete(__p_mrid, __p_fieldData, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_updateDiscrete(const ::std::string& __p_mrid, const ::RdbRealData::FieldMap& __p_fieldData, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_updateDiscrete(__p_mrid, __p_fieldData, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_updateDiscrete(const ::std::string& __p_mrid, const ::RdbRealData::FieldMap& __p_fieldData, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_updateDiscrete(const ::std::string& __p_mrid, const ::RdbRealData::FieldMap& __p_fieldData)
    {
        return begin_updateDiscrete(__p_mrid, __p_fieldData, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_updateDiscrete(const ::std::string& __p_mrid, const ::RdbRealData::FieldMap& __p_fieldData, const ::Ice::Context& __ctx)
    {
        return begin_updateDiscrete(__p_mrid, __p_fieldData, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_updateDiscrete(const ::std::string& __p_mrid, const ::RdbRealData::FieldMap& __p_fieldData, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateDiscrete(__p_mrid, __p_fieldData, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_updateDiscrete(const ::std::string& __p_mrid, const ::RdbRealData::FieldMap& __p_fieldData, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateDiscrete(__p_mrid, __p_fieldData, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_updateDiscrete(const ::std::string& __p_mrid, const ::RdbRealData::FieldMap& __p_fieldData, const ::RdbRealData::Callback_RdbDataOpt_updateDiscretePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateDiscrete(__p_mrid, __p_fieldData, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_updateDiscrete(const ::std::string& __p_mrid, const ::RdbRealData::FieldMap& __p_fieldData, const ::Ice::Context& __ctx, const ::RdbRealData::Callback_RdbDataOpt_updateDiscretePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateDiscrete(__p_mrid, __p_fieldData, &__ctx, __del, __cookie);
    }

    bool end_updateDiscrete(const ::Ice::AsyncResultPtr&);
    
private:

    bool updateDiscrete(const ::std::string&, const ::RdbRealData::FieldMap&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_updateDiscrete(const ::std::string&, const ::RdbRealData::FieldMap&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool updateAccumulator(const ::std::string& __p_mrid, const ::RdbRealData::FieldMap& __p_fieldData)
    {
        return updateAccumulator(__p_mrid, __p_fieldData, 0);
    }
    bool updateAccumulator(const ::std::string& __p_mrid, const ::RdbRealData::FieldMap& __p_fieldData, const ::Ice::Context& __ctx)
    {
        return updateAccumulator(__p_mrid, __p_fieldData, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_updateAccumulator(const ::std::string& __p_mrid, const ::RdbRealData::FieldMap& __p_fieldData, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_updateAccumulator(__p_mrid, __p_fieldData, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_updateAccumulator(const ::std::string& __p_mrid, const ::RdbRealData::FieldMap& __p_fieldData, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_updateAccumulator(__p_mrid, __p_fieldData, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_updateAccumulator(const ::std::string& __p_mrid, const ::RdbRealData::FieldMap& __p_fieldData, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_updateAccumulator(__p_mrid, __p_fieldData, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_updateAccumulator(const ::std::string& __p_mrid, const ::RdbRealData::FieldMap& __p_fieldData, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_updateAccumulator(__p_mrid, __p_fieldData, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_updateAccumulator(const ::std::string& __p_mrid, const ::RdbRealData::FieldMap& __p_fieldData, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_updateAccumulator(const ::std::string& __p_mrid, const ::RdbRealData::FieldMap& __p_fieldData)
    {
        return begin_updateAccumulator(__p_mrid, __p_fieldData, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_updateAccumulator(const ::std::string& __p_mrid, const ::RdbRealData::FieldMap& __p_fieldData, const ::Ice::Context& __ctx)
    {
        return begin_updateAccumulator(__p_mrid, __p_fieldData, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_updateAccumulator(const ::std::string& __p_mrid, const ::RdbRealData::FieldMap& __p_fieldData, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateAccumulator(__p_mrid, __p_fieldData, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_updateAccumulator(const ::std::string& __p_mrid, const ::RdbRealData::FieldMap& __p_fieldData, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateAccumulator(__p_mrid, __p_fieldData, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_updateAccumulator(const ::std::string& __p_mrid, const ::RdbRealData::FieldMap& __p_fieldData, const ::RdbRealData::Callback_RdbDataOpt_updateAccumulatorPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateAccumulator(__p_mrid, __p_fieldData, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_updateAccumulator(const ::std::string& __p_mrid, const ::RdbRealData::FieldMap& __p_fieldData, const ::Ice::Context& __ctx, const ::RdbRealData::Callback_RdbDataOpt_updateAccumulatorPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateAccumulator(__p_mrid, __p_fieldData, &__ctx, __del, __cookie);
    }

    bool end_updateAccumulator(const ::Ice::AsyncResultPtr&);
    
private:

    bool updateAccumulator(const ::std::string&, const ::RdbRealData::FieldMap&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_updateAccumulator(const ::std::string&, const ::RdbRealData::FieldMap&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool updateRemoteUnit(const ::std::string& __p_mrid, const ::RdbRealData::FieldMap& __p_fieldData)
    {
        return updateRemoteUnit(__p_mrid, __p_fieldData, 0);
    }
    bool updateRemoteUnit(const ::std::string& __p_mrid, const ::RdbRealData::FieldMap& __p_fieldData, const ::Ice::Context& __ctx)
    {
        return updateRemoteUnit(__p_mrid, __p_fieldData, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_updateRemoteUnit(const ::std::string& __p_mrid, const ::RdbRealData::FieldMap& __p_fieldData, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_updateRemoteUnit(__p_mrid, __p_fieldData, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_updateRemoteUnit(const ::std::string& __p_mrid, const ::RdbRealData::FieldMap& __p_fieldData, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_updateRemoteUnit(__p_mrid, __p_fieldData, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_updateRemoteUnit(const ::std::string& __p_mrid, const ::RdbRealData::FieldMap& __p_fieldData, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_updateRemoteUnit(__p_mrid, __p_fieldData, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_updateRemoteUnit(const ::std::string& __p_mrid, const ::RdbRealData::FieldMap& __p_fieldData, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_updateRemoteUnit(__p_mrid, __p_fieldData, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_updateRemoteUnit(const ::std::string& __p_mrid, const ::RdbRealData::FieldMap& __p_fieldData, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_updateRemoteUnit(const ::std::string& __p_mrid, const ::RdbRealData::FieldMap& __p_fieldData)
    {
        return begin_updateRemoteUnit(__p_mrid, __p_fieldData, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_updateRemoteUnit(const ::std::string& __p_mrid, const ::RdbRealData::FieldMap& __p_fieldData, const ::Ice::Context& __ctx)
    {
        return begin_updateRemoteUnit(__p_mrid, __p_fieldData, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_updateRemoteUnit(const ::std::string& __p_mrid, const ::RdbRealData::FieldMap& __p_fieldData, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateRemoteUnit(__p_mrid, __p_fieldData, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_updateRemoteUnit(const ::std::string& __p_mrid, const ::RdbRealData::FieldMap& __p_fieldData, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateRemoteUnit(__p_mrid, __p_fieldData, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_updateRemoteUnit(const ::std::string& __p_mrid, const ::RdbRealData::FieldMap& __p_fieldData, const ::RdbRealData::Callback_RdbDataOpt_updateRemoteUnitPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateRemoteUnit(__p_mrid, __p_fieldData, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_updateRemoteUnit(const ::std::string& __p_mrid, const ::RdbRealData::FieldMap& __p_fieldData, const ::Ice::Context& __ctx, const ::RdbRealData::Callback_RdbDataOpt_updateRemoteUnitPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateRemoteUnit(__p_mrid, __p_fieldData, &__ctx, __del, __cookie);
    }

    bool end_updateRemoteUnit(const ::Ice::AsyncResultPtr&);
    
private:

    bool updateRemoteUnit(const ::std::string&, const ::RdbRealData::FieldMap&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_updateRemoteUnit(const ::std::string&, const ::RdbRealData::FieldMap&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool getCurvePointDataSeq(const ::RdbRealData::Strings& __p_analogs, ::RdbRealData::CurvePointDataSeq& __p_dataSeq)
    {
        return getCurvePointDataSeq(__p_analogs, __p_dataSeq, 0);
    }
    bool getCurvePointDataSeq(const ::RdbRealData::Strings& __p_analogs, ::RdbRealData::CurvePointDataSeq& __p_dataSeq, const ::Ice::Context& __ctx)
    {
        return getCurvePointDataSeq(__p_analogs, __p_dataSeq, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getCurvePointDataSeq(const ::RdbRealData::Strings& __p_analogs, const ::IceInternal::Function<void (bool, const ::RdbRealData::CurvePointDataSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getCurvePointDataSeq(__p_analogs, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getCurvePointDataSeq(const ::RdbRealData::Strings& __p_analogs, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getCurvePointDataSeq(__p_analogs, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getCurvePointDataSeq(const ::RdbRealData::Strings& __p_analogs, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool, const ::RdbRealData::CurvePointDataSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getCurvePointDataSeq(__p_analogs, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getCurvePointDataSeq(const ::RdbRealData::Strings& __p_analogs, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getCurvePointDataSeq(__p_analogs, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getCurvePointDataSeq(const ::RdbRealData::Strings& __p_analogs, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool, const ::RdbRealData::CurvePointDataSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getCurvePointDataSeq(const ::RdbRealData::Strings& __p_analogs)
    {
        return begin_getCurvePointDataSeq(__p_analogs, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getCurvePointDataSeq(const ::RdbRealData::Strings& __p_analogs, const ::Ice::Context& __ctx)
    {
        return begin_getCurvePointDataSeq(__p_analogs, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getCurvePointDataSeq(const ::RdbRealData::Strings& __p_analogs, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getCurvePointDataSeq(__p_analogs, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getCurvePointDataSeq(const ::RdbRealData::Strings& __p_analogs, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getCurvePointDataSeq(__p_analogs, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getCurvePointDataSeq(const ::RdbRealData::Strings& __p_analogs, const ::RdbRealData::Callback_RdbDataOpt_getCurvePointDataSeqPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getCurvePointDataSeq(__p_analogs, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getCurvePointDataSeq(const ::RdbRealData::Strings& __p_analogs, const ::Ice::Context& __ctx, const ::RdbRealData::Callback_RdbDataOpt_getCurvePointDataSeqPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getCurvePointDataSeq(__p_analogs, &__ctx, __del, __cookie);
    }

    bool end_getCurvePointDataSeq(::RdbRealData::CurvePointDataSeq& __p_dataSeq, const ::Ice::AsyncResultPtr&);
    
private:

    bool getCurvePointDataSeq(const ::RdbRealData::Strings&, ::RdbRealData::CurvePointDataSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getCurvePointDataSeq(const ::RdbRealData::Strings&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<RdbDataOpt> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<RdbDataOpt*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<RdbDataOpt> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<RdbDataOpt*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<RdbDataOpt> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<RdbDataOpt*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<RdbDataOpt> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<RdbDataOpt*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<RdbDataOpt> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<RdbDataOpt*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<RdbDataOpt> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<RdbDataOpt*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<RdbDataOpt> ice_secure(bool __secure) const
    {
        return dynamic_cast<RdbDataOpt*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<RdbDataOpt> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<RdbDataOpt*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<RdbDataOpt> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<RdbDataOpt*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<RdbDataOpt> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<RdbDataOpt*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<RdbDataOpt> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<RdbDataOpt*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<RdbDataOpt> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<RdbDataOpt*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<RdbDataOpt> ice_twoway() const
    {
        return dynamic_cast<RdbDataOpt*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<RdbDataOpt> ice_oneway() const
    {
        return dynamic_cast<RdbDataOpt*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<RdbDataOpt> ice_batchOneway() const
    {
        return dynamic_cast<RdbDataOpt*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<RdbDataOpt> ice_datagram() const
    {
        return dynamic_cast<RdbDataOpt*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<RdbDataOpt> ice_batchDatagram() const
    {
        return dynamic_cast<RdbDataOpt*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<RdbDataOpt> ice_compress(bool __compress) const
    {
        return dynamic_cast<RdbDataOpt*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<RdbDataOpt> ice_timeout(int __timeout) const
    {
        return dynamic_cast<RdbDataOpt*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<RdbDataOpt> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<RdbDataOpt*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<RdbDataOpt> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<RdbDataOpt*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

namespace RdbWarningData
{

class RdbAlarmData : virtual public ::IceProxy::Ice::Object
{
public:

    void SendAlarmData(const ::RdbWarningData::WarningInfoSeq& __p_seq)
    {
        SendAlarmData(__p_seq, 0);
    }
    void SendAlarmData(const ::RdbWarningData::WarningInfoSeq& __p_seq, const ::Ice::Context& __ctx)
    {
        SendAlarmData(__p_seq, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_SendAlarmData(const ::RdbWarningData::WarningInfoSeq& __p_seq, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_SendAlarmData(__p_seq, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_SendAlarmData(const ::RdbWarningData::WarningInfoSeq& __p_seq, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_SendAlarmData(__p_seq, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_SendAlarmData(const ::RdbWarningData::WarningInfoSeq& __p_seq, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_SendAlarmData(__p_seq, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_SendAlarmData(const ::RdbWarningData::WarningInfoSeq& __p_seq, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_SendAlarmData(__p_seq, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_SendAlarmData(const ::RdbWarningData::WarningInfoSeq& __p_seq)
    {
        return begin_SendAlarmData(__p_seq, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_SendAlarmData(const ::RdbWarningData::WarningInfoSeq& __p_seq, const ::Ice::Context& __ctx)
    {
        return begin_SendAlarmData(__p_seq, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_SendAlarmData(const ::RdbWarningData::WarningInfoSeq& __p_seq, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SendAlarmData(__p_seq, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SendAlarmData(const ::RdbWarningData::WarningInfoSeq& __p_seq, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SendAlarmData(__p_seq, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SendAlarmData(const ::RdbWarningData::WarningInfoSeq& __p_seq, const ::RdbWarningData::Callback_RdbAlarmData_SendAlarmDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SendAlarmData(__p_seq, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SendAlarmData(const ::RdbWarningData::WarningInfoSeq& __p_seq, const ::Ice::Context& __ctx, const ::RdbWarningData::Callback_RdbAlarmData_SendAlarmDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SendAlarmData(__p_seq, &__ctx, __del, __cookie);
    }

    void end_SendAlarmData(const ::Ice::AsyncResultPtr&);
    
private:

    void SendAlarmData(const ::RdbWarningData::WarningInfoSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_SendAlarmData(const ::RdbWarningData::WarningInfoSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<RdbAlarmData> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<RdbAlarmData*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<RdbAlarmData> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<RdbAlarmData*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<RdbAlarmData> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<RdbAlarmData*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<RdbAlarmData> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<RdbAlarmData*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<RdbAlarmData> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<RdbAlarmData*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<RdbAlarmData> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<RdbAlarmData*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<RdbAlarmData> ice_secure(bool __secure) const
    {
        return dynamic_cast<RdbAlarmData*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<RdbAlarmData> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<RdbAlarmData*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<RdbAlarmData> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<RdbAlarmData*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<RdbAlarmData> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<RdbAlarmData*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<RdbAlarmData> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<RdbAlarmData*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<RdbAlarmData> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<RdbAlarmData*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<RdbAlarmData> ice_twoway() const
    {
        return dynamic_cast<RdbAlarmData*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<RdbAlarmData> ice_oneway() const
    {
        return dynamic_cast<RdbAlarmData*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<RdbAlarmData> ice_batchOneway() const
    {
        return dynamic_cast<RdbAlarmData*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<RdbAlarmData> ice_datagram() const
    {
        return dynamic_cast<RdbAlarmData*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<RdbAlarmData> ice_batchDatagram() const
    {
        return dynamic_cast<RdbAlarmData*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<RdbAlarmData> ice_compress(bool __compress) const
    {
        return dynamic_cast<RdbAlarmData*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<RdbAlarmData> ice_timeout(int __timeout) const
    {
        return dynamic_cast<RdbAlarmData*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<RdbAlarmData> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<RdbAlarmData*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<RdbAlarmData> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<RdbAlarmData*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class RdbAllAlarmData : virtual public ::IceProxy::Ice::Object
{
public:

    void SendAllAlarmData(const ::RdbWarningData::WarningInfoSeq& __p_seq)
    {
        SendAllAlarmData(__p_seq, 0);
    }
    void SendAllAlarmData(const ::RdbWarningData::WarningInfoSeq& __p_seq, const ::Ice::Context& __ctx)
    {
        SendAllAlarmData(__p_seq, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_SendAllAlarmData(const ::RdbWarningData::WarningInfoSeq& __p_seq, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_SendAllAlarmData(__p_seq, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_SendAllAlarmData(const ::RdbWarningData::WarningInfoSeq& __p_seq, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_SendAllAlarmData(__p_seq, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_SendAllAlarmData(const ::RdbWarningData::WarningInfoSeq& __p_seq, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_SendAllAlarmData(__p_seq, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_SendAllAlarmData(const ::RdbWarningData::WarningInfoSeq& __p_seq, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_SendAllAlarmData(__p_seq, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_SendAllAlarmData(const ::RdbWarningData::WarningInfoSeq& __p_seq)
    {
        return begin_SendAllAlarmData(__p_seq, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_SendAllAlarmData(const ::RdbWarningData::WarningInfoSeq& __p_seq, const ::Ice::Context& __ctx)
    {
        return begin_SendAllAlarmData(__p_seq, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_SendAllAlarmData(const ::RdbWarningData::WarningInfoSeq& __p_seq, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SendAllAlarmData(__p_seq, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SendAllAlarmData(const ::RdbWarningData::WarningInfoSeq& __p_seq, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SendAllAlarmData(__p_seq, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SendAllAlarmData(const ::RdbWarningData::WarningInfoSeq& __p_seq, const ::RdbWarningData::Callback_RdbAllAlarmData_SendAllAlarmDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SendAllAlarmData(__p_seq, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SendAllAlarmData(const ::RdbWarningData::WarningInfoSeq& __p_seq, const ::Ice::Context& __ctx, const ::RdbWarningData::Callback_RdbAllAlarmData_SendAllAlarmDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SendAllAlarmData(__p_seq, &__ctx, __del, __cookie);
    }

    void end_SendAllAlarmData(const ::Ice::AsyncResultPtr&);
    
private:

    void SendAllAlarmData(const ::RdbWarningData::WarningInfoSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_SendAllAlarmData(const ::RdbWarningData::WarningInfoSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<RdbAllAlarmData> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<RdbAllAlarmData*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<RdbAllAlarmData> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<RdbAllAlarmData*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<RdbAllAlarmData> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<RdbAllAlarmData*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<RdbAllAlarmData> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<RdbAllAlarmData*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<RdbAllAlarmData> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<RdbAllAlarmData*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<RdbAllAlarmData> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<RdbAllAlarmData*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<RdbAllAlarmData> ice_secure(bool __secure) const
    {
        return dynamic_cast<RdbAllAlarmData*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<RdbAllAlarmData> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<RdbAllAlarmData*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<RdbAllAlarmData> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<RdbAllAlarmData*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<RdbAllAlarmData> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<RdbAllAlarmData*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<RdbAllAlarmData> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<RdbAllAlarmData*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<RdbAllAlarmData> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<RdbAllAlarmData*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<RdbAllAlarmData> ice_twoway() const
    {
        return dynamic_cast<RdbAllAlarmData*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<RdbAllAlarmData> ice_oneway() const
    {
        return dynamic_cast<RdbAllAlarmData*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<RdbAllAlarmData> ice_batchOneway() const
    {
        return dynamic_cast<RdbAllAlarmData*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<RdbAllAlarmData> ice_datagram() const
    {
        return dynamic_cast<RdbAllAlarmData*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<RdbAllAlarmData> ice_batchDatagram() const
    {
        return dynamic_cast<RdbAllAlarmData*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<RdbAllAlarmData> ice_compress(bool __compress) const
    {
        return dynamic_cast<RdbAllAlarmData*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<RdbAllAlarmData> ice_timeout(int __timeout) const
    {
        return dynamic_cast<RdbAllAlarmData*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<RdbAllAlarmData> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<RdbAllAlarmData*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<RdbAllAlarmData> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<RdbAllAlarmData*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class RdbWarningBuf : virtual public ::IceProxy::Ice::Object
{
public:

    void SendOutAnalogWarningBufs(const ::RdbWarningData::OutAnalogWarningBufSeq& __p_seq)
    {
        SendOutAnalogWarningBufs(__p_seq, 0);
    }
    void SendOutAnalogWarningBufs(const ::RdbWarningData::OutAnalogWarningBufSeq& __p_seq, const ::Ice::Context& __ctx)
    {
        SendOutAnalogWarningBufs(__p_seq, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_SendOutAnalogWarningBufs(const ::RdbWarningData::OutAnalogWarningBufSeq& __p_seq, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_SendOutAnalogWarningBufs(__p_seq, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_SendOutAnalogWarningBufs(const ::RdbWarningData::OutAnalogWarningBufSeq& __p_seq, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_SendOutAnalogWarningBufs(__p_seq, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_SendOutAnalogWarningBufs(const ::RdbWarningData::OutAnalogWarningBufSeq& __p_seq, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_SendOutAnalogWarningBufs(__p_seq, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_SendOutAnalogWarningBufs(const ::RdbWarningData::OutAnalogWarningBufSeq& __p_seq, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_SendOutAnalogWarningBufs(__p_seq, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_SendOutAnalogWarningBufs(const ::RdbWarningData::OutAnalogWarningBufSeq& __p_seq)
    {
        return begin_SendOutAnalogWarningBufs(__p_seq, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_SendOutAnalogWarningBufs(const ::RdbWarningData::OutAnalogWarningBufSeq& __p_seq, const ::Ice::Context& __ctx)
    {
        return begin_SendOutAnalogWarningBufs(__p_seq, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_SendOutAnalogWarningBufs(const ::RdbWarningData::OutAnalogWarningBufSeq& __p_seq, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SendOutAnalogWarningBufs(__p_seq, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SendOutAnalogWarningBufs(const ::RdbWarningData::OutAnalogWarningBufSeq& __p_seq, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SendOutAnalogWarningBufs(__p_seq, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SendOutAnalogWarningBufs(const ::RdbWarningData::OutAnalogWarningBufSeq& __p_seq, const ::RdbWarningData::Callback_RdbWarningBuf_SendOutAnalogWarningBufsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SendOutAnalogWarningBufs(__p_seq, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SendOutAnalogWarningBufs(const ::RdbWarningData::OutAnalogWarningBufSeq& __p_seq, const ::Ice::Context& __ctx, const ::RdbWarningData::Callback_RdbWarningBuf_SendOutAnalogWarningBufsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SendOutAnalogWarningBufs(__p_seq, &__ctx, __del, __cookie);
    }

    void end_SendOutAnalogWarningBufs(const ::Ice::AsyncResultPtr&);
    
private:

    void SendOutAnalogWarningBufs(const ::RdbWarningData::OutAnalogWarningBufSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_SendOutAnalogWarningBufs(const ::RdbWarningData::OutAnalogWarningBufSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void SendChangedUnitWarningBufs(const ::RdbWarningData::ChangedUnitWarningBufSeq& __p_seq)
    {
        SendChangedUnitWarningBufs(__p_seq, 0);
    }
    void SendChangedUnitWarningBufs(const ::RdbWarningData::ChangedUnitWarningBufSeq& __p_seq, const ::Ice::Context& __ctx)
    {
        SendChangedUnitWarningBufs(__p_seq, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_SendChangedUnitWarningBufs(const ::RdbWarningData::ChangedUnitWarningBufSeq& __p_seq, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_SendChangedUnitWarningBufs(__p_seq, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_SendChangedUnitWarningBufs(const ::RdbWarningData::ChangedUnitWarningBufSeq& __p_seq, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_SendChangedUnitWarningBufs(__p_seq, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_SendChangedUnitWarningBufs(const ::RdbWarningData::ChangedUnitWarningBufSeq& __p_seq, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_SendChangedUnitWarningBufs(__p_seq, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_SendChangedUnitWarningBufs(const ::RdbWarningData::ChangedUnitWarningBufSeq& __p_seq, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_SendChangedUnitWarningBufs(__p_seq, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_SendChangedUnitWarningBufs(const ::RdbWarningData::ChangedUnitWarningBufSeq& __p_seq)
    {
        return begin_SendChangedUnitWarningBufs(__p_seq, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_SendChangedUnitWarningBufs(const ::RdbWarningData::ChangedUnitWarningBufSeq& __p_seq, const ::Ice::Context& __ctx)
    {
        return begin_SendChangedUnitWarningBufs(__p_seq, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_SendChangedUnitWarningBufs(const ::RdbWarningData::ChangedUnitWarningBufSeq& __p_seq, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SendChangedUnitWarningBufs(__p_seq, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SendChangedUnitWarningBufs(const ::RdbWarningData::ChangedUnitWarningBufSeq& __p_seq, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SendChangedUnitWarningBufs(__p_seq, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SendChangedUnitWarningBufs(const ::RdbWarningData::ChangedUnitWarningBufSeq& __p_seq, const ::RdbWarningData::Callback_RdbWarningBuf_SendChangedUnitWarningBufsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SendChangedUnitWarningBufs(__p_seq, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SendChangedUnitWarningBufs(const ::RdbWarningData::ChangedUnitWarningBufSeq& __p_seq, const ::Ice::Context& __ctx, const ::RdbWarningData::Callback_RdbWarningBuf_SendChangedUnitWarningBufsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SendChangedUnitWarningBufs(__p_seq, &__ctx, __del, __cookie);
    }

    void end_SendChangedUnitWarningBufs(const ::Ice::AsyncResultPtr&);
    
private:

    void SendChangedUnitWarningBufs(const ::RdbWarningData::ChangedUnitWarningBufSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_SendChangedUnitWarningBufs(const ::RdbWarningData::ChangedUnitWarningBufSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void SendChangedChannelWarningBufs(const ::RdbWarningData::ChangedChannelWarningBufSeq& __p_seq)
    {
        SendChangedChannelWarningBufs(__p_seq, 0);
    }
    void SendChangedChannelWarningBufs(const ::RdbWarningData::ChangedChannelWarningBufSeq& __p_seq, const ::Ice::Context& __ctx)
    {
        SendChangedChannelWarningBufs(__p_seq, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_SendChangedChannelWarningBufs(const ::RdbWarningData::ChangedChannelWarningBufSeq& __p_seq, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_SendChangedChannelWarningBufs(__p_seq, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_SendChangedChannelWarningBufs(const ::RdbWarningData::ChangedChannelWarningBufSeq& __p_seq, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_SendChangedChannelWarningBufs(__p_seq, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_SendChangedChannelWarningBufs(const ::RdbWarningData::ChangedChannelWarningBufSeq& __p_seq, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_SendChangedChannelWarningBufs(__p_seq, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_SendChangedChannelWarningBufs(const ::RdbWarningData::ChangedChannelWarningBufSeq& __p_seq, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_SendChangedChannelWarningBufs(__p_seq, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_SendChangedChannelWarningBufs(const ::RdbWarningData::ChangedChannelWarningBufSeq& __p_seq)
    {
        return begin_SendChangedChannelWarningBufs(__p_seq, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_SendChangedChannelWarningBufs(const ::RdbWarningData::ChangedChannelWarningBufSeq& __p_seq, const ::Ice::Context& __ctx)
    {
        return begin_SendChangedChannelWarningBufs(__p_seq, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_SendChangedChannelWarningBufs(const ::RdbWarningData::ChangedChannelWarningBufSeq& __p_seq, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SendChangedChannelWarningBufs(__p_seq, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SendChangedChannelWarningBufs(const ::RdbWarningData::ChangedChannelWarningBufSeq& __p_seq, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SendChangedChannelWarningBufs(__p_seq, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SendChangedChannelWarningBufs(const ::RdbWarningData::ChangedChannelWarningBufSeq& __p_seq, const ::RdbWarningData::Callback_RdbWarningBuf_SendChangedChannelWarningBufsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SendChangedChannelWarningBufs(__p_seq, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SendChangedChannelWarningBufs(const ::RdbWarningData::ChangedChannelWarningBufSeq& __p_seq, const ::Ice::Context& __ctx, const ::RdbWarningData::Callback_RdbWarningBuf_SendChangedChannelWarningBufsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SendChangedChannelWarningBufs(__p_seq, &__ctx, __del, __cookie);
    }

    void end_SendChangedChannelWarningBufs(const ::Ice::AsyncResultPtr&);
    
private:

    void SendChangedChannelWarningBufs(const ::RdbWarningData::ChangedChannelWarningBufSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_SendChangedChannelWarningBufs(const ::RdbWarningData::ChangedChannelWarningBufSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<RdbWarningBuf> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<RdbWarningBuf*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<RdbWarningBuf> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<RdbWarningBuf*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<RdbWarningBuf> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<RdbWarningBuf*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<RdbWarningBuf> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<RdbWarningBuf*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<RdbWarningBuf> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<RdbWarningBuf*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<RdbWarningBuf> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<RdbWarningBuf*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<RdbWarningBuf> ice_secure(bool __secure) const
    {
        return dynamic_cast<RdbWarningBuf*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<RdbWarningBuf> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<RdbWarningBuf*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<RdbWarningBuf> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<RdbWarningBuf*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<RdbWarningBuf> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<RdbWarningBuf*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<RdbWarningBuf> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<RdbWarningBuf*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<RdbWarningBuf> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<RdbWarningBuf*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<RdbWarningBuf> ice_twoway() const
    {
        return dynamic_cast<RdbWarningBuf*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<RdbWarningBuf> ice_oneway() const
    {
        return dynamic_cast<RdbWarningBuf*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<RdbWarningBuf> ice_batchOneway() const
    {
        return dynamic_cast<RdbWarningBuf*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<RdbWarningBuf> ice_datagram() const
    {
        return dynamic_cast<RdbWarningBuf*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<RdbWarningBuf> ice_batchDatagram() const
    {
        return dynamic_cast<RdbWarningBuf*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<RdbWarningBuf> ice_compress(bool __compress) const
    {
        return dynamic_cast<RdbWarningBuf*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<RdbWarningBuf> ice_timeout(int __timeout) const
    {
        return dynamic_cast<RdbWarningBuf*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<RdbWarningBuf> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<RdbWarningBuf*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<RdbWarningBuf> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<RdbWarningBuf*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace RdbRealData
{

class RdbRealDataRequest : virtual public ::Ice::Object
{
public:

    typedef RdbRealDataRequestPrx ProxyType;
    typedef RdbRealDataRequestPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void RequestDefaultData(const ::RdbRealData::RequestDefaultDataSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___RequestDefaultData(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void RequestSpecificData(const ::RdbRealData::RequestSpecficDataSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___RequestSpecificData(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void RequestCompleteData(const ::RdbRealData::RequestCompleteDataSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___RequestCompleteData(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void SendTopoDataRequest(const ::RdbRealData::RequestTopoDataSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___SendTopoDataRequest(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
};

inline bool operator==(const RdbRealDataRequest& l, const RdbRealDataRequest& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const RdbRealDataRequest& l, const RdbRealDataRequest& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class RdbRealDataRespond : virtual public ::Ice::Object
{
public:

    typedef RdbRealDataRespondPrx ProxyType;
    typedef RdbRealDataRespondPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void RespondDefaultData(const ::RdbRealData::RespondDefaultDataSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___RespondDefaultData(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void RespondSpecificData(const ::RdbRealData::RespondSpecficDataSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___RespondSpecificData(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void RespondCompleteData(const ::RdbRealData::RespondCompleteDataSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___RespondCompleteData(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void SendTopoDataRespond(const ::RdbRealData::ReceiveTopoDataSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___SendTopoDataRespond(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
};

inline bool operator==(const RdbRealDataRespond& l, const RdbRealDataRespond& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const RdbRealDataRespond& l, const RdbRealDataRespond& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class RdbDataOpt : virtual public ::Ice::Object
{
public:

    typedef RdbDataOptPrx ProxyType;
    typedef RdbDataOptPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual bool InsertData(const ::RdbRealData::RespondCompleteDataSeq&, ::RdbRealData::RespondCompleteDataSequence&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___InsertData(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool SelectDefaultData(const ::RdbRealData::RequestDefaultDataSeq&, ::RdbRealData::RespondDefaultDataSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___SelectDefaultData(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool SelectSpecificData(const ::RdbRealData::RequestSpecficDataSeq&, ::RdbRealData::RespondSpecficDataSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___SelectSpecificData(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool SelectCompleteData(const ::RdbRealData::RequestCompleteDataSeq&, ::RdbRealData::RespondCompleteDataSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___SelectCompleteData(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool BatchSelectCompleteData(const ::RdbRealData::BatchRequestCompleteDataSeq&, ::RdbRealData::RespondCompleteDataSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___BatchSelectCompleteData(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool SelectDataWithCondition(const ::RdbRealData::RequestConditionSequence&, ::RdbRealData::RespondCompleteDataSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___SelectDataWithCondition(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool SelectDataCount(const ::RdbRealData::RequestDefaultDataSeq&, ::RdbRealData::RespondDataCountSequence&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___SelectDataCount(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool UpdateCompleteData(const ::RdbRealData::RespondCompleteDataSeq&, ::RdbRealData::RespondCompleteDataSequence&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___UpdateCompleteData(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool DeleteRdbData(const ::RdbRealData::RequestDefaultDataSeq&, ::RdbRealData::RequestDefaultDataSequence&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___DeleteRdbData(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool GetEquipTree(const ::std::string&, const ::std::string&, ::RdbRealData::EquipTreeSequence&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___GetEquipTree(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool GetSpecificEquipTree(const ::std::string&, const ::std::string&, const ::std::string&, ::RdbRealData::EquipTreeSequence&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___GetSpecificEquipTree(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool GetEquipLineAndStationInfo(const ::std::string&, const ::std::string&, ::RdbRealData::LineAndStationInfo&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___GetEquipLineAndStationInfo(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool isOrphanNode(const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___isOrphanNode(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool isEmptyNode(const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___isEmptyNode(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool IsInvalidDbData(const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___IsInvalidDbData(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool GetTopoData(const ::RdbRealData::RequestTopoDataSeq&, ::RdbRealData::ReceiveTopoDataSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___GetTopoData(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void GetTopoIslandInfo(::RdbRealData::TopoIslandInfoSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___GetTopoIslandInfo(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void UpdateTopoData(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___UpdateTopoData(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool GetSectionData(const ::std::string&, ::RdbRealData::DoubleSeq&, ::RdbRealData::IntegerSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___GetSectionData(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool GetAllSectionData(const ::std::string&, ::RdbRealData::SectionValueSeq&, ::RdbRealData::IntegerSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___GetAllSectionData(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool updateBreaker(const ::std::string&, const ::RdbRealData::FieldMap&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___updateBreaker(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool updateDisconnector(const ::std::string&, const ::RdbRealData::FieldMap&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___updateDisconnector(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool updatePowerTransformer(const ::std::string&, const ::RdbRealData::FieldMap&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___updatePowerTransformer(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool updateAnalog(const ::std::string&, const ::RdbRealData::FieldMap&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___updateAnalog(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool updateDiscrete(const ::std::string&, const ::RdbRealData::FieldMap&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___updateDiscrete(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool updateAccumulator(const ::std::string&, const ::RdbRealData::FieldMap&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___updateAccumulator(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool updateRemoteUnit(const ::std::string&, const ::RdbRealData::FieldMap&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___updateRemoteUnit(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool getCurvePointDataSeq(const ::RdbRealData::Strings&, ::RdbRealData::CurvePointDataSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getCurvePointDataSeq(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
};

inline bool operator==(const RdbDataOpt& l, const RdbDataOpt& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const RdbDataOpt& l, const RdbDataOpt& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace RdbWarningData
{

class RdbAlarmData : virtual public ::Ice::Object
{
public:

    typedef RdbAlarmDataPrx ProxyType;
    typedef RdbAlarmDataPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void SendAlarmData(const ::RdbWarningData::WarningInfoSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___SendAlarmData(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
};

inline bool operator==(const RdbAlarmData& l, const RdbAlarmData& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const RdbAlarmData& l, const RdbAlarmData& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class RdbAllAlarmData : virtual public ::Ice::Object
{
public:

    typedef RdbAllAlarmDataPrx ProxyType;
    typedef RdbAllAlarmDataPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void SendAllAlarmData(const ::RdbWarningData::WarningInfoSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___SendAllAlarmData(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
};

inline bool operator==(const RdbAllAlarmData& l, const RdbAllAlarmData& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const RdbAllAlarmData& l, const RdbAllAlarmData& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class RdbWarningBuf : virtual public ::Ice::Object
{
public:

    typedef RdbWarningBufPrx ProxyType;
    typedef RdbWarningBufPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void SendOutAnalogWarningBufs(const ::RdbWarningData::OutAnalogWarningBufSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___SendOutAnalogWarningBufs(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void SendChangedUnitWarningBufs(const ::RdbWarningData::ChangedUnitWarningBufSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___SendChangedUnitWarningBufs(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void SendChangedChannelWarningBufs(const ::RdbWarningData::ChangedChannelWarningBufSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___SendChangedChannelWarningBufs(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
};

inline bool operator==(const RdbWarningBuf& l, const RdbWarningBuf& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const RdbWarningBuf& l, const RdbWarningBuf& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace RdbRealData
{

template<class T>
class CallbackNC_RdbRealDataRequest_RequestDefaultData : public Callback_RdbRealDataRequest_RequestDefaultData_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_RdbRealDataRequest_RequestDefaultData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_RdbRealDataRequest_RequestDefaultDataPtr
newCallback_RdbRealDataRequest_RequestDefaultData(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbRealDataRequest_RequestDefaultData<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RdbRealDataRequest_RequestDefaultDataPtr
newCallback_RdbRealDataRequest_RequestDefaultData(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbRealDataRequest_RequestDefaultData<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_RdbRealDataRequest_RequestDefaultDataPtr
newCallback_RdbRealDataRequest_RequestDefaultData(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbRealDataRequest_RequestDefaultData<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RdbRealDataRequest_RequestDefaultDataPtr
newCallback_RdbRealDataRequest_RequestDefaultData(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbRealDataRequest_RequestDefaultData<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_RdbRealDataRequest_RequestDefaultData : public Callback_RdbRealDataRequest_RequestDefaultData_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_RdbRealDataRequest_RequestDefaultData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_RdbRealDataRequest_RequestDefaultDataPtr
newCallback_RdbRealDataRequest_RequestDefaultData(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbRealDataRequest_RequestDefaultData<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RdbRealDataRequest_RequestDefaultDataPtr
newCallback_RdbRealDataRequest_RequestDefaultData(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbRealDataRequest_RequestDefaultData<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_RdbRealDataRequest_RequestDefaultDataPtr
newCallback_RdbRealDataRequest_RequestDefaultData(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbRealDataRequest_RequestDefaultData<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RdbRealDataRequest_RequestDefaultDataPtr
newCallback_RdbRealDataRequest_RequestDefaultData(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbRealDataRequest_RequestDefaultData<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_RdbRealDataRequest_RequestSpecificData : public Callback_RdbRealDataRequest_RequestSpecificData_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_RdbRealDataRequest_RequestSpecificData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_RdbRealDataRequest_RequestSpecificDataPtr
newCallback_RdbRealDataRequest_RequestSpecificData(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbRealDataRequest_RequestSpecificData<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RdbRealDataRequest_RequestSpecificDataPtr
newCallback_RdbRealDataRequest_RequestSpecificData(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbRealDataRequest_RequestSpecificData<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_RdbRealDataRequest_RequestSpecificDataPtr
newCallback_RdbRealDataRequest_RequestSpecificData(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbRealDataRequest_RequestSpecificData<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RdbRealDataRequest_RequestSpecificDataPtr
newCallback_RdbRealDataRequest_RequestSpecificData(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbRealDataRequest_RequestSpecificData<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_RdbRealDataRequest_RequestSpecificData : public Callback_RdbRealDataRequest_RequestSpecificData_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_RdbRealDataRequest_RequestSpecificData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_RdbRealDataRequest_RequestSpecificDataPtr
newCallback_RdbRealDataRequest_RequestSpecificData(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbRealDataRequest_RequestSpecificData<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RdbRealDataRequest_RequestSpecificDataPtr
newCallback_RdbRealDataRequest_RequestSpecificData(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbRealDataRequest_RequestSpecificData<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_RdbRealDataRequest_RequestSpecificDataPtr
newCallback_RdbRealDataRequest_RequestSpecificData(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbRealDataRequest_RequestSpecificData<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RdbRealDataRequest_RequestSpecificDataPtr
newCallback_RdbRealDataRequest_RequestSpecificData(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbRealDataRequest_RequestSpecificData<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_RdbRealDataRequest_RequestCompleteData : public Callback_RdbRealDataRequest_RequestCompleteData_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_RdbRealDataRequest_RequestCompleteData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_RdbRealDataRequest_RequestCompleteDataPtr
newCallback_RdbRealDataRequest_RequestCompleteData(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbRealDataRequest_RequestCompleteData<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RdbRealDataRequest_RequestCompleteDataPtr
newCallback_RdbRealDataRequest_RequestCompleteData(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbRealDataRequest_RequestCompleteData<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_RdbRealDataRequest_RequestCompleteDataPtr
newCallback_RdbRealDataRequest_RequestCompleteData(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbRealDataRequest_RequestCompleteData<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RdbRealDataRequest_RequestCompleteDataPtr
newCallback_RdbRealDataRequest_RequestCompleteData(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbRealDataRequest_RequestCompleteData<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_RdbRealDataRequest_RequestCompleteData : public Callback_RdbRealDataRequest_RequestCompleteData_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_RdbRealDataRequest_RequestCompleteData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_RdbRealDataRequest_RequestCompleteDataPtr
newCallback_RdbRealDataRequest_RequestCompleteData(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbRealDataRequest_RequestCompleteData<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RdbRealDataRequest_RequestCompleteDataPtr
newCallback_RdbRealDataRequest_RequestCompleteData(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbRealDataRequest_RequestCompleteData<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_RdbRealDataRequest_RequestCompleteDataPtr
newCallback_RdbRealDataRequest_RequestCompleteData(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbRealDataRequest_RequestCompleteData<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RdbRealDataRequest_RequestCompleteDataPtr
newCallback_RdbRealDataRequest_RequestCompleteData(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbRealDataRequest_RequestCompleteData<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_RdbRealDataRequest_SendTopoDataRequest : public Callback_RdbRealDataRequest_SendTopoDataRequest_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_RdbRealDataRequest_SendTopoDataRequest(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_RdbRealDataRequest_SendTopoDataRequestPtr
newCallback_RdbRealDataRequest_SendTopoDataRequest(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbRealDataRequest_SendTopoDataRequest<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RdbRealDataRequest_SendTopoDataRequestPtr
newCallback_RdbRealDataRequest_SendTopoDataRequest(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbRealDataRequest_SendTopoDataRequest<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_RdbRealDataRequest_SendTopoDataRequestPtr
newCallback_RdbRealDataRequest_SendTopoDataRequest(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbRealDataRequest_SendTopoDataRequest<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RdbRealDataRequest_SendTopoDataRequestPtr
newCallback_RdbRealDataRequest_SendTopoDataRequest(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbRealDataRequest_SendTopoDataRequest<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_RdbRealDataRequest_SendTopoDataRequest : public Callback_RdbRealDataRequest_SendTopoDataRequest_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_RdbRealDataRequest_SendTopoDataRequest(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_RdbRealDataRequest_SendTopoDataRequestPtr
newCallback_RdbRealDataRequest_SendTopoDataRequest(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbRealDataRequest_SendTopoDataRequest<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RdbRealDataRequest_SendTopoDataRequestPtr
newCallback_RdbRealDataRequest_SendTopoDataRequest(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbRealDataRequest_SendTopoDataRequest<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_RdbRealDataRequest_SendTopoDataRequestPtr
newCallback_RdbRealDataRequest_SendTopoDataRequest(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbRealDataRequest_SendTopoDataRequest<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RdbRealDataRequest_SendTopoDataRequestPtr
newCallback_RdbRealDataRequest_SendTopoDataRequest(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbRealDataRequest_SendTopoDataRequest<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_RdbRealDataRespond_RespondDefaultData : public Callback_RdbRealDataRespond_RespondDefaultData_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_RdbRealDataRespond_RespondDefaultData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_RdbRealDataRespond_RespondDefaultDataPtr
newCallback_RdbRealDataRespond_RespondDefaultData(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbRealDataRespond_RespondDefaultData<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RdbRealDataRespond_RespondDefaultDataPtr
newCallback_RdbRealDataRespond_RespondDefaultData(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbRealDataRespond_RespondDefaultData<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_RdbRealDataRespond_RespondDefaultDataPtr
newCallback_RdbRealDataRespond_RespondDefaultData(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbRealDataRespond_RespondDefaultData<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RdbRealDataRespond_RespondDefaultDataPtr
newCallback_RdbRealDataRespond_RespondDefaultData(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbRealDataRespond_RespondDefaultData<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_RdbRealDataRespond_RespondDefaultData : public Callback_RdbRealDataRespond_RespondDefaultData_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_RdbRealDataRespond_RespondDefaultData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_RdbRealDataRespond_RespondDefaultDataPtr
newCallback_RdbRealDataRespond_RespondDefaultData(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbRealDataRespond_RespondDefaultData<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RdbRealDataRespond_RespondDefaultDataPtr
newCallback_RdbRealDataRespond_RespondDefaultData(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbRealDataRespond_RespondDefaultData<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_RdbRealDataRespond_RespondDefaultDataPtr
newCallback_RdbRealDataRespond_RespondDefaultData(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbRealDataRespond_RespondDefaultData<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RdbRealDataRespond_RespondDefaultDataPtr
newCallback_RdbRealDataRespond_RespondDefaultData(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbRealDataRespond_RespondDefaultData<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_RdbRealDataRespond_RespondSpecificData : public Callback_RdbRealDataRespond_RespondSpecificData_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_RdbRealDataRespond_RespondSpecificData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_RdbRealDataRespond_RespondSpecificDataPtr
newCallback_RdbRealDataRespond_RespondSpecificData(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbRealDataRespond_RespondSpecificData<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RdbRealDataRespond_RespondSpecificDataPtr
newCallback_RdbRealDataRespond_RespondSpecificData(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbRealDataRespond_RespondSpecificData<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_RdbRealDataRespond_RespondSpecificDataPtr
newCallback_RdbRealDataRespond_RespondSpecificData(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbRealDataRespond_RespondSpecificData<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RdbRealDataRespond_RespondSpecificDataPtr
newCallback_RdbRealDataRespond_RespondSpecificData(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbRealDataRespond_RespondSpecificData<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_RdbRealDataRespond_RespondSpecificData : public Callback_RdbRealDataRespond_RespondSpecificData_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_RdbRealDataRespond_RespondSpecificData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_RdbRealDataRespond_RespondSpecificDataPtr
newCallback_RdbRealDataRespond_RespondSpecificData(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbRealDataRespond_RespondSpecificData<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RdbRealDataRespond_RespondSpecificDataPtr
newCallback_RdbRealDataRespond_RespondSpecificData(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbRealDataRespond_RespondSpecificData<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_RdbRealDataRespond_RespondSpecificDataPtr
newCallback_RdbRealDataRespond_RespondSpecificData(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbRealDataRespond_RespondSpecificData<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RdbRealDataRespond_RespondSpecificDataPtr
newCallback_RdbRealDataRespond_RespondSpecificData(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbRealDataRespond_RespondSpecificData<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_RdbRealDataRespond_RespondCompleteData : public Callback_RdbRealDataRespond_RespondCompleteData_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_RdbRealDataRespond_RespondCompleteData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_RdbRealDataRespond_RespondCompleteDataPtr
newCallback_RdbRealDataRespond_RespondCompleteData(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbRealDataRespond_RespondCompleteData<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RdbRealDataRespond_RespondCompleteDataPtr
newCallback_RdbRealDataRespond_RespondCompleteData(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbRealDataRespond_RespondCompleteData<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_RdbRealDataRespond_RespondCompleteDataPtr
newCallback_RdbRealDataRespond_RespondCompleteData(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbRealDataRespond_RespondCompleteData<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RdbRealDataRespond_RespondCompleteDataPtr
newCallback_RdbRealDataRespond_RespondCompleteData(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbRealDataRespond_RespondCompleteData<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_RdbRealDataRespond_RespondCompleteData : public Callback_RdbRealDataRespond_RespondCompleteData_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_RdbRealDataRespond_RespondCompleteData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_RdbRealDataRespond_RespondCompleteDataPtr
newCallback_RdbRealDataRespond_RespondCompleteData(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbRealDataRespond_RespondCompleteData<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RdbRealDataRespond_RespondCompleteDataPtr
newCallback_RdbRealDataRespond_RespondCompleteData(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbRealDataRespond_RespondCompleteData<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_RdbRealDataRespond_RespondCompleteDataPtr
newCallback_RdbRealDataRespond_RespondCompleteData(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbRealDataRespond_RespondCompleteData<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RdbRealDataRespond_RespondCompleteDataPtr
newCallback_RdbRealDataRespond_RespondCompleteData(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbRealDataRespond_RespondCompleteData<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_RdbRealDataRespond_SendTopoDataRespond : public Callback_RdbRealDataRespond_SendTopoDataRespond_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_RdbRealDataRespond_SendTopoDataRespond(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_RdbRealDataRespond_SendTopoDataRespondPtr
newCallback_RdbRealDataRespond_SendTopoDataRespond(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbRealDataRespond_SendTopoDataRespond<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RdbRealDataRespond_SendTopoDataRespondPtr
newCallback_RdbRealDataRespond_SendTopoDataRespond(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbRealDataRespond_SendTopoDataRespond<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_RdbRealDataRespond_SendTopoDataRespondPtr
newCallback_RdbRealDataRespond_SendTopoDataRespond(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbRealDataRespond_SendTopoDataRespond<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RdbRealDataRespond_SendTopoDataRespondPtr
newCallback_RdbRealDataRespond_SendTopoDataRespond(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbRealDataRespond_SendTopoDataRespond<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_RdbRealDataRespond_SendTopoDataRespond : public Callback_RdbRealDataRespond_SendTopoDataRespond_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_RdbRealDataRespond_SendTopoDataRespond(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_RdbRealDataRespond_SendTopoDataRespondPtr
newCallback_RdbRealDataRespond_SendTopoDataRespond(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbRealDataRespond_SendTopoDataRespond<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RdbRealDataRespond_SendTopoDataRespondPtr
newCallback_RdbRealDataRespond_SendTopoDataRespond(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbRealDataRespond_SendTopoDataRespond<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_RdbRealDataRespond_SendTopoDataRespondPtr
newCallback_RdbRealDataRespond_SendTopoDataRespond(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbRealDataRespond_SendTopoDataRespond<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RdbRealDataRespond_SendTopoDataRespondPtr
newCallback_RdbRealDataRespond_SendTopoDataRespond(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbRealDataRespond_SendTopoDataRespond<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_RdbDataOpt_InsertData : public Callback_RdbDataOpt_InsertData_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool, const ::RdbRealData::RespondCompleteDataSequence&);

    CallbackNC_RdbDataOpt_InsertData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RdbRealData::RdbDataOptPrx __proxy = ::RdbRealData::RdbDataOptPrx::uncheckedCast(__result->getProxy());
        ::RdbRealData::RespondCompleteDataSequence errorSeq;
        bool __ret;
        try
        {
            __ret = __proxy->end_InsertData(errorSeq, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret, errorSeq);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_RdbDataOpt_InsertDataPtr
newCallback_RdbDataOpt_InsertData(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const ::RdbRealData::RespondCompleteDataSequence&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbDataOpt_InsertData<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RdbDataOpt_InsertDataPtr
newCallback_RdbDataOpt_InsertData(T* instance, void (T::*cb)(bool, const ::RdbRealData::RespondCompleteDataSequence&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbDataOpt_InsertData<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_RdbDataOpt_InsertData : public Callback_RdbDataOpt_InsertData_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const ::RdbRealData::RespondCompleteDataSequence&, const CT&);

    Callback_RdbDataOpt_InsertData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RdbRealData::RdbDataOptPrx __proxy = ::RdbRealData::RdbDataOptPrx::uncheckedCast(__result->getProxy());
        ::RdbRealData::RespondCompleteDataSequence errorSeq;
        bool __ret;
        try
        {
            __ret = __proxy->end_InsertData(errorSeq, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, errorSeq, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_RdbDataOpt_InsertDataPtr
newCallback_RdbDataOpt_InsertData(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const ::RdbRealData::RespondCompleteDataSequence&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbDataOpt_InsertData<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RdbDataOpt_InsertDataPtr
newCallback_RdbDataOpt_InsertData(T* instance, void (T::*cb)(bool, const ::RdbRealData::RespondCompleteDataSequence&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbDataOpt_InsertData<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_RdbDataOpt_SelectDefaultData : public Callback_RdbDataOpt_SelectDefaultData_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool, const ::RdbRealData::RespondDefaultDataSeq&);

    CallbackNC_RdbDataOpt_SelectDefaultData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RdbRealData::RdbDataOptPrx __proxy = ::RdbRealData::RdbDataOptPrx::uncheckedCast(__result->getProxy());
        ::RdbRealData::RespondDefaultDataSeq repSeq;
        bool __ret;
        try
        {
            __ret = __proxy->end_SelectDefaultData(repSeq, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret, repSeq);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_RdbDataOpt_SelectDefaultDataPtr
newCallback_RdbDataOpt_SelectDefaultData(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const ::RdbRealData::RespondDefaultDataSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbDataOpt_SelectDefaultData<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RdbDataOpt_SelectDefaultDataPtr
newCallback_RdbDataOpt_SelectDefaultData(T* instance, void (T::*cb)(bool, const ::RdbRealData::RespondDefaultDataSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbDataOpt_SelectDefaultData<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_RdbDataOpt_SelectDefaultData : public Callback_RdbDataOpt_SelectDefaultData_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const ::RdbRealData::RespondDefaultDataSeq&, const CT&);

    Callback_RdbDataOpt_SelectDefaultData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RdbRealData::RdbDataOptPrx __proxy = ::RdbRealData::RdbDataOptPrx::uncheckedCast(__result->getProxy());
        ::RdbRealData::RespondDefaultDataSeq repSeq;
        bool __ret;
        try
        {
            __ret = __proxy->end_SelectDefaultData(repSeq, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, repSeq, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_RdbDataOpt_SelectDefaultDataPtr
newCallback_RdbDataOpt_SelectDefaultData(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const ::RdbRealData::RespondDefaultDataSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbDataOpt_SelectDefaultData<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RdbDataOpt_SelectDefaultDataPtr
newCallback_RdbDataOpt_SelectDefaultData(T* instance, void (T::*cb)(bool, const ::RdbRealData::RespondDefaultDataSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbDataOpt_SelectDefaultData<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_RdbDataOpt_SelectSpecificData : public Callback_RdbDataOpt_SelectSpecificData_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool, const ::RdbRealData::RespondSpecficDataSeq&);

    CallbackNC_RdbDataOpt_SelectSpecificData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RdbRealData::RdbDataOptPrx __proxy = ::RdbRealData::RdbDataOptPrx::uncheckedCast(__result->getProxy());
        ::RdbRealData::RespondSpecficDataSeq repSeq;
        bool __ret;
        try
        {
            __ret = __proxy->end_SelectSpecificData(repSeq, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret, repSeq);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_RdbDataOpt_SelectSpecificDataPtr
newCallback_RdbDataOpt_SelectSpecificData(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const ::RdbRealData::RespondSpecficDataSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbDataOpt_SelectSpecificData<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RdbDataOpt_SelectSpecificDataPtr
newCallback_RdbDataOpt_SelectSpecificData(T* instance, void (T::*cb)(bool, const ::RdbRealData::RespondSpecficDataSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbDataOpt_SelectSpecificData<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_RdbDataOpt_SelectSpecificData : public Callback_RdbDataOpt_SelectSpecificData_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const ::RdbRealData::RespondSpecficDataSeq&, const CT&);

    Callback_RdbDataOpt_SelectSpecificData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RdbRealData::RdbDataOptPrx __proxy = ::RdbRealData::RdbDataOptPrx::uncheckedCast(__result->getProxy());
        ::RdbRealData::RespondSpecficDataSeq repSeq;
        bool __ret;
        try
        {
            __ret = __proxy->end_SelectSpecificData(repSeq, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, repSeq, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_RdbDataOpt_SelectSpecificDataPtr
newCallback_RdbDataOpt_SelectSpecificData(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const ::RdbRealData::RespondSpecficDataSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbDataOpt_SelectSpecificData<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RdbDataOpt_SelectSpecificDataPtr
newCallback_RdbDataOpt_SelectSpecificData(T* instance, void (T::*cb)(bool, const ::RdbRealData::RespondSpecficDataSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbDataOpt_SelectSpecificData<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_RdbDataOpt_SelectCompleteData : public Callback_RdbDataOpt_SelectCompleteData_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool, const ::RdbRealData::RespondCompleteDataSeq&);

    CallbackNC_RdbDataOpt_SelectCompleteData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RdbRealData::RdbDataOptPrx __proxy = ::RdbRealData::RdbDataOptPrx::uncheckedCast(__result->getProxy());
        ::RdbRealData::RespondCompleteDataSeq repSeq;
        bool __ret;
        try
        {
            __ret = __proxy->end_SelectCompleteData(repSeq, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret, repSeq);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_RdbDataOpt_SelectCompleteDataPtr
newCallback_RdbDataOpt_SelectCompleteData(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const ::RdbRealData::RespondCompleteDataSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbDataOpt_SelectCompleteData<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RdbDataOpt_SelectCompleteDataPtr
newCallback_RdbDataOpt_SelectCompleteData(T* instance, void (T::*cb)(bool, const ::RdbRealData::RespondCompleteDataSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbDataOpt_SelectCompleteData<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_RdbDataOpt_SelectCompleteData : public Callback_RdbDataOpt_SelectCompleteData_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const ::RdbRealData::RespondCompleteDataSeq&, const CT&);

    Callback_RdbDataOpt_SelectCompleteData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RdbRealData::RdbDataOptPrx __proxy = ::RdbRealData::RdbDataOptPrx::uncheckedCast(__result->getProxy());
        ::RdbRealData::RespondCompleteDataSeq repSeq;
        bool __ret;
        try
        {
            __ret = __proxy->end_SelectCompleteData(repSeq, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, repSeq, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_RdbDataOpt_SelectCompleteDataPtr
newCallback_RdbDataOpt_SelectCompleteData(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const ::RdbRealData::RespondCompleteDataSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbDataOpt_SelectCompleteData<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RdbDataOpt_SelectCompleteDataPtr
newCallback_RdbDataOpt_SelectCompleteData(T* instance, void (T::*cb)(bool, const ::RdbRealData::RespondCompleteDataSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbDataOpt_SelectCompleteData<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_RdbDataOpt_BatchSelectCompleteData : public Callback_RdbDataOpt_BatchSelectCompleteData_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool, const ::RdbRealData::RespondCompleteDataSeq&);

    CallbackNC_RdbDataOpt_BatchSelectCompleteData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RdbRealData::RdbDataOptPrx __proxy = ::RdbRealData::RdbDataOptPrx::uncheckedCast(__result->getProxy());
        ::RdbRealData::RespondCompleteDataSeq repSeq;
        bool __ret;
        try
        {
            __ret = __proxy->end_BatchSelectCompleteData(repSeq, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret, repSeq);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_RdbDataOpt_BatchSelectCompleteDataPtr
newCallback_RdbDataOpt_BatchSelectCompleteData(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const ::RdbRealData::RespondCompleteDataSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbDataOpt_BatchSelectCompleteData<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RdbDataOpt_BatchSelectCompleteDataPtr
newCallback_RdbDataOpt_BatchSelectCompleteData(T* instance, void (T::*cb)(bool, const ::RdbRealData::RespondCompleteDataSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbDataOpt_BatchSelectCompleteData<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_RdbDataOpt_BatchSelectCompleteData : public Callback_RdbDataOpt_BatchSelectCompleteData_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const ::RdbRealData::RespondCompleteDataSeq&, const CT&);

    Callback_RdbDataOpt_BatchSelectCompleteData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RdbRealData::RdbDataOptPrx __proxy = ::RdbRealData::RdbDataOptPrx::uncheckedCast(__result->getProxy());
        ::RdbRealData::RespondCompleteDataSeq repSeq;
        bool __ret;
        try
        {
            __ret = __proxy->end_BatchSelectCompleteData(repSeq, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, repSeq, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_RdbDataOpt_BatchSelectCompleteDataPtr
newCallback_RdbDataOpt_BatchSelectCompleteData(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const ::RdbRealData::RespondCompleteDataSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbDataOpt_BatchSelectCompleteData<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RdbDataOpt_BatchSelectCompleteDataPtr
newCallback_RdbDataOpt_BatchSelectCompleteData(T* instance, void (T::*cb)(bool, const ::RdbRealData::RespondCompleteDataSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbDataOpt_BatchSelectCompleteData<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_RdbDataOpt_SelectDataWithCondition : public Callback_RdbDataOpt_SelectDataWithCondition_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool, const ::RdbRealData::RespondCompleteDataSeq&);

    CallbackNC_RdbDataOpt_SelectDataWithCondition(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RdbRealData::RdbDataOptPrx __proxy = ::RdbRealData::RdbDataOptPrx::uncheckedCast(__result->getProxy());
        ::RdbRealData::RespondCompleteDataSeq repSeq;
        bool __ret;
        try
        {
            __ret = __proxy->end_SelectDataWithCondition(repSeq, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret, repSeq);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_RdbDataOpt_SelectDataWithConditionPtr
newCallback_RdbDataOpt_SelectDataWithCondition(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const ::RdbRealData::RespondCompleteDataSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbDataOpt_SelectDataWithCondition<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RdbDataOpt_SelectDataWithConditionPtr
newCallback_RdbDataOpt_SelectDataWithCondition(T* instance, void (T::*cb)(bool, const ::RdbRealData::RespondCompleteDataSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbDataOpt_SelectDataWithCondition<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_RdbDataOpt_SelectDataWithCondition : public Callback_RdbDataOpt_SelectDataWithCondition_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const ::RdbRealData::RespondCompleteDataSeq&, const CT&);

    Callback_RdbDataOpt_SelectDataWithCondition(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RdbRealData::RdbDataOptPrx __proxy = ::RdbRealData::RdbDataOptPrx::uncheckedCast(__result->getProxy());
        ::RdbRealData::RespondCompleteDataSeq repSeq;
        bool __ret;
        try
        {
            __ret = __proxy->end_SelectDataWithCondition(repSeq, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, repSeq, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_RdbDataOpt_SelectDataWithConditionPtr
newCallback_RdbDataOpt_SelectDataWithCondition(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const ::RdbRealData::RespondCompleteDataSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbDataOpt_SelectDataWithCondition<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RdbDataOpt_SelectDataWithConditionPtr
newCallback_RdbDataOpt_SelectDataWithCondition(T* instance, void (T::*cb)(bool, const ::RdbRealData::RespondCompleteDataSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbDataOpt_SelectDataWithCondition<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_RdbDataOpt_SelectDataCount : public Callback_RdbDataOpt_SelectDataCount_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool, const ::RdbRealData::RespondDataCountSequence&);

    CallbackNC_RdbDataOpt_SelectDataCount(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RdbRealData::RdbDataOptPrx __proxy = ::RdbRealData::RdbDataOptPrx::uncheckedCast(__result->getProxy());
        ::RdbRealData::RespondDataCountSequence repSeq;
        bool __ret;
        try
        {
            __ret = __proxy->end_SelectDataCount(repSeq, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret, repSeq);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_RdbDataOpt_SelectDataCountPtr
newCallback_RdbDataOpt_SelectDataCount(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const ::RdbRealData::RespondDataCountSequence&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbDataOpt_SelectDataCount<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RdbDataOpt_SelectDataCountPtr
newCallback_RdbDataOpt_SelectDataCount(T* instance, void (T::*cb)(bool, const ::RdbRealData::RespondDataCountSequence&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbDataOpt_SelectDataCount<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_RdbDataOpt_SelectDataCount : public Callback_RdbDataOpt_SelectDataCount_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const ::RdbRealData::RespondDataCountSequence&, const CT&);

    Callback_RdbDataOpt_SelectDataCount(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RdbRealData::RdbDataOptPrx __proxy = ::RdbRealData::RdbDataOptPrx::uncheckedCast(__result->getProxy());
        ::RdbRealData::RespondDataCountSequence repSeq;
        bool __ret;
        try
        {
            __ret = __proxy->end_SelectDataCount(repSeq, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, repSeq, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_RdbDataOpt_SelectDataCountPtr
newCallback_RdbDataOpt_SelectDataCount(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const ::RdbRealData::RespondDataCountSequence&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbDataOpt_SelectDataCount<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RdbDataOpt_SelectDataCountPtr
newCallback_RdbDataOpt_SelectDataCount(T* instance, void (T::*cb)(bool, const ::RdbRealData::RespondDataCountSequence&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbDataOpt_SelectDataCount<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_RdbDataOpt_UpdateCompleteData : public Callback_RdbDataOpt_UpdateCompleteData_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool, const ::RdbRealData::RespondCompleteDataSequence&);

    CallbackNC_RdbDataOpt_UpdateCompleteData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RdbRealData::RdbDataOptPrx __proxy = ::RdbRealData::RdbDataOptPrx::uncheckedCast(__result->getProxy());
        ::RdbRealData::RespondCompleteDataSequence repSeq;
        bool __ret;
        try
        {
            __ret = __proxy->end_UpdateCompleteData(repSeq, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret, repSeq);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_RdbDataOpt_UpdateCompleteDataPtr
newCallback_RdbDataOpt_UpdateCompleteData(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const ::RdbRealData::RespondCompleteDataSequence&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbDataOpt_UpdateCompleteData<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RdbDataOpt_UpdateCompleteDataPtr
newCallback_RdbDataOpt_UpdateCompleteData(T* instance, void (T::*cb)(bool, const ::RdbRealData::RespondCompleteDataSequence&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbDataOpt_UpdateCompleteData<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_RdbDataOpt_UpdateCompleteData : public Callback_RdbDataOpt_UpdateCompleteData_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const ::RdbRealData::RespondCompleteDataSequence&, const CT&);

    Callback_RdbDataOpt_UpdateCompleteData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RdbRealData::RdbDataOptPrx __proxy = ::RdbRealData::RdbDataOptPrx::uncheckedCast(__result->getProxy());
        ::RdbRealData::RespondCompleteDataSequence repSeq;
        bool __ret;
        try
        {
            __ret = __proxy->end_UpdateCompleteData(repSeq, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, repSeq, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_RdbDataOpt_UpdateCompleteDataPtr
newCallback_RdbDataOpt_UpdateCompleteData(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const ::RdbRealData::RespondCompleteDataSequence&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbDataOpt_UpdateCompleteData<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RdbDataOpt_UpdateCompleteDataPtr
newCallback_RdbDataOpt_UpdateCompleteData(T* instance, void (T::*cb)(bool, const ::RdbRealData::RespondCompleteDataSequence&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbDataOpt_UpdateCompleteData<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_RdbDataOpt_DeleteRdbData : public Callback_RdbDataOpt_DeleteRdbData_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool, const ::RdbRealData::RequestDefaultDataSequence&);

    CallbackNC_RdbDataOpt_DeleteRdbData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RdbRealData::RdbDataOptPrx __proxy = ::RdbRealData::RdbDataOptPrx::uncheckedCast(__result->getProxy());
        ::RdbRealData::RequestDefaultDataSequence errorSeq;
        bool __ret;
        try
        {
            __ret = __proxy->end_DeleteRdbData(errorSeq, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret, errorSeq);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_RdbDataOpt_DeleteRdbDataPtr
newCallback_RdbDataOpt_DeleteRdbData(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const ::RdbRealData::RequestDefaultDataSequence&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbDataOpt_DeleteRdbData<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RdbDataOpt_DeleteRdbDataPtr
newCallback_RdbDataOpt_DeleteRdbData(T* instance, void (T::*cb)(bool, const ::RdbRealData::RequestDefaultDataSequence&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbDataOpt_DeleteRdbData<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_RdbDataOpt_DeleteRdbData : public Callback_RdbDataOpt_DeleteRdbData_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const ::RdbRealData::RequestDefaultDataSequence&, const CT&);

    Callback_RdbDataOpt_DeleteRdbData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RdbRealData::RdbDataOptPrx __proxy = ::RdbRealData::RdbDataOptPrx::uncheckedCast(__result->getProxy());
        ::RdbRealData::RequestDefaultDataSequence errorSeq;
        bool __ret;
        try
        {
            __ret = __proxy->end_DeleteRdbData(errorSeq, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, errorSeq, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_RdbDataOpt_DeleteRdbDataPtr
newCallback_RdbDataOpt_DeleteRdbData(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const ::RdbRealData::RequestDefaultDataSequence&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbDataOpt_DeleteRdbData<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RdbDataOpt_DeleteRdbDataPtr
newCallback_RdbDataOpt_DeleteRdbData(T* instance, void (T::*cb)(bool, const ::RdbRealData::RequestDefaultDataSequence&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbDataOpt_DeleteRdbData<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_RdbDataOpt_GetEquipTree : public Callback_RdbDataOpt_GetEquipTree_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool, const ::RdbRealData::EquipTreeSequence&);

    CallbackNC_RdbDataOpt_GetEquipTree(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RdbRealData::RdbDataOptPrx __proxy = ::RdbRealData::RdbDataOptPrx::uncheckedCast(__result->getProxy());
        ::RdbRealData::EquipTreeSequence treeSeq;
        bool __ret;
        try
        {
            __ret = __proxy->end_GetEquipTree(treeSeq, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret, treeSeq);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_RdbDataOpt_GetEquipTreePtr
newCallback_RdbDataOpt_GetEquipTree(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const ::RdbRealData::EquipTreeSequence&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbDataOpt_GetEquipTree<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RdbDataOpt_GetEquipTreePtr
newCallback_RdbDataOpt_GetEquipTree(T* instance, void (T::*cb)(bool, const ::RdbRealData::EquipTreeSequence&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbDataOpt_GetEquipTree<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_RdbDataOpt_GetEquipTree : public Callback_RdbDataOpt_GetEquipTree_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const ::RdbRealData::EquipTreeSequence&, const CT&);

    Callback_RdbDataOpt_GetEquipTree(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RdbRealData::RdbDataOptPrx __proxy = ::RdbRealData::RdbDataOptPrx::uncheckedCast(__result->getProxy());
        ::RdbRealData::EquipTreeSequence treeSeq;
        bool __ret;
        try
        {
            __ret = __proxy->end_GetEquipTree(treeSeq, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, treeSeq, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_RdbDataOpt_GetEquipTreePtr
newCallback_RdbDataOpt_GetEquipTree(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const ::RdbRealData::EquipTreeSequence&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbDataOpt_GetEquipTree<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RdbDataOpt_GetEquipTreePtr
newCallback_RdbDataOpt_GetEquipTree(T* instance, void (T::*cb)(bool, const ::RdbRealData::EquipTreeSequence&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbDataOpt_GetEquipTree<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_RdbDataOpt_GetSpecificEquipTree : public Callback_RdbDataOpt_GetSpecificEquipTree_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool, const ::RdbRealData::EquipTreeSequence&);

    CallbackNC_RdbDataOpt_GetSpecificEquipTree(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RdbRealData::RdbDataOptPrx __proxy = ::RdbRealData::RdbDataOptPrx::uncheckedCast(__result->getProxy());
        ::RdbRealData::EquipTreeSequence treeSeq;
        bool __ret;
        try
        {
            __ret = __proxy->end_GetSpecificEquipTree(treeSeq, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret, treeSeq);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_RdbDataOpt_GetSpecificEquipTreePtr
newCallback_RdbDataOpt_GetSpecificEquipTree(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const ::RdbRealData::EquipTreeSequence&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbDataOpt_GetSpecificEquipTree<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RdbDataOpt_GetSpecificEquipTreePtr
newCallback_RdbDataOpt_GetSpecificEquipTree(T* instance, void (T::*cb)(bool, const ::RdbRealData::EquipTreeSequence&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbDataOpt_GetSpecificEquipTree<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_RdbDataOpt_GetSpecificEquipTree : public Callback_RdbDataOpt_GetSpecificEquipTree_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const ::RdbRealData::EquipTreeSequence&, const CT&);

    Callback_RdbDataOpt_GetSpecificEquipTree(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RdbRealData::RdbDataOptPrx __proxy = ::RdbRealData::RdbDataOptPrx::uncheckedCast(__result->getProxy());
        ::RdbRealData::EquipTreeSequence treeSeq;
        bool __ret;
        try
        {
            __ret = __proxy->end_GetSpecificEquipTree(treeSeq, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, treeSeq, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_RdbDataOpt_GetSpecificEquipTreePtr
newCallback_RdbDataOpt_GetSpecificEquipTree(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const ::RdbRealData::EquipTreeSequence&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbDataOpt_GetSpecificEquipTree<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RdbDataOpt_GetSpecificEquipTreePtr
newCallback_RdbDataOpt_GetSpecificEquipTree(T* instance, void (T::*cb)(bool, const ::RdbRealData::EquipTreeSequence&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbDataOpt_GetSpecificEquipTree<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_RdbDataOpt_GetEquipLineAndStationInfo : public Callback_RdbDataOpt_GetEquipLineAndStationInfo_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool, const ::RdbRealData::LineAndStationInfo&);

    CallbackNC_RdbDataOpt_GetEquipLineAndStationInfo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RdbRealData::RdbDataOptPrx __proxy = ::RdbRealData::RdbDataOptPrx::uncheckedCast(__result->getProxy());
        ::RdbRealData::LineAndStationInfo info;
        bool __ret;
        try
        {
            __ret = __proxy->end_GetEquipLineAndStationInfo(info, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret, info);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_RdbDataOpt_GetEquipLineAndStationInfoPtr
newCallback_RdbDataOpt_GetEquipLineAndStationInfo(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const ::RdbRealData::LineAndStationInfo&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbDataOpt_GetEquipLineAndStationInfo<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RdbDataOpt_GetEquipLineAndStationInfoPtr
newCallback_RdbDataOpt_GetEquipLineAndStationInfo(T* instance, void (T::*cb)(bool, const ::RdbRealData::LineAndStationInfo&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbDataOpt_GetEquipLineAndStationInfo<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_RdbDataOpt_GetEquipLineAndStationInfo : public Callback_RdbDataOpt_GetEquipLineAndStationInfo_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const ::RdbRealData::LineAndStationInfo&, const CT&);

    Callback_RdbDataOpt_GetEquipLineAndStationInfo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RdbRealData::RdbDataOptPrx __proxy = ::RdbRealData::RdbDataOptPrx::uncheckedCast(__result->getProxy());
        ::RdbRealData::LineAndStationInfo info;
        bool __ret;
        try
        {
            __ret = __proxy->end_GetEquipLineAndStationInfo(info, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, info, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_RdbDataOpt_GetEquipLineAndStationInfoPtr
newCallback_RdbDataOpt_GetEquipLineAndStationInfo(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const ::RdbRealData::LineAndStationInfo&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbDataOpt_GetEquipLineAndStationInfo<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RdbDataOpt_GetEquipLineAndStationInfoPtr
newCallback_RdbDataOpt_GetEquipLineAndStationInfo(T* instance, void (T::*cb)(bool, const ::RdbRealData::LineAndStationInfo&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbDataOpt_GetEquipLineAndStationInfo<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_RdbDataOpt_isOrphanNode : public Callback_RdbDataOpt_isOrphanNode_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_RdbDataOpt_isOrphanNode(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RdbRealData::RdbDataOptPrx __proxy = ::RdbRealData::RdbDataOptPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_isOrphanNode(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_RdbDataOpt_isOrphanNodePtr
newCallback_RdbDataOpt_isOrphanNode(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbDataOpt_isOrphanNode<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RdbDataOpt_isOrphanNodePtr
newCallback_RdbDataOpt_isOrphanNode(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbDataOpt_isOrphanNode<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_RdbDataOpt_isOrphanNode : public Callback_RdbDataOpt_isOrphanNode_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_RdbDataOpt_isOrphanNode(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RdbRealData::RdbDataOptPrx __proxy = ::RdbRealData::RdbDataOptPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_isOrphanNode(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_RdbDataOpt_isOrphanNodePtr
newCallback_RdbDataOpt_isOrphanNode(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbDataOpt_isOrphanNode<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RdbDataOpt_isOrphanNodePtr
newCallback_RdbDataOpt_isOrphanNode(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbDataOpt_isOrphanNode<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_RdbDataOpt_isEmptyNode : public Callback_RdbDataOpt_isEmptyNode_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_RdbDataOpt_isEmptyNode(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RdbRealData::RdbDataOptPrx __proxy = ::RdbRealData::RdbDataOptPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_isEmptyNode(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_RdbDataOpt_isEmptyNodePtr
newCallback_RdbDataOpt_isEmptyNode(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbDataOpt_isEmptyNode<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RdbDataOpt_isEmptyNodePtr
newCallback_RdbDataOpt_isEmptyNode(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbDataOpt_isEmptyNode<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_RdbDataOpt_isEmptyNode : public Callback_RdbDataOpt_isEmptyNode_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_RdbDataOpt_isEmptyNode(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RdbRealData::RdbDataOptPrx __proxy = ::RdbRealData::RdbDataOptPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_isEmptyNode(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_RdbDataOpt_isEmptyNodePtr
newCallback_RdbDataOpt_isEmptyNode(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbDataOpt_isEmptyNode<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RdbDataOpt_isEmptyNodePtr
newCallback_RdbDataOpt_isEmptyNode(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbDataOpt_isEmptyNode<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_RdbDataOpt_IsInvalidDbData : public Callback_RdbDataOpt_IsInvalidDbData_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_RdbDataOpt_IsInvalidDbData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RdbRealData::RdbDataOptPrx __proxy = ::RdbRealData::RdbDataOptPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_IsInvalidDbData(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_RdbDataOpt_IsInvalidDbDataPtr
newCallback_RdbDataOpt_IsInvalidDbData(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbDataOpt_IsInvalidDbData<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RdbDataOpt_IsInvalidDbDataPtr
newCallback_RdbDataOpt_IsInvalidDbData(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbDataOpt_IsInvalidDbData<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_RdbDataOpt_IsInvalidDbData : public Callback_RdbDataOpt_IsInvalidDbData_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_RdbDataOpt_IsInvalidDbData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RdbRealData::RdbDataOptPrx __proxy = ::RdbRealData::RdbDataOptPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_IsInvalidDbData(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_RdbDataOpt_IsInvalidDbDataPtr
newCallback_RdbDataOpt_IsInvalidDbData(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbDataOpt_IsInvalidDbData<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RdbDataOpt_IsInvalidDbDataPtr
newCallback_RdbDataOpt_IsInvalidDbData(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbDataOpt_IsInvalidDbData<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_RdbDataOpt_GetTopoData : public Callback_RdbDataOpt_GetTopoData_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool, const ::RdbRealData::ReceiveTopoDataSeq&);

    CallbackNC_RdbDataOpt_GetTopoData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RdbRealData::RdbDataOptPrx __proxy = ::RdbRealData::RdbDataOptPrx::uncheckedCast(__result->getProxy());
        ::RdbRealData::ReceiveTopoDataSeq outDataSeq;
        bool __ret;
        try
        {
            __ret = __proxy->end_GetTopoData(outDataSeq, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret, outDataSeq);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_RdbDataOpt_GetTopoDataPtr
newCallback_RdbDataOpt_GetTopoData(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const ::RdbRealData::ReceiveTopoDataSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbDataOpt_GetTopoData<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RdbDataOpt_GetTopoDataPtr
newCallback_RdbDataOpt_GetTopoData(T* instance, void (T::*cb)(bool, const ::RdbRealData::ReceiveTopoDataSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbDataOpt_GetTopoData<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_RdbDataOpt_GetTopoData : public Callback_RdbDataOpt_GetTopoData_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const ::RdbRealData::ReceiveTopoDataSeq&, const CT&);

    Callback_RdbDataOpt_GetTopoData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RdbRealData::RdbDataOptPrx __proxy = ::RdbRealData::RdbDataOptPrx::uncheckedCast(__result->getProxy());
        ::RdbRealData::ReceiveTopoDataSeq outDataSeq;
        bool __ret;
        try
        {
            __ret = __proxy->end_GetTopoData(outDataSeq, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, outDataSeq, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_RdbDataOpt_GetTopoDataPtr
newCallback_RdbDataOpt_GetTopoData(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const ::RdbRealData::ReceiveTopoDataSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbDataOpt_GetTopoData<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RdbDataOpt_GetTopoDataPtr
newCallback_RdbDataOpt_GetTopoData(T* instance, void (T::*cb)(bool, const ::RdbRealData::ReceiveTopoDataSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbDataOpt_GetTopoData<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_RdbDataOpt_GetTopoIslandInfo : public Callback_RdbDataOpt_GetTopoIslandInfo_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RdbRealData::TopoIslandInfoSeq&);

    CallbackNC_RdbDataOpt_GetTopoIslandInfo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RdbRealData::RdbDataOptPrx __proxy = ::RdbRealData::RdbDataOptPrx::uncheckedCast(__result->getProxy());
        ::RdbRealData::TopoIslandInfoSeq islandInfoes;
        try
        {
            __proxy->end_GetTopoIslandInfo(islandInfoes, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(islandInfoes);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_RdbDataOpt_GetTopoIslandInfoPtr
newCallback_RdbDataOpt_GetTopoIslandInfo(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RdbRealData::TopoIslandInfoSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbDataOpt_GetTopoIslandInfo<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RdbDataOpt_GetTopoIslandInfoPtr
newCallback_RdbDataOpt_GetTopoIslandInfo(T* instance, void (T::*cb)(const ::RdbRealData::TopoIslandInfoSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbDataOpt_GetTopoIslandInfo<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_RdbDataOpt_GetTopoIslandInfo : public Callback_RdbDataOpt_GetTopoIslandInfo_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RdbRealData::TopoIslandInfoSeq&, const CT&);

    Callback_RdbDataOpt_GetTopoIslandInfo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RdbRealData::RdbDataOptPrx __proxy = ::RdbRealData::RdbDataOptPrx::uncheckedCast(__result->getProxy());
        ::RdbRealData::TopoIslandInfoSeq islandInfoes;
        try
        {
            __proxy->end_GetTopoIslandInfo(islandInfoes, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(islandInfoes, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_RdbDataOpt_GetTopoIslandInfoPtr
newCallback_RdbDataOpt_GetTopoIslandInfo(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RdbRealData::TopoIslandInfoSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbDataOpt_GetTopoIslandInfo<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RdbDataOpt_GetTopoIslandInfoPtr
newCallback_RdbDataOpt_GetTopoIslandInfo(T* instance, void (T::*cb)(const ::RdbRealData::TopoIslandInfoSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbDataOpt_GetTopoIslandInfo<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_RdbDataOpt_UpdateTopoData : public Callback_RdbDataOpt_UpdateTopoData_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_RdbDataOpt_UpdateTopoData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_RdbDataOpt_UpdateTopoDataPtr
newCallback_RdbDataOpt_UpdateTopoData(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbDataOpt_UpdateTopoData<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RdbDataOpt_UpdateTopoDataPtr
newCallback_RdbDataOpt_UpdateTopoData(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbDataOpt_UpdateTopoData<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_RdbDataOpt_UpdateTopoDataPtr
newCallback_RdbDataOpt_UpdateTopoData(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbDataOpt_UpdateTopoData<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RdbDataOpt_UpdateTopoDataPtr
newCallback_RdbDataOpt_UpdateTopoData(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbDataOpt_UpdateTopoData<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_RdbDataOpt_UpdateTopoData : public Callback_RdbDataOpt_UpdateTopoData_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_RdbDataOpt_UpdateTopoData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_RdbDataOpt_UpdateTopoDataPtr
newCallback_RdbDataOpt_UpdateTopoData(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbDataOpt_UpdateTopoData<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RdbDataOpt_UpdateTopoDataPtr
newCallback_RdbDataOpt_UpdateTopoData(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbDataOpt_UpdateTopoData<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_RdbDataOpt_UpdateTopoDataPtr
newCallback_RdbDataOpt_UpdateTopoData(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbDataOpt_UpdateTopoData<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RdbDataOpt_UpdateTopoDataPtr
newCallback_RdbDataOpt_UpdateTopoData(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbDataOpt_UpdateTopoData<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_RdbDataOpt_GetSectionData : public Callback_RdbDataOpt_GetSectionData_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool, const ::RdbRealData::DoubleSeq&, const ::RdbRealData::IntegerSeq&);

    CallbackNC_RdbDataOpt_GetSectionData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RdbRealData::RdbDataOptPrx __proxy = ::RdbRealData::RdbDataOptPrx::uncheckedCast(__result->getProxy());
        ::RdbRealData::DoubleSeq analogValues;
        ::RdbRealData::IntegerSeq discreteValues;
        bool __ret;
        try
        {
            __ret = __proxy->end_GetSectionData(analogValues, discreteValues, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret, analogValues, discreteValues);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_RdbDataOpt_GetSectionDataPtr
newCallback_RdbDataOpt_GetSectionData(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const ::RdbRealData::DoubleSeq&, const ::RdbRealData::IntegerSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbDataOpt_GetSectionData<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RdbDataOpt_GetSectionDataPtr
newCallback_RdbDataOpt_GetSectionData(T* instance, void (T::*cb)(bool, const ::RdbRealData::DoubleSeq&, const ::RdbRealData::IntegerSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbDataOpt_GetSectionData<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_RdbDataOpt_GetSectionData : public Callback_RdbDataOpt_GetSectionData_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const ::RdbRealData::DoubleSeq&, const ::RdbRealData::IntegerSeq&, const CT&);

    Callback_RdbDataOpt_GetSectionData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RdbRealData::RdbDataOptPrx __proxy = ::RdbRealData::RdbDataOptPrx::uncheckedCast(__result->getProxy());
        ::RdbRealData::DoubleSeq analogValues;
        ::RdbRealData::IntegerSeq discreteValues;
        bool __ret;
        try
        {
            __ret = __proxy->end_GetSectionData(analogValues, discreteValues, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, analogValues, discreteValues, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_RdbDataOpt_GetSectionDataPtr
newCallback_RdbDataOpt_GetSectionData(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const ::RdbRealData::DoubleSeq&, const ::RdbRealData::IntegerSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbDataOpt_GetSectionData<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RdbDataOpt_GetSectionDataPtr
newCallback_RdbDataOpt_GetSectionData(T* instance, void (T::*cb)(bool, const ::RdbRealData::DoubleSeq&, const ::RdbRealData::IntegerSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbDataOpt_GetSectionData<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_RdbDataOpt_GetAllSectionData : public Callback_RdbDataOpt_GetAllSectionData_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool, const ::RdbRealData::SectionValueSeq&, const ::RdbRealData::IntegerSeq&);

    CallbackNC_RdbDataOpt_GetAllSectionData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RdbRealData::RdbDataOptPrx __proxy = ::RdbRealData::RdbDataOptPrx::uncheckedCast(__result->getProxy());
        ::RdbRealData::SectionValueSeq analogValues;
        ::RdbRealData::IntegerSeq discreteValues;
        bool __ret;
        try
        {
            __ret = __proxy->end_GetAllSectionData(analogValues, discreteValues, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret, analogValues, discreteValues);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_RdbDataOpt_GetAllSectionDataPtr
newCallback_RdbDataOpt_GetAllSectionData(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const ::RdbRealData::SectionValueSeq&, const ::RdbRealData::IntegerSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbDataOpt_GetAllSectionData<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RdbDataOpt_GetAllSectionDataPtr
newCallback_RdbDataOpt_GetAllSectionData(T* instance, void (T::*cb)(bool, const ::RdbRealData::SectionValueSeq&, const ::RdbRealData::IntegerSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbDataOpt_GetAllSectionData<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_RdbDataOpt_GetAllSectionData : public Callback_RdbDataOpt_GetAllSectionData_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const ::RdbRealData::SectionValueSeq&, const ::RdbRealData::IntegerSeq&, const CT&);

    Callback_RdbDataOpt_GetAllSectionData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RdbRealData::RdbDataOptPrx __proxy = ::RdbRealData::RdbDataOptPrx::uncheckedCast(__result->getProxy());
        ::RdbRealData::SectionValueSeq analogValues;
        ::RdbRealData::IntegerSeq discreteValues;
        bool __ret;
        try
        {
            __ret = __proxy->end_GetAllSectionData(analogValues, discreteValues, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, analogValues, discreteValues, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_RdbDataOpt_GetAllSectionDataPtr
newCallback_RdbDataOpt_GetAllSectionData(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const ::RdbRealData::SectionValueSeq&, const ::RdbRealData::IntegerSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbDataOpt_GetAllSectionData<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RdbDataOpt_GetAllSectionDataPtr
newCallback_RdbDataOpt_GetAllSectionData(T* instance, void (T::*cb)(bool, const ::RdbRealData::SectionValueSeq&, const ::RdbRealData::IntegerSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbDataOpt_GetAllSectionData<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_RdbDataOpt_updateBreaker : public Callback_RdbDataOpt_updateBreaker_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_RdbDataOpt_updateBreaker(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RdbRealData::RdbDataOptPrx __proxy = ::RdbRealData::RdbDataOptPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_updateBreaker(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_RdbDataOpt_updateBreakerPtr
newCallback_RdbDataOpt_updateBreaker(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbDataOpt_updateBreaker<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RdbDataOpt_updateBreakerPtr
newCallback_RdbDataOpt_updateBreaker(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbDataOpt_updateBreaker<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_RdbDataOpt_updateBreaker : public Callback_RdbDataOpt_updateBreaker_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_RdbDataOpt_updateBreaker(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RdbRealData::RdbDataOptPrx __proxy = ::RdbRealData::RdbDataOptPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_updateBreaker(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_RdbDataOpt_updateBreakerPtr
newCallback_RdbDataOpt_updateBreaker(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbDataOpt_updateBreaker<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RdbDataOpt_updateBreakerPtr
newCallback_RdbDataOpt_updateBreaker(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbDataOpt_updateBreaker<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_RdbDataOpt_updateDisconnector : public Callback_RdbDataOpt_updateDisconnector_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_RdbDataOpt_updateDisconnector(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RdbRealData::RdbDataOptPrx __proxy = ::RdbRealData::RdbDataOptPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_updateDisconnector(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_RdbDataOpt_updateDisconnectorPtr
newCallback_RdbDataOpt_updateDisconnector(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbDataOpt_updateDisconnector<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RdbDataOpt_updateDisconnectorPtr
newCallback_RdbDataOpt_updateDisconnector(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbDataOpt_updateDisconnector<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_RdbDataOpt_updateDisconnector : public Callback_RdbDataOpt_updateDisconnector_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_RdbDataOpt_updateDisconnector(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RdbRealData::RdbDataOptPrx __proxy = ::RdbRealData::RdbDataOptPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_updateDisconnector(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_RdbDataOpt_updateDisconnectorPtr
newCallback_RdbDataOpt_updateDisconnector(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbDataOpt_updateDisconnector<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RdbDataOpt_updateDisconnectorPtr
newCallback_RdbDataOpt_updateDisconnector(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbDataOpt_updateDisconnector<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_RdbDataOpt_updatePowerTransformer : public Callback_RdbDataOpt_updatePowerTransformer_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_RdbDataOpt_updatePowerTransformer(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RdbRealData::RdbDataOptPrx __proxy = ::RdbRealData::RdbDataOptPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_updatePowerTransformer(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_RdbDataOpt_updatePowerTransformerPtr
newCallback_RdbDataOpt_updatePowerTransformer(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbDataOpt_updatePowerTransformer<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RdbDataOpt_updatePowerTransformerPtr
newCallback_RdbDataOpt_updatePowerTransformer(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbDataOpt_updatePowerTransformer<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_RdbDataOpt_updatePowerTransformer : public Callback_RdbDataOpt_updatePowerTransformer_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_RdbDataOpt_updatePowerTransformer(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RdbRealData::RdbDataOptPrx __proxy = ::RdbRealData::RdbDataOptPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_updatePowerTransformer(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_RdbDataOpt_updatePowerTransformerPtr
newCallback_RdbDataOpt_updatePowerTransformer(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbDataOpt_updatePowerTransformer<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RdbDataOpt_updatePowerTransformerPtr
newCallback_RdbDataOpt_updatePowerTransformer(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbDataOpt_updatePowerTransformer<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_RdbDataOpt_updateAnalog : public Callback_RdbDataOpt_updateAnalog_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_RdbDataOpt_updateAnalog(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RdbRealData::RdbDataOptPrx __proxy = ::RdbRealData::RdbDataOptPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_updateAnalog(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_RdbDataOpt_updateAnalogPtr
newCallback_RdbDataOpt_updateAnalog(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbDataOpt_updateAnalog<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RdbDataOpt_updateAnalogPtr
newCallback_RdbDataOpt_updateAnalog(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbDataOpt_updateAnalog<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_RdbDataOpt_updateAnalog : public Callback_RdbDataOpt_updateAnalog_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_RdbDataOpt_updateAnalog(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RdbRealData::RdbDataOptPrx __proxy = ::RdbRealData::RdbDataOptPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_updateAnalog(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_RdbDataOpt_updateAnalogPtr
newCallback_RdbDataOpt_updateAnalog(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbDataOpt_updateAnalog<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RdbDataOpt_updateAnalogPtr
newCallback_RdbDataOpt_updateAnalog(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbDataOpt_updateAnalog<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_RdbDataOpt_updateDiscrete : public Callback_RdbDataOpt_updateDiscrete_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_RdbDataOpt_updateDiscrete(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RdbRealData::RdbDataOptPrx __proxy = ::RdbRealData::RdbDataOptPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_updateDiscrete(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_RdbDataOpt_updateDiscretePtr
newCallback_RdbDataOpt_updateDiscrete(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbDataOpt_updateDiscrete<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RdbDataOpt_updateDiscretePtr
newCallback_RdbDataOpt_updateDiscrete(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbDataOpt_updateDiscrete<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_RdbDataOpt_updateDiscrete : public Callback_RdbDataOpt_updateDiscrete_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_RdbDataOpt_updateDiscrete(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RdbRealData::RdbDataOptPrx __proxy = ::RdbRealData::RdbDataOptPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_updateDiscrete(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_RdbDataOpt_updateDiscretePtr
newCallback_RdbDataOpt_updateDiscrete(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbDataOpt_updateDiscrete<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RdbDataOpt_updateDiscretePtr
newCallback_RdbDataOpt_updateDiscrete(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbDataOpt_updateDiscrete<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_RdbDataOpt_updateAccumulator : public Callback_RdbDataOpt_updateAccumulator_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_RdbDataOpt_updateAccumulator(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RdbRealData::RdbDataOptPrx __proxy = ::RdbRealData::RdbDataOptPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_updateAccumulator(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_RdbDataOpt_updateAccumulatorPtr
newCallback_RdbDataOpt_updateAccumulator(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbDataOpt_updateAccumulator<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RdbDataOpt_updateAccumulatorPtr
newCallback_RdbDataOpt_updateAccumulator(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbDataOpt_updateAccumulator<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_RdbDataOpt_updateAccumulator : public Callback_RdbDataOpt_updateAccumulator_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_RdbDataOpt_updateAccumulator(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RdbRealData::RdbDataOptPrx __proxy = ::RdbRealData::RdbDataOptPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_updateAccumulator(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_RdbDataOpt_updateAccumulatorPtr
newCallback_RdbDataOpt_updateAccumulator(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbDataOpt_updateAccumulator<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RdbDataOpt_updateAccumulatorPtr
newCallback_RdbDataOpt_updateAccumulator(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbDataOpt_updateAccumulator<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_RdbDataOpt_updateRemoteUnit : public Callback_RdbDataOpt_updateRemoteUnit_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_RdbDataOpt_updateRemoteUnit(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RdbRealData::RdbDataOptPrx __proxy = ::RdbRealData::RdbDataOptPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_updateRemoteUnit(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_RdbDataOpt_updateRemoteUnitPtr
newCallback_RdbDataOpt_updateRemoteUnit(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbDataOpt_updateRemoteUnit<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RdbDataOpt_updateRemoteUnitPtr
newCallback_RdbDataOpt_updateRemoteUnit(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbDataOpt_updateRemoteUnit<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_RdbDataOpt_updateRemoteUnit : public Callback_RdbDataOpt_updateRemoteUnit_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_RdbDataOpt_updateRemoteUnit(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RdbRealData::RdbDataOptPrx __proxy = ::RdbRealData::RdbDataOptPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_updateRemoteUnit(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_RdbDataOpt_updateRemoteUnitPtr
newCallback_RdbDataOpt_updateRemoteUnit(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbDataOpt_updateRemoteUnit<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RdbDataOpt_updateRemoteUnitPtr
newCallback_RdbDataOpt_updateRemoteUnit(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbDataOpt_updateRemoteUnit<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_RdbDataOpt_getCurvePointDataSeq : public Callback_RdbDataOpt_getCurvePointDataSeq_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool, const ::RdbRealData::CurvePointDataSeq&);

    CallbackNC_RdbDataOpt_getCurvePointDataSeq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RdbRealData::RdbDataOptPrx __proxy = ::RdbRealData::RdbDataOptPrx::uncheckedCast(__result->getProxy());
        ::RdbRealData::CurvePointDataSeq dataSeq;
        bool __ret;
        try
        {
            __ret = __proxy->end_getCurvePointDataSeq(dataSeq, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret, dataSeq);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_RdbDataOpt_getCurvePointDataSeqPtr
newCallback_RdbDataOpt_getCurvePointDataSeq(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const ::RdbRealData::CurvePointDataSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbDataOpt_getCurvePointDataSeq<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RdbDataOpt_getCurvePointDataSeqPtr
newCallback_RdbDataOpt_getCurvePointDataSeq(T* instance, void (T::*cb)(bool, const ::RdbRealData::CurvePointDataSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbDataOpt_getCurvePointDataSeq<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_RdbDataOpt_getCurvePointDataSeq : public Callback_RdbDataOpt_getCurvePointDataSeq_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const ::RdbRealData::CurvePointDataSeq&, const CT&);

    Callback_RdbDataOpt_getCurvePointDataSeq(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RdbRealData::RdbDataOptPrx __proxy = ::RdbRealData::RdbDataOptPrx::uncheckedCast(__result->getProxy());
        ::RdbRealData::CurvePointDataSeq dataSeq;
        bool __ret;
        try
        {
            __ret = __proxy->end_getCurvePointDataSeq(dataSeq, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, dataSeq, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_RdbDataOpt_getCurvePointDataSeqPtr
newCallback_RdbDataOpt_getCurvePointDataSeq(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const ::RdbRealData::CurvePointDataSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbDataOpt_getCurvePointDataSeq<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RdbDataOpt_getCurvePointDataSeqPtr
newCallback_RdbDataOpt_getCurvePointDataSeq(T* instance, void (T::*cb)(bool, const ::RdbRealData::CurvePointDataSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbDataOpt_getCurvePointDataSeq<T, CT>(instance, cb, excb, sentcb);
}

}

namespace RdbWarningData
{

template<class T>
class CallbackNC_RdbAlarmData_SendAlarmData : public Callback_RdbAlarmData_SendAlarmData_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_RdbAlarmData_SendAlarmData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_RdbAlarmData_SendAlarmDataPtr
newCallback_RdbAlarmData_SendAlarmData(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbAlarmData_SendAlarmData<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RdbAlarmData_SendAlarmDataPtr
newCallback_RdbAlarmData_SendAlarmData(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbAlarmData_SendAlarmData<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_RdbAlarmData_SendAlarmDataPtr
newCallback_RdbAlarmData_SendAlarmData(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbAlarmData_SendAlarmData<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RdbAlarmData_SendAlarmDataPtr
newCallback_RdbAlarmData_SendAlarmData(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbAlarmData_SendAlarmData<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_RdbAlarmData_SendAlarmData : public Callback_RdbAlarmData_SendAlarmData_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_RdbAlarmData_SendAlarmData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_RdbAlarmData_SendAlarmDataPtr
newCallback_RdbAlarmData_SendAlarmData(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbAlarmData_SendAlarmData<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RdbAlarmData_SendAlarmDataPtr
newCallback_RdbAlarmData_SendAlarmData(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbAlarmData_SendAlarmData<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_RdbAlarmData_SendAlarmDataPtr
newCallback_RdbAlarmData_SendAlarmData(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbAlarmData_SendAlarmData<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RdbAlarmData_SendAlarmDataPtr
newCallback_RdbAlarmData_SendAlarmData(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbAlarmData_SendAlarmData<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_RdbAllAlarmData_SendAllAlarmData : public Callback_RdbAllAlarmData_SendAllAlarmData_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_RdbAllAlarmData_SendAllAlarmData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_RdbAllAlarmData_SendAllAlarmDataPtr
newCallback_RdbAllAlarmData_SendAllAlarmData(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbAllAlarmData_SendAllAlarmData<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RdbAllAlarmData_SendAllAlarmDataPtr
newCallback_RdbAllAlarmData_SendAllAlarmData(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbAllAlarmData_SendAllAlarmData<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_RdbAllAlarmData_SendAllAlarmDataPtr
newCallback_RdbAllAlarmData_SendAllAlarmData(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbAllAlarmData_SendAllAlarmData<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RdbAllAlarmData_SendAllAlarmDataPtr
newCallback_RdbAllAlarmData_SendAllAlarmData(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbAllAlarmData_SendAllAlarmData<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_RdbAllAlarmData_SendAllAlarmData : public Callback_RdbAllAlarmData_SendAllAlarmData_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_RdbAllAlarmData_SendAllAlarmData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_RdbAllAlarmData_SendAllAlarmDataPtr
newCallback_RdbAllAlarmData_SendAllAlarmData(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbAllAlarmData_SendAllAlarmData<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RdbAllAlarmData_SendAllAlarmDataPtr
newCallback_RdbAllAlarmData_SendAllAlarmData(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbAllAlarmData_SendAllAlarmData<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_RdbAllAlarmData_SendAllAlarmDataPtr
newCallback_RdbAllAlarmData_SendAllAlarmData(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbAllAlarmData_SendAllAlarmData<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RdbAllAlarmData_SendAllAlarmDataPtr
newCallback_RdbAllAlarmData_SendAllAlarmData(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbAllAlarmData_SendAllAlarmData<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_RdbWarningBuf_SendOutAnalogWarningBufs : public Callback_RdbWarningBuf_SendOutAnalogWarningBufs_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_RdbWarningBuf_SendOutAnalogWarningBufs(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_RdbWarningBuf_SendOutAnalogWarningBufsPtr
newCallback_RdbWarningBuf_SendOutAnalogWarningBufs(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbWarningBuf_SendOutAnalogWarningBufs<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RdbWarningBuf_SendOutAnalogWarningBufsPtr
newCallback_RdbWarningBuf_SendOutAnalogWarningBufs(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbWarningBuf_SendOutAnalogWarningBufs<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_RdbWarningBuf_SendOutAnalogWarningBufsPtr
newCallback_RdbWarningBuf_SendOutAnalogWarningBufs(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbWarningBuf_SendOutAnalogWarningBufs<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RdbWarningBuf_SendOutAnalogWarningBufsPtr
newCallback_RdbWarningBuf_SendOutAnalogWarningBufs(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbWarningBuf_SendOutAnalogWarningBufs<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_RdbWarningBuf_SendOutAnalogWarningBufs : public Callback_RdbWarningBuf_SendOutAnalogWarningBufs_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_RdbWarningBuf_SendOutAnalogWarningBufs(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_RdbWarningBuf_SendOutAnalogWarningBufsPtr
newCallback_RdbWarningBuf_SendOutAnalogWarningBufs(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbWarningBuf_SendOutAnalogWarningBufs<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RdbWarningBuf_SendOutAnalogWarningBufsPtr
newCallback_RdbWarningBuf_SendOutAnalogWarningBufs(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbWarningBuf_SendOutAnalogWarningBufs<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_RdbWarningBuf_SendOutAnalogWarningBufsPtr
newCallback_RdbWarningBuf_SendOutAnalogWarningBufs(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbWarningBuf_SendOutAnalogWarningBufs<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RdbWarningBuf_SendOutAnalogWarningBufsPtr
newCallback_RdbWarningBuf_SendOutAnalogWarningBufs(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbWarningBuf_SendOutAnalogWarningBufs<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_RdbWarningBuf_SendChangedUnitWarningBufs : public Callback_RdbWarningBuf_SendChangedUnitWarningBufs_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_RdbWarningBuf_SendChangedUnitWarningBufs(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_RdbWarningBuf_SendChangedUnitWarningBufsPtr
newCallback_RdbWarningBuf_SendChangedUnitWarningBufs(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbWarningBuf_SendChangedUnitWarningBufs<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RdbWarningBuf_SendChangedUnitWarningBufsPtr
newCallback_RdbWarningBuf_SendChangedUnitWarningBufs(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbWarningBuf_SendChangedUnitWarningBufs<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_RdbWarningBuf_SendChangedUnitWarningBufsPtr
newCallback_RdbWarningBuf_SendChangedUnitWarningBufs(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbWarningBuf_SendChangedUnitWarningBufs<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RdbWarningBuf_SendChangedUnitWarningBufsPtr
newCallback_RdbWarningBuf_SendChangedUnitWarningBufs(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbWarningBuf_SendChangedUnitWarningBufs<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_RdbWarningBuf_SendChangedUnitWarningBufs : public Callback_RdbWarningBuf_SendChangedUnitWarningBufs_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_RdbWarningBuf_SendChangedUnitWarningBufs(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_RdbWarningBuf_SendChangedUnitWarningBufsPtr
newCallback_RdbWarningBuf_SendChangedUnitWarningBufs(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbWarningBuf_SendChangedUnitWarningBufs<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RdbWarningBuf_SendChangedUnitWarningBufsPtr
newCallback_RdbWarningBuf_SendChangedUnitWarningBufs(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbWarningBuf_SendChangedUnitWarningBufs<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_RdbWarningBuf_SendChangedUnitWarningBufsPtr
newCallback_RdbWarningBuf_SendChangedUnitWarningBufs(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbWarningBuf_SendChangedUnitWarningBufs<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RdbWarningBuf_SendChangedUnitWarningBufsPtr
newCallback_RdbWarningBuf_SendChangedUnitWarningBufs(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbWarningBuf_SendChangedUnitWarningBufs<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_RdbWarningBuf_SendChangedChannelWarningBufs : public Callback_RdbWarningBuf_SendChangedChannelWarningBufs_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_RdbWarningBuf_SendChangedChannelWarningBufs(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_RdbWarningBuf_SendChangedChannelWarningBufsPtr
newCallback_RdbWarningBuf_SendChangedChannelWarningBufs(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbWarningBuf_SendChangedChannelWarningBufs<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RdbWarningBuf_SendChangedChannelWarningBufsPtr
newCallback_RdbWarningBuf_SendChangedChannelWarningBufs(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbWarningBuf_SendChangedChannelWarningBufs<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_RdbWarningBuf_SendChangedChannelWarningBufsPtr
newCallback_RdbWarningBuf_SendChangedChannelWarningBufs(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbWarningBuf_SendChangedChannelWarningBufs<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RdbWarningBuf_SendChangedChannelWarningBufsPtr
newCallback_RdbWarningBuf_SendChangedChannelWarningBufs(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RdbWarningBuf_SendChangedChannelWarningBufs<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_RdbWarningBuf_SendChangedChannelWarningBufs : public Callback_RdbWarningBuf_SendChangedChannelWarningBufs_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_RdbWarningBuf_SendChangedChannelWarningBufs(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_RdbWarningBuf_SendChangedChannelWarningBufsPtr
newCallback_RdbWarningBuf_SendChangedChannelWarningBufs(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbWarningBuf_SendChangedChannelWarningBufs<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RdbWarningBuf_SendChangedChannelWarningBufsPtr
newCallback_RdbWarningBuf_SendChangedChannelWarningBufs(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbWarningBuf_SendChangedChannelWarningBufs<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_RdbWarningBuf_SendChangedChannelWarningBufsPtr
newCallback_RdbWarningBuf_SendChangedChannelWarningBufs(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbWarningBuf_SendChangedChannelWarningBufs<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RdbWarningBuf_SendChangedChannelWarningBufsPtr
newCallback_RdbWarningBuf_SendChangedChannelWarningBufs(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RdbWarningBuf_SendChangedChannelWarningBufs<T, CT>(instance, 0, excb, sentcb);
}

}

#include <IceUtil/PopDisableWarnings.h>
#endif
